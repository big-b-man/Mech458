
Lab 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  000003aa  0000043e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800214  00800214  00000452  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000452  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000106d  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d30  00000000  00000000  000015a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000647  00000000  00000000  000022d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00002918  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ca  00000000  00000000  000029e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001cb  00000000  00000000  00002fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000317d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ea       	ldi	r30, 0xAA	; 170
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 31       	cpi	r26, 0x14	; 20
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e1       	ldi	r26, 0x14	; 20
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 31       	cpi	r26, 0x15	; 21
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	e9 d0       	rcall	.+466    	; 0x2f2 <main>
 120:	42 c1       	rjmp	.+644    	; 0x3a6 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <pwm>:
#include <avr/interrupt.h> /* Needed for interrupt functionality */

void pwm(){
	//Step 1
	// Set Timer0 to Fast PWM mode (WGM02:0 = 011)
	TCCR0A |= (1 << WGM00) | (1 << WGM01);  // Set WGM01 and WGM00
 124:	84 b5       	in	r24, 0x24	; 36
 126:	83 60       	ori	r24, 0x03	; 3
 128:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~(1 << WGM02);                // Clear WGM02 for Fast PWM, TOP=0xFF
 12a:	85 b5       	in	r24, 0x25	; 37
 12c:	87 7f       	andi	r24, 0xF7	; 247
 12e:	85 bd       	out	0x25, r24	; 37

	//Step 2
	// Enable the Output Compare Match A Interrupt for Timer 0
	TIMSK0 |= (1 <<  (OCIE0A));// Enable overflow interrupt
 130:	ee e6       	ldi	r30, 0x6E	; 110
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	82 60       	ori	r24, 0x02	; 2
 138:	80 83       	st	Z, r24

	//step 3
	// Set Compare Match Output Mode to clear on compare match and set at TOP (non-inverting mode)
	TCCR0A |= (1 << COM0A1);  // Set COM0A1 to 1
 13a:	84 b5       	in	r24, 0x24	; 36
 13c:	80 68       	ori	r24, 0x80	; 128
 13e:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1 << COM0A0); // Clear COM0A0 to 0
 140:	84 b5       	in	r24, 0x24	; 36
 142:	8f 7b       	andi	r24, 0xBF	; 191
 144:	84 bd       	out	0x24, r24	; 36
	
	//step 4
	// Set the prescaler
	TCCR0B |= (1 << CS01) | (1 << CS00);// CS02:0 = 011 (clk/64 prescale)
 146:	85 b5       	in	r24, 0x25	; 37
 148:	83 60       	ori	r24, 0x03	; 3
 14a:	85 bd       	out	0x25, r24	; 37
	
	//Step 5
	//For a duty cycle of 50%, ORCA should be 127, which is half of 255 rounded to nearest integer
	OCR0A = 127;
 14c:	8f e7       	ldi	r24, 0x7F	; 127
 14e:	87 bd       	out	0x27, r24	; 39
	
	//Step 6
	DDRB |= (1 << DDB7);  // Configure PORTB7 as output (OC0A is on PB7)
 150:	27 9a       	sbi	0x04, 7	; 4
 152:	08 95       	ret

00000154 <timer8MHz>:
 154:	e1 e6       	ldi	r30, 0x61	; 97
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 e8       	ldi	r24, 0x80	; 128
 15a:	80 83       	st	Z, r24
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 83       	st	Z, r24
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 166:	08 95       	ret

00000168 <mTimer>:
 168:	ac 01       	movw	r20, r24
 16a:	e1 e8       	ldi	r30, 0x81	; 129
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	90 81       	ld	r25, Z
 170:	98 60       	ori	r25, 0x08	; 8
 172:	90 83       	st	Z, r25
 174:	88 ee       	ldi	r24, 0xE8	; 232
 176:	93 e0       	ldi	r25, 0x03	; 3
 178:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 17c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 180:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 184:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
 188:	ef e6       	ldi	r30, 0x6F	; 111
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	90 81       	ld	r25, Z
 18e:	92 60       	ori	r25, 0x02	; 2
 190:	90 83       	st	Z, r25
 192:	b1 9a       	sbi	0x16, 1	; 22
 194:	20 e0       	ldi	r18, 0x00	; 0
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	05 c0       	rjmp	.+10     	; 0x1a4 <mTimer+0x3c>
 19a:	b1 9b       	sbis	0x16, 1	; 22
 19c:	fe cf       	rjmp	.-4      	; 0x19a <mTimer+0x32>
 19e:	b1 9a       	sbi	0x16, 1	; 22
 1a0:	2f 5f       	subi	r18, 0xFF	; 255
 1a2:	3f 4f       	sbci	r19, 0xFF	; 255
 1a4:	24 17       	cp	r18, r20
 1a6:	35 07       	cpc	r19, r21
 1a8:	1c f4       	brge	.+6      	; 0x1b0 <mTimer+0x48>
 1aa:	b1 9b       	sbis	0x16, 1	; 22
 1ac:	f6 cf       	rjmp	.-20     	; 0x19a <mTimer+0x32>
 1ae:	f7 cf       	rjmp	.-18     	; 0x19e <mTimer+0x36>
 1b0:	08 95       	ret

000001b2 <moveMotor>:
		moveMotor(1,100);
		mTimer(1000);
	}/*Loop through stepper motor angles*/
}

void moveMotor(int dir, int moveNum){
 1b2:	8f 92       	push	r8
 1b4:	9f 92       	push	r9
 1b6:	af 92       	push	r10
 1b8:	bf 92       	push	r11
 1ba:	cf 92       	push	r12
 1bc:	df 92       	push	r13
 1be:	ef 92       	push	r14
 1c0:	ff 92       	push	r15
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	60 97       	sbiw	r28, 0x10	; 16
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	f8 94       	cli
 1d4:	de bf       	out	0x3e, r29	; 62
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	cd bf       	out	0x3d, r28	; 61
	//if(dir == 0){
	const int forSteps[] = {0,1,2,3};		
 1da:	28 e0       	ldi	r18, 0x08	; 8
 1dc:	e0 e0       	ldi	r30, 0x00	; 0
 1de:	f2 e0       	ldi	r31, 0x02	; 2
 1e0:	de 01       	movw	r26, r28
 1e2:	11 96       	adiw	r26, 0x01	; 1
 1e4:	01 90       	ld	r0, Z+
 1e6:	0d 92       	st	X+, r0
 1e8:	2a 95       	dec	r18
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <moveMotor+0x32>
	const int backSteps[] = {2,3,0,1};
 1ec:	28 e0       	ldi	r18, 0x08	; 8
 1ee:	e8 e0       	ldi	r30, 0x08	; 8
 1f0:	f2 e0       	ldi	r31, 0x02	; 2
 1f2:	de 01       	movw	r26, r28
 1f4:	19 96       	adiw	r26, 0x09	; 9
 1f6:	01 90       	ld	r0, Z+
 1f8:	0d 92       	st	X+, r0
 1fa:	2a 95       	dec	r18
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <moveMotor+0x44>
	int *ptr;
	if(dir == 0){
 1fe:	89 2b       	or	r24, r25
 200:	29 f0       	breq	.+10     	; 0x20c <moveMotor+0x5a>
		ptr = forSteps;
	} else {
		ptr = backSteps;
 202:	7e 01       	movw	r14, r28
 204:	89 e0       	ldi	r24, 0x09	; 9
 206:	e8 0e       	add	r14, r24
 208:	f1 1c       	adc	r15, r1
 20a:	03 c0       	rjmp	.+6      	; 0x212 <moveMotor+0x60>
	//if(dir == 0){
	const int forSteps[] = {0,1,2,3};		
	const int backSteps[] = {2,3,0,1};
	int *ptr;
	if(dir == 0){
		ptr = forSteps;
 20c:	de 01       	movw	r26, r28
 20e:	11 96       	adiw	r26, 0x01	; 1
 210:	7d 01       	movw	r14, r26
	} else {
		ptr = backSteps;
	}
		for(int i=0; i < moveNum; i++){
 212:	16 16       	cp	r1, r22
 214:	17 06       	cpc	r1, r23
 216:	0c f0       	brlt	.+2      	; 0x21a <moveMotor+0x68>
 218:	59 c0       	rjmp	.+178    	; 0x2cc <moveMotor+0x11a>
 21a:	6b 01       	movw	r12, r22
 21c:	00 e0       	ldi	r16, 0x00	; 0
 21e:	10 e0       	ldi	r17, 0x00	; 0
					PORTC = 0x02;
					stepNum = *(ptr+1);
					break;
				case(1):
					PORTA = motorSteps[*(ptr+2)];
					PORTC = 0x04;
 220:	68 94       	set
 222:	88 24       	eor	r8, r8
 224:	82 f8       	bld	r8, 2
					PORTC = 0x01;
					stepNum = *ptr;
					break;
				case(0):
					PORTA = motorSteps[*(ptr+1)];
					PORTC = 0x02;
 226:	68 94       	set
 228:	99 24       	eor	r9, r9
 22a:	91 f8       	bld	r9, 1
					PORTC = 0x04;
					stepNum = *(ptr+2);
					break;
				case(2):
					PORTA = motorSteps[*(ptr+3)];
					PORTC = 0x08;
 22c:	68 94       	set
 22e:	aa 24       	eor	r10, r10
 230:	a3 f8       	bld	r10, 3
	}
		for(int i=0; i < moveNum; i++){
			switch(stepNum){
				case(3):
					PORTA = motorSteps[*ptr];
					PORTC = 0x01;
 232:	bb 24       	eor	r11, r11
 234:	b3 94       	inc	r11
		ptr = forSteps;
	} else {
		ptr = backSteps;
	}
		for(int i=0; i < moveNum; i++){
			switch(stepNum){
 236:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
 23a:	81 30       	cpi	r24, 0x01	; 1
 23c:	09 f1       	breq	.+66     	; 0x280 <moveMotor+0xce>
 23e:	88 f0       	brcs	.+34     	; 0x262 <moveMotor+0xb0>
 240:	82 30       	cpi	r24, 0x02	; 2
 242:	69 f1       	breq	.+90     	; 0x29e <moveMotor+0xec>
 244:	83 30       	cpi	r24, 0x03	; 3
 246:	c9 f5       	brne	.+114    	; 0x2ba <moveMotor+0x108>
				case(3):
					PORTA = motorSteps[*ptr];
 248:	d7 01       	movw	r26, r14
 24a:	ed 91       	ld	r30, X+
 24c:	fc 91       	ld	r31, X
 24e:	11 97       	sbiw	r26, 0x01	; 1
 250:	e0 5f       	subi	r30, 0xF0	; 240
 252:	fd 4f       	sbci	r31, 0xFD	; 253
 254:	80 81       	ld	r24, Z
 256:	82 b9       	out	0x02, r24	; 2
					PORTC = 0x01;
 258:	b8 b8       	out	0x08, r11	; 8
					stepNum = *ptr;
 25a:	8c 91       	ld	r24, X
 25c:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
					break;
 260:	2c c0       	rjmp	.+88     	; 0x2ba <moveMotor+0x108>
				case(0):
					PORTA = motorSteps[*(ptr+1)];
 262:	d7 01       	movw	r26, r14
 264:	12 96       	adiw	r26, 0x02	; 2
 266:	ed 91       	ld	r30, X+
 268:	fc 91       	ld	r31, X
 26a:	13 97       	sbiw	r26, 0x03	; 3
 26c:	e0 5f       	subi	r30, 0xF0	; 240
 26e:	fd 4f       	sbci	r31, 0xFD	; 253
 270:	80 81       	ld	r24, Z
 272:	82 b9       	out	0x02, r24	; 2
					PORTC = 0x02;
 274:	98 b8       	out	0x08, r9	; 8
					stepNum = *(ptr+1);
 276:	12 96       	adiw	r26, 0x02	; 2
 278:	8c 91       	ld	r24, X
 27a:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
					break;
 27e:	1d c0       	rjmp	.+58     	; 0x2ba <moveMotor+0x108>
				case(1):
					PORTA = motorSteps[*(ptr+2)];
 280:	d7 01       	movw	r26, r14
 282:	14 96       	adiw	r26, 0x04	; 4
 284:	ed 91       	ld	r30, X+
 286:	fc 91       	ld	r31, X
 288:	15 97       	sbiw	r26, 0x05	; 5
 28a:	e0 5f       	subi	r30, 0xF0	; 240
 28c:	fd 4f       	sbci	r31, 0xFD	; 253
 28e:	80 81       	ld	r24, Z
 290:	82 b9       	out	0x02, r24	; 2
					PORTC = 0x04;
 292:	88 b8       	out	0x08, r8	; 8
					stepNum = *(ptr+2);
 294:	14 96       	adiw	r26, 0x04	; 4
 296:	8c 91       	ld	r24, X
 298:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
					break;
 29c:	0e c0       	rjmp	.+28     	; 0x2ba <moveMotor+0x108>
				case(2):
					PORTA = motorSteps[*(ptr+3)];
 29e:	d7 01       	movw	r26, r14
 2a0:	16 96       	adiw	r26, 0x06	; 6
 2a2:	ed 91       	ld	r30, X+
 2a4:	fc 91       	ld	r31, X
 2a6:	17 97       	sbiw	r26, 0x07	; 7
 2a8:	e0 5f       	subi	r30, 0xF0	; 240
 2aa:	fd 4f       	sbci	r31, 0xFD	; 253
 2ac:	80 81       	ld	r24, Z
 2ae:	82 b9       	out	0x02, r24	; 2
					PORTC = 0x08;
 2b0:	a8 b8       	out	0x08, r10	; 8
					stepNum = *(ptr+3);
 2b2:	16 96       	adiw	r26, 0x06	; 6
 2b4:	8c 91       	ld	r24, X
 2b6:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
					break;
				default:
					break;
			}
			mTimer(20);
 2ba:	84 e1       	ldi	r24, 0x14	; 20
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	54 df       	rcall	.-344    	; 0x168 <mTimer>
	if(dir == 0){
		ptr = forSteps;
	} else {
		ptr = backSteps;
	}
		for(int i=0; i < moveNum; i++){
 2c0:	0f 5f       	subi	r16, 0xFF	; 255
 2c2:	1f 4f       	sbci	r17, 0xFF	; 255
 2c4:	c0 16       	cp	r12, r16
 2c6:	d1 06       	cpc	r13, r17
 2c8:	09 f0       	breq	.+2      	; 0x2cc <moveMotor+0x11a>
 2ca:	b5 cf       	rjmp	.-150    	; 0x236 <moveMotor+0x84>
					break;
			}
			mTimer(20);
		}
	//}
 2cc:	60 96       	adiw	r28, 0x10	; 16
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	f8 94       	cli
 2d2:	de bf       	out	0x3e, r29	; 62
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	cd bf       	out	0x3d, r28	; 61
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	ff 90       	pop	r15
 2e2:	ef 90       	pop	r14
 2e4:	df 90       	pop	r13
 2e6:	cf 90       	pop	r12
 2e8:	bf 90       	pop	r11
 2ea:	af 90       	pop	r10
 2ec:	9f 90       	pop	r9
 2ee:	8f 90       	pop	r8
 2f0:	08 95       	ret

000002f2 <main>:
							0b00101000,
							0b00000101 };
void moveMotor(int dir, int moveNum);//0 is CW, 1 is CCW

int main(){
	timer8MHz();
 2f2:	30 df       	rcall	.-416    	; 0x154 <timer8MHz>
	pwm();
 2f4:	17 df       	rcall	.-466    	; 0x124 <pwm>
 2f6:	8f ef       	ldi	r24, 0xFF	; 255
	
	DDRA = 0xFF; //Sets PortA to output
 2f8:	81 b9       	out	0x01, r24	; 1
 2fa:	87 b9       	out	0x07, r24	; 7
	DDRC = 0xFF; //Sets PortC to output
 2fc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	DDRL = 0xFF; //Sets PortL to output
 300:	80 ef       	ldi	r24, 0xF0	; 240
	
	/*Stepper Setup*/
	PORTL=0b11110000;
 302:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 306:	6a e5       	ldi	r22, 0x5A	; 90
	moveMotor(0,90);
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	51 df       	rcall	.-350    	; 0x1b2 <moveMotor>
 310:	cb e0       	ldi	r28, 0x0B	; 11
	/*Stepper Setup*/
	
	/*Loop through stepper motor angles*/
	while(1){
		mTimer(1000);
		PORTL =0b10000000;
 312:	d1 e0       	ldi	r29, 0x01	; 1
 314:	68 94       	set
 316:	cc 24       	eor	r12, r12
 318:	c7 f8       	bld	r12, 7
 31a:	68 94       	set
		moveMotor(0,17); //30 deg cw
		mTimer(1000);
		PORTL =0b01000000;
 31c:	dd 24       	eor	r13, r13
 31e:	d6 f8       	bld	r13, 6
 320:	68 94       	set
		moveMotor(0,33); //60 deg cw
		mTimer(1000);
		PORTL =0b00100000;
 322:	ee 24       	eor	r14, r14
 324:	e5 f8       	bld	r14, 5
 326:	0f 2e       	mov	r0, r31
		moveMotor(0,100); //180 deg cw
		mTimer(1000);
		PORTL =0b10010000;
 328:	f0 e9       	ldi	r31, 0x90	; 144
 32a:	ff 2e       	mov	r15, r31
 32c:	f0 2d       	mov	r31, r0
 32e:	00 e5       	ldi	r16, 0x50	; 80
		moveMotor(1,17);
		mTimer(1000);
		PORTL =0b01010000;
 330:	10 e3       	ldi	r17, 0x30	; 48
	moveMotor(0,90);
	/*Stepper Setup*/
	
	/*Loop through stepper motor angles*/
	while(1){
		mTimer(1000);
 332:	88 ee       	ldi	r24, 0xE8	; 232
 334:	93 e0       	ldi	r25, 0x03	; 3
 336:	18 df       	rcall	.-464    	; 0x168 <mTimer>
 338:	c8 82       	st	Y, r12
		PORTL =0b10000000;
 33a:	61 e1       	ldi	r22, 0x11	; 17
		moveMotor(0,17); //30 deg cw
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	37 df       	rcall	.-402    	; 0x1b2 <moveMotor>
		mTimer(1000);
 344:	88 ee       	ldi	r24, 0xE8	; 232
 346:	93 e0       	ldi	r25, 0x03	; 3
 348:	0f df       	rcall	.-482    	; 0x168 <mTimer>
		PORTL =0b01000000;
 34a:	d8 82       	st	Y, r13
		moveMotor(0,33); //60 deg cw
 34c:	61 e2       	ldi	r22, 0x21	; 33
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	2e df       	rcall	.-420    	; 0x1b2 <moveMotor>
		mTimer(1000);
 356:	88 ee       	ldi	r24, 0xE8	; 232
 358:	93 e0       	ldi	r25, 0x03	; 3
 35a:	06 df       	rcall	.-500    	; 0x168 <mTimer>
		PORTL =0b00100000;
		moveMotor(0,100); //180 deg cw
 35c:	e8 82       	st	Y, r14
 35e:	64 e6       	ldi	r22, 0x64	; 100
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
		mTimer(1000);
 366:	25 df       	rcall	.-438    	; 0x1b2 <moveMotor>
 368:	88 ee       	ldi	r24, 0xE8	; 232
 36a:	93 e0       	ldi	r25, 0x03	; 3
		PORTL =0b10010000;
 36c:	fd de       	rcall	.-518    	; 0x168 <mTimer>
		moveMotor(1,17);
 36e:	f8 82       	st	Y, r15
 370:	61 e1       	ldi	r22, 0x11	; 17
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
		mTimer(1000);
 378:	1c df       	rcall	.-456    	; 0x1b2 <moveMotor>
 37a:	88 ee       	ldi	r24, 0xE8	; 232
 37c:	93 e0       	ldi	r25, 0x03	; 3
		PORTL =0b01010000;
 37e:	f4 de       	rcall	.-536    	; 0x168 <mTimer>
		moveMotor(1,33);
 380:	08 83       	st	Y, r16
 382:	61 e2       	ldi	r22, 0x21	; 33
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	81 e0       	ldi	r24, 0x01	; 1
		mTimer(1000);
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	13 df       	rcall	.-474    	; 0x1b2 <moveMotor>
 38c:	88 ee       	ldi	r24, 0xE8	; 232
 38e:	93 e0       	ldi	r25, 0x03	; 3
		PORTL =0b00110000;
 390:	eb de       	rcall	.-554    	; 0x168 <mTimer>
		moveMotor(1,100);
 392:	18 83       	st	Y, r17
 394:	64 e6       	ldi	r22, 0x64	; 100
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0a df       	rcall	.-492    	; 0x1b2 <moveMotor>
		mTimer(1000);
 39e:	88 ee       	ldi	r24, 0xE8	; 232
 3a0:	93 e0       	ldi	r25, 0x03	; 3
 3a2:	e2 de       	rcall	.-572    	; 0x168 <mTimer>
 3a4:	c6 cf       	rjmp	.-116    	; 0x332 <main+0x40>

000003a6 <_exit>:
 3a6:	f8 94       	cli

000003a8 <__stop_program>:
 3a8:	ff cf       	rjmp	.-2      	; 0x3a8 <__stop_program>
