
Testing Stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000140  00800200  00000384  000003f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000384  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000568  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010c4  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d97  00000000  00000000  000016dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b2  00000000  00000000  00002473  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00002a28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ef  00000000  00000000  00002b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000282  00000000  00000000  00003107  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00003389  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e8       	ldi	r30, 0x84	; 132
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 34       	cpi	r26, 0x40	; 64
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a0 e4       	ldi	r26, 0x40	; 64
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 34       	cpi	r26, 0x40	; 64
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	2f c1       	rjmp	.+606    	; 0x380 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
	0b00101000,  // Step 2
	0b00000101   // Step 3
};

int main(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	1f 92       	push	r1
 12a:	1f 92       	push	r1
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62

	int stepNum;
	timer8MHz();//setup the chip clock to 8 MHz
 130:	fd d0       	rcall	.+506    	; 0x32c <timer8MHz>
	DDRA = 0xFF;//Stepper Output
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	81 b9       	out	0x01, r24	; 1
	DDRL = 0xFF;//debug lights
 136:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	
	stepNum = homeMotor();
 13a:	2c d0       	rcall	.+88     	; 0x194 <homeMotor>
 13c:	9a 83       	std	Y+2, r25	; 0x02
 13e:	89 83       	std	Y+1, r24	; 0x01
	PORTA = motorSteps[stepNum];
 140:	fc 01       	movw	r30, r24
 142:	e4 5c       	subi	r30, 0xC4	; 196
 144:	fc 4f       	sbci	r31, 0xFC	; 252
 146:	80 81       	ld	r24, Z
 148:	82 b9       	out	0x02, r24	; 2
	
	while(1){
		moveStepper(50,&stepNum);
 14a:	be 01       	movw	r22, r28
 14c:	6f 5f       	subi	r22, 0xFF	; 255
 14e:	7f 4f       	sbci	r23, 0xFF	; 255
 150:	82 e3       	ldi	r24, 0x32	; 50
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	42 d0       	rcall	.+132    	; 0x1da <moveStepper>
		mTimer(1000);
 156:	88 ee       	ldi	r24, 0xE8	; 232
 158:	93 e0       	ldi	r25, 0x03	; 3
 15a:	f2 d0       	rcall	.+484    	; 0x340 <mTimer>
 15c:	be 01       	movw	r22, r28
		moveStepper(100,&stepNum);
 15e:	6f 5f       	subi	r22, 0xFF	; 255
 160:	7f 4f       	sbci	r23, 0xFF	; 255
 162:	84 e6       	ldi	r24, 0x64	; 100
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	39 d0       	rcall	.+114    	; 0x1da <moveStepper>
		mTimer(1000);
 168:	88 ee       	ldi	r24, 0xE8	; 232
 16a:	93 e0       	ldi	r25, 0x03	; 3
 16c:	e9 d0       	rcall	.+466    	; 0x340 <mTimer>
		moveStepper(-50,&stepNum);
 16e:	be 01       	movw	r22, r28
 170:	6f 5f       	subi	r22, 0xFF	; 255
 172:	7f 4f       	sbci	r23, 0xFF	; 255
 174:	8e ec       	ldi	r24, 0xCE	; 206
 176:	9f ef       	ldi	r25, 0xFF	; 255
 178:	30 d0       	rcall	.+96     	; 0x1da <moveStepper>
		mTimer(1000);
 17a:	88 ee       	ldi	r24, 0xE8	; 232
 17c:	93 e0       	ldi	r25, 0x03	; 3
 17e:	e0 d0       	rcall	.+448    	; 0x340 <mTimer>
		moveStepper(-100,&stepNum);
 180:	be 01       	movw	r22, r28
 182:	6f 5f       	subi	r22, 0xFF	; 255
 184:	7f 4f       	sbci	r23, 0xFF	; 255
 186:	8c e9       	ldi	r24, 0x9C	; 156
 188:	9f ef       	ldi	r25, 0xFF	; 255
 18a:	27 d0       	rcall	.+78     	; 0x1da <moveStepper>
		mTimer(1000);
 18c:	88 ee       	ldi	r24, 0xE8	; 232
 18e:	93 e0       	ldi	r25, 0x03	; 3
 190:	d7 d0       	rcall	.+430    	; 0x340 <mTimer>
 192:	db cf       	rjmp	.-74     	; 0x14a <main+0x26>

00000194 <homeMotor>:

int delayTable90[] = {46,19,15,12,11,10,9,9,8,8,7,7,7,7,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,8,8,9,9,10,11,13,15,19,46}; // Delay table for 90 degree turns
int delayTable180[] = {46,19,15,12,11,10,9,9,8,8,7,7,7,7,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,8,8,9,9,10,11,13,15,19,46};

// Function to home the motor
int homeMotor(void) {
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
	int stepIdx = 0;
	while (1) {
		// Check the hall effect sensor
		if (!(PIND & (1 << HALL_SENSOR_PIN))) {
 198:	4f 99       	sbic	0x09, 7	; 9
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <homeMotor+0xe>
int delayTable90[] = {46,19,15,12,11,10,9,9,8,8,7,7,7,7,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,8,8,9,9,10,11,13,15,19,46}; // Delay table for 90 degree turns
int delayTable180[] = {46,19,15,12,11,10,9,9,8,8,7,7,7,7,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,8,8,9,9,10,11,13,15,19,46};

// Function to home the motor
int homeMotor(void) {
	int stepIdx = 0;
 19c:	c0 e0       	ldi	r28, 0x00	; 0
 19e:	d0 e0       	ldi	r29, 0x00	; 0
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <homeMotor+0x3c>
	while (1) {
		// Check the hall effect sensor
		if (!(PIND & (1 << HALL_SENSOR_PIN))) {
 1a2:	c0 e0       	ldi	r28, 0x00	; 0
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
			PORTA = 0x00; // Stop the motor
			return(stepIdx);
			} else {
			// Move one step
			stepIdx = (stepIdx + 1) % 4; // Cycle through steps
 1a6:	ce 01       	movw	r24, r28
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	83 70       	andi	r24, 0x03	; 3
 1ac:	90 78       	andi	r25, 0x80	; 128
 1ae:	99 23       	and	r25, r25
 1b0:	24 f4       	brge	.+8      	; 0x1ba <homeMotor+0x26>
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	8c 6f       	ori	r24, 0xFC	; 252
 1b6:	9f 6f       	ori	r25, 0xFF	; 255
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	ec 01       	movw	r28, r24
			PORTA = motorSteps[stepIdx];
 1bc:	fc 01       	movw	r30, r24
 1be:	e4 5c       	subi	r30, 0xC4	; 196
 1c0:	fc 4f       	sbci	r31, 0xFC	; 252
 1c2:	80 81       	ld	r24, Z
 1c4:	82 b9       	out	0x02, r24	; 2
			mTimer(20); // Delay for motor movement
 1c6:	84 e1       	ldi	r24, 0x14	; 20
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	ba d0       	rcall	.+372    	; 0x340 <mTimer>
// Function to home the motor
int homeMotor(void) {
	int stepIdx = 0;
	while (1) {
		// Check the hall effect sensor
		if (!(PIND & (1 << HALL_SENSOR_PIN))) {
 1cc:	4f 99       	sbic	0x09, 7	; 9
 1ce:	eb cf       	rjmp	.-42     	; 0x1a6 <homeMotor+0x12>
			PORTA = 0x00; // Stop the motor
 1d0:	12 b8       	out	0x02, r1	; 2
			stepIdx = (stepIdx + 1) % 4; // Cycle through steps
			PORTA = motorSteps[stepIdx];
			mTimer(20); // Delay for motor movement
		}
	}
}
 1d2:	ce 01       	movw	r24, r28
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <moveStepper>:

// Function to move the stepper motor with variable delay based on the lookup table
void moveStepper(int moveNum, int* stepNumInput){
 1da:	6f 92       	push	r6
 1dc:	7f 92       	push	r7
 1de:	8f 92       	push	r8
 1e0:	9f 92       	push	r9
 1e2:	af 92       	push	r10
 1e4:	bf 92       	push	r11
 1e6:	cf 92       	push	r12
 1e8:	df 92       	push	r13
 1ea:	ef 92       	push	r14
 1ec:	ff 92       	push	r15
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	7c 01       	movw	r14, r24
 1f8:	3b 01       	movw	r6, r22
	int stepNum = *stepNumInput;
 1fa:	db 01       	movw	r26, r22
 1fc:	cd 91       	ld	r28, X+
 1fe:	dc 91       	ld	r29, X
	int *ptr;
	if(moveNum >= 0){
 200:	99 23       	and	r25, r25
 202:	54 f4       	brge	.+20     	; 0x218 <moveStepper+0x3e>
		static int forSteps[] = {0,1,2,3};
		ptr = forSteps;
		} else {
		static int backSteps[] = {2,3,0,1};
		ptr = backSteps;
		moveNum = -moveNum;
 204:	f1 94       	neg	r15
 206:	e1 94       	neg	r14
 208:	f1 08       	sbc	r15, r1
	if(moveNum >= 0){
		static int forSteps[] = {0,1,2,3};
		ptr = forSteps;
		} else {
		static int backSteps[] = {2,3,0,1};
		ptr = backSteps;
 20a:	0f 2e       	mov	r0, r31
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	cf 2e       	mov	r12, r31
 210:	f2 e0       	ldi	r31, 0x02	; 2
 212:	df 2e       	mov	r13, r31
 214:	f0 2d       	mov	r31, r0
 216:	06 c0       	rjmp	.+12     	; 0x224 <moveStepper+0x4a>
void moveStepper(int moveNum, int* stepNumInput){
	int stepNum = *stepNumInput;
	int *ptr;
	if(moveNum >= 0){
		static int forSteps[] = {0,1,2,3};
		ptr = forSteps;
 218:	0f 2e       	mov	r0, r31
 21a:	f8 e0       	ldi	r31, 0x08	; 8
 21c:	cf 2e       	mov	r12, r31
 21e:	f2 e0       	ldi	r31, 0x02	; 2
 220:	df 2e       	mov	r13, r31
 222:	f0 2d       	mov	r31, r0
		} else {
		static int backSteps[] = {2,3,0,1};
		ptr = backSteps;
		moveNum = -moveNum;
	}
	for(int i=0; i < moveNum; i++){
 224:	1e 14       	cp	r1, r14
 226:	1f 04       	cpc	r1, r15
 228:	0c f0       	brlt	.+2      	; 0x22c <moveStepper+0x52>
 22a:	6e c0       	rjmp	.+220    	; 0x308 <moveStepper+0x12e>
 22c:	0f 2e       	mov	r0, r31
 22e:	f8 ed       	ldi	r31, 0xD8	; 216
 230:	8f 2e       	mov	r8, r31
 232:	f2 e0       	ldi	r31, 0x02	; 2
 234:	9f 2e       	mov	r9, r31
 236:	f0 2d       	mov	r31, r0
 238:	00 e1       	ldi	r16, 0x10	; 16
 23a:	12 e0       	ldi	r17, 0x02	; 2
 23c:	c7 01       	movw	r24, r14
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	fc 01       	movw	r30, r24
 244:	e8 52       	subi	r30, 0x28	; 40
 246:	fd 4f       	sbci	r31, 0xFD	; 253
 248:	5f 01       	movw	r10, r30
		switch(stepNum){
 24a:	c1 30       	cpi	r28, 0x01	; 1
 24c:	d1 05       	cpc	r29, r1
 24e:	19 f1       	breq	.+70     	; 0x296 <moveStepper+0xbc>
 250:	1c f4       	brge	.+6      	; 0x258 <moveStepper+0x7e>
 252:	20 97       	sbiw	r28, 0x00	; 0
 254:	91 f0       	breq	.+36     	; 0x27a <moveStepper+0xa0>
 256:	3a c0       	rjmp	.+116    	; 0x2cc <moveStepper+0xf2>
 258:	c2 30       	cpi	r28, 0x02	; 2
 25a:	d1 05       	cpc	r29, r1
 25c:	51 f1       	breq	.+84     	; 0x2b2 <moveStepper+0xd8>
 25e:	c3 30       	cpi	r28, 0x03	; 3
 260:	d1 05       	cpc	r29, r1
 262:	a1 f5       	brne	.+104    	; 0x2cc <moveStepper+0xf2>
			case(3):
			PORTA = motorSteps[*ptr];
 264:	d6 01       	movw	r26, r12
 266:	ed 91       	ld	r30, X+
 268:	fc 91       	ld	r31, X
 26a:	11 97       	sbiw	r26, 0x01	; 1
 26c:	e4 5c       	subi	r30, 0xC4	; 196
 26e:	fc 4f       	sbci	r31, 0xFC	; 252
 270:	80 81       	ld	r24, Z
 272:	82 b9       	out	0x02, r24	; 2
			stepNum = *ptr;
 274:	cd 91       	ld	r28, X+
 276:	dc 91       	ld	r29, X
			break;
 278:	29 c0       	rjmp	.+82     	; 0x2cc <moveStepper+0xf2>
			case(0):
			PORTA = motorSteps[*(ptr+1)];
 27a:	d6 01       	movw	r26, r12
 27c:	12 96       	adiw	r26, 0x02	; 2
 27e:	ed 91       	ld	r30, X+
 280:	fc 91       	ld	r31, X
 282:	13 97       	sbiw	r26, 0x03	; 3
 284:	e4 5c       	subi	r30, 0xC4	; 196
 286:	fc 4f       	sbci	r31, 0xFC	; 252
 288:	80 81       	ld	r24, Z
 28a:	82 b9       	out	0x02, r24	; 2
			stepNum = *(ptr+1);
 28c:	12 96       	adiw	r26, 0x02	; 2
 28e:	cd 91       	ld	r28, X+
 290:	dc 91       	ld	r29, X
 292:	13 97       	sbiw	r26, 0x03	; 3
			break;
 294:	1b c0       	rjmp	.+54     	; 0x2cc <moveStepper+0xf2>
			case(1):
			PORTA = motorSteps[*(ptr+2)];
 296:	d6 01       	movw	r26, r12
 298:	14 96       	adiw	r26, 0x04	; 4
 29a:	ed 91       	ld	r30, X+
 29c:	fc 91       	ld	r31, X
 29e:	15 97       	sbiw	r26, 0x05	; 5
 2a0:	e4 5c       	subi	r30, 0xC4	; 196
 2a2:	fc 4f       	sbci	r31, 0xFC	; 252
 2a4:	80 81       	ld	r24, Z
 2a6:	82 b9       	out	0x02, r24	; 2
			stepNum = *(ptr+2);
 2a8:	14 96       	adiw	r26, 0x04	; 4
 2aa:	cd 91       	ld	r28, X+
 2ac:	dc 91       	ld	r29, X
 2ae:	15 97       	sbiw	r26, 0x05	; 5
			break;
 2b0:	0d c0       	rjmp	.+26     	; 0x2cc <moveStepper+0xf2>
			case(2):
			PORTA = motorSteps[*(ptr+3)];
 2b2:	d6 01       	movw	r26, r12
 2b4:	16 96       	adiw	r26, 0x06	; 6
 2b6:	ed 91       	ld	r30, X+
 2b8:	fc 91       	ld	r31, X
 2ba:	17 97       	sbiw	r26, 0x07	; 7
 2bc:	e4 5c       	subi	r30, 0xC4	; 196
 2be:	fc 4f       	sbci	r31, 0xFC	; 252
 2c0:	80 81       	ld	r24, Z
 2c2:	82 b9       	out	0x02, r24	; 2
			stepNum = *(ptr+3);
 2c4:	16 96       	adiw	r26, 0x06	; 6
 2c6:	cd 91       	ld	r28, X+
 2c8:	dc 91       	ld	r29, X
 2ca:	17 97       	sbiw	r26, 0x07	; 7
			break;
			default:
			break;
		}
		if (moveNum == 50){
 2cc:	b2 e3       	ldi	r27, 0x32	; 50
 2ce:	eb 16       	cp	r14, r27
 2d0:	f1 04       	cpc	r15, r1
 2d2:	29 f4       	brne	.+10     	; 0x2de <moveStepper+0x104>
			mTimer(delayTable90[i]);
 2d4:	f4 01       	movw	r30, r8
 2d6:	80 81       	ld	r24, Z
 2d8:	91 81       	ldd	r25, Z+1	; 0x01
 2da:	32 d0       	rcall	.+100    	; 0x340 <mTimer>
 2dc:	0c c0       	rjmp	.+24     	; 0x2f6 <moveStepper+0x11c>
			} else if (moveNum == 100){
 2de:	f4 e6       	ldi	r31, 0x64	; 100
 2e0:	ef 16       	cp	r14, r31
 2e2:	f1 04       	cpc	r15, r1
 2e4:	29 f4       	brne	.+10     	; 0x2f0 <moveStepper+0x116>
			mTimer(delayTable180[i]);
 2e6:	d8 01       	movw	r26, r16
 2e8:	8d 91       	ld	r24, X+
 2ea:	9c 91       	ld	r25, X
 2ec:	29 d0       	rcall	.+82     	; 0x340 <mTimer>
 2ee:	03 c0       	rjmp	.+6      	; 0x2f6 <moveStepper+0x11c>
			} else {
			mTimer(20);
 2f0:	84 e1       	ldi	r24, 0x14	; 20
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	25 d0       	rcall	.+74     	; 0x340 <mTimer>
 2f6:	b2 e0       	ldi	r27, 0x02	; 2
 2f8:	8b 0e       	add	r8, r27
 2fa:	91 1c       	adc	r9, r1
 2fc:	0e 5f       	subi	r16, 0xFE	; 254
 2fe:	1f 4f       	sbci	r17, 0xFF	; 255
		} else {
		static int backSteps[] = {2,3,0,1};
		ptr = backSteps;
		moveNum = -moveNum;
	}
	for(int i=0; i < moveNum; i++){
 300:	8a 14       	cp	r8, r10
 302:	9b 04       	cpc	r9, r11
 304:	09 f0       	breq	.+2      	; 0x308 <moveStepper+0x12e>
 306:	a1 cf       	rjmp	.-190    	; 0x24a <moveStepper+0x70>
			mTimer(delayTable180[i]);
			} else {
			mTimer(20);
		}
	}
	*stepNumInput = stepNum;
 308:	f3 01       	movw	r30, r6
 30a:	d1 83       	std	Z+1, r29	; 0x01
 30c:	c0 83       	st	Z, r28
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	ff 90       	pop	r15
 318:	ef 90       	pop	r14
 31a:	df 90       	pop	r13
 31c:	cf 90       	pop	r12
 31e:	bf 90       	pop	r11
 320:	af 90       	pop	r10
 322:	9f 90       	pop	r9
 324:	8f 90       	pop	r8
 326:	7f 90       	pop	r7
 328:	6f 90       	pop	r6
 32a:	08 95       	ret

0000032c <timer8MHz>:

//This file contains the timer subroutines from lab 2. They have been repurposed for use in future labs

void timer8MHz(){ //sets the timer to 8MHz

    CLKPR = 0x80; /* This will be discussed later. */
 32c:	e1 e6       	ldi	r30, 0x61	; 97
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 e8       	ldi	r24, 0x80	; 128
 332:	80 83       	st	Z, r24
    CLKPR = 0x01; /* Required to set CPU Clock to 8MHz */
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	80 83       	st	Z, r24
    
    /* Timer instructions */
    /* Sets timer 1 to run at 1MHz, note: CPU clock is set to 8MHz.
       Disable all functions and use as pure timer */
    
    TCCR1B = _BV(CS11); /* _BV sets the bit to logic 1 */
 338:	82 e0       	ldi	r24, 0x02	; 2
 33a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 33e:	08 95       	ret

00000340 <mTimer>:
    /* CS means clock select, has the pre-scaler set to 8 */

} /* close timer8MHz */

/* This is the driver for the timer. */
void mTimer(int count){
 340:	ac 01       	movw	r20, r24
    int i; /* keeps track of loop number */

    i = 0; /* initializes loop counter */

    /* Set the Waveform Generation mode bit description to Clear Timer on Compare Match mode (CTC) only */
    TCCR1B |= _BV(WGM12); /* set WGM bits to 0100, see page 145 */
 342:	e1 e8       	ldi	r30, 0x81	; 129
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	90 81       	ld	r25, Z
 348:	98 60       	ori	r25, 0x08	; 8
 34a:	90 83       	st	Z, r25
    /* Note WGM is spread over two registers. */

    OCR1A = 0x03E8; /* Set Output Compare Register for 1000 cycles = 1ms */
 34c:	88 ee       	ldi	r24, 0xE8	; 232
 34e:	93 e0       	ldi	r25, 0x03	; 3
 350:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 354:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
    TCNT1 = 0x0000; /* Sets initial value of Timer Counter to 0x0000 */
 358:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 35c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
 360:	b1 9a       	sbi	0x16, 1	; 22
    The system clock has been pre-scaled by 2. This means it's running at half speed, 8MHz. See Technical manual for
    ATmega2560 (i.e. full manual) and look up "16-bit Timer/Counter1." */

    int i; /* keeps track of loop number */

    i = 0; /* initializes loop counter */
 362:	20 e0       	ldi	r18, 0x00	; 0
 364:	30 e0       	ldi	r19, 0x00	; 0

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
    /* If the following statement is confusing, please ask for clarification! */

    /* Poll the timer to determine when the timer has reached 0x03E8 */
    while(i<count){
 366:	05 c0       	rjmp	.+10     	; 0x372 <mTimer+0x32>
        if((TIFR1 & 0x02) == 0x02){
 368:	b1 9b       	sbis	0x16, 1	; 22
 36a:	fe cf       	rjmp	.-4      	; 0x368 <mTimer+0x28>
            TIFR1 |= _BV(OCF1A); /* clear interrupt flag by writing a ONE to the bit */
 36c:	b1 9a       	sbi	0x16, 1	; 22
            i++; /* increment loop number */
 36e:	2f 5f       	subi	r18, 0xFF	; 255
 370:	3f 4f       	sbci	r19, 0xFF	; 255

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
    /* If the following statement is confusing, please ask for clarification! */

    /* Poll the timer to determine when the timer has reached 0x03E8 */
    while(i<count){
 372:	24 17       	cp	r18, r20
 374:	35 07       	cpc	r19, r21
 376:	1c f4       	brge	.+6      	; 0x37e <mTimer+0x3e>
        if((TIFR1 & 0x02) == 0x02){
 378:	b1 9b       	sbis	0x16, 1	; 22
 37a:	f6 cf       	rjmp	.-20     	; 0x368 <mTimer+0x28>
 37c:	f7 cf       	rjmp	.-18     	; 0x36c <mTimer+0x2c>
 37e:	08 95       	ret

00000380 <_exit>:
 380:	f8 94       	cli

00000382 <__stop_program>:
 382:	ff cf       	rjmp	.-2      	; 0x382 <__stop_program>
