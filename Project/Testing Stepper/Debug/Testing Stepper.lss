
Testing Stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  00000712  000007a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000712  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012e  00800214  00800214  000007ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001156  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000de5  00000000  00000000  00001a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000614  00000000  00000000  000027e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00002dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068f  00000000  00000000  00002f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000045f  00000000  00000000  000035ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00003a4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e1       	ldi	r30, 0x12	; 18
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 31       	cpi	r26, 0x14	; 20
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a4 e1       	ldi	r26, 0x14	; 20
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 34       	cpi	r26, 0x42	; 66
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	f6 c2       	rjmp	.+1516   	; 0x70e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
	0b00101000,  // Step 2
	0b00000101   // Step 3
};

int main(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	1f 92       	push	r1
 12a:	1f 92       	push	r1
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62

	int stepNum;
	timer8MHz();//setup the chip clock to 8 MHz
 130:	7b d1       	rcall	.+758    	; 0x428 <timer8MHz>
	DDRA = 0xFF;//Stepper Output
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	81 b9       	out	0x01, r24	; 1
	DDRL = 0xFF;//debug lights
 136:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	
	precomputeDelayTables();
	
	stepNum = homeMotor();
 13a:	85 d0       	rcall	.+266    	; 0x246 <precomputeDelayTables>
 13c:	9b d0       	rcall	.+310    	; 0x274 <homeMotor>
 13e:	9a 83       	std	Y+2, r25	; 0x02
 140:	89 83       	std	Y+1, r24	; 0x01
	PORTA = motorSteps[stepNum];
 142:	fc 01       	movw	r30, r24
 144:	e0 5f       	subi	r30, 0xF0	; 240
 146:	fd 4f       	sbci	r31, 0xFD	; 253
 148:	80 81       	ld	r24, Z
 14a:	82 b9       	out	0x02, r24	; 2
	
	while(1){
		moveStepper(100,&stepNum);
 14c:	be 01       	movw	r22, r28
 14e:	6f 5f       	subi	r22, 0xFF	; 255
 150:	7f 4f       	sbci	r23, 0xFF	; 255
 152:	84 e6       	ldi	r24, 0x64	; 100
 154:	90 e0       	ldi	r25, 0x00	; 0
		mTimer(1000);
 156:	bf d0       	rcall	.+382    	; 0x2d6 <moveStepper>
 158:	88 ee       	ldi	r24, 0xE8	; 232
 15a:	93 e0       	ldi	r25, 0x03	; 3
 15c:	6f d1       	rcall	.+734    	; 0x43c <mTimer>
 15e:	f6 cf       	rjmp	.-20     	; 0x14c <main+0x28>

00000160 <initializeDelayTable>:
};

int delayTablesInitialized = 0; // Flag to check if tables have been computed

// Function to initialize the delay table with the trapezoidal profile
void initializeDelayTable(int *delayTable, int maxSteps) {
 160:	7f 92       	push	r7
 162:	8f 92       	push	r8
 164:	9f 92       	push	r9
 166:	af 92       	push	r10
 168:	bf 92       	push	r11
 16a:	cf 92       	push	r12
 16c:	df 92       	push	r13
 16e:	ef 92       	push	r14
 170:	ff 92       	push	r15
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	a8 2e       	mov	r10, r24
 17c:	b9 2e       	mov	r11, r25
 17e:	7b 01       	movw	r14, r22
	int accelSteps = maxSteps * 0.1;               // Number of steps for acceleration
 180:	07 2e       	mov	r0, r23
 182:	00 0c       	add	r0, r0
 184:	88 0b       	sbc	r24, r24
 186:	99 0b       	sbc	r25, r25
 188:	ac d1       	rcall	.+856    	; 0x4e2 <__floatsisf>
 18a:	2d ec       	ldi	r18, 0xCD	; 205
 18c:	3c ec       	ldi	r19, 0xCC	; 204
 18e:	4c ec       	ldi	r20, 0xCC	; 204
 190:	5d e3       	ldi	r21, 0x3D	; 61
 192:	0b d2       	rcall	.+1046   	; 0x5aa <__mulsf3>
 194:	73 d1       	rcall	.+742    	; 0x47c <__fixsfsi>
 196:	8b 01       	movw	r16, r22
	int decelSteps = maxSteps * 0.1;               // Number of steps for deceleration
	int constSteps = maxSteps - accelSteps - decelSteps; // Remaining steps at constant speed
 198:	67 01       	movw	r12, r14
 19a:	c6 1a       	sub	r12, r22
 19c:	d7 0a       	sbc	r13, r23
 19e:	96 01       	movw	r18, r12
 1a0:	26 1b       	sub	r18, r22
 1a2:	37 0b       	sbc	r19, r23
	int minDelay = 5;                           // Minimum delay (top speed) in ms
	int maxDelay = 10;                          // Maximum delay (start and end) in ms

	for (int i = 0; i < maxSteps; i++) {
 1a4:	1e 14       	cp	r1, r14
 1a6:	1f 04       	cpc	r1, r15
 1a8:	0c f0       	brlt	.+2      	; 0x1ac <initializeDelayTable+0x4c>
 1aa:	3f c0       	rjmp	.+126    	; 0x22a <initializeDelayTable+0xca>
 1ac:	ca 2d       	mov	r28, r10
 1ae:	db 2d       	mov	r29, r11
 1b0:	4b ef       	ldi	r20, 0xFB	; 251
 1b2:	46 03       	mulsu	r20, r22
 1b4:	40 01       	movw	r8, r0
 1b6:	47 9f       	mul	r20, r23
 1b8:	90 0c       	add	r9, r0
 1ba:	11 24       	eor	r1, r1
 1bc:	c9 01       	movw	r24, r18
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	28 0f       	add	r18, r24
 1c8:	39 1f       	adc	r19, r25
 1ca:	82 1a       	sub	r8, r18
 1cc:	93 0a       	sbc	r9, r19
 1ce:	e0 e0       	ldi	r30, 0x00	; 0
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	30 e0       	ldi	r19, 0x00	; 0
		if (i < accelSteps) {
			// Acceleration phase: delay decreases
			currentDelay = maxDelay - (i * (maxDelay - minDelay) / accelSteps);
			} else if (i < accelSteps + constSteps) {
			// Constant speed phase: delay is constant
			currentDelay = minDelay;
 1d6:	0f 2e       	mov	r0, r31
 1d8:	f5 e0       	ldi	r31, 0x05	; 5
 1da:	7f 2e       	mov	r7, r31
 1dc:	f0 2d       	mov	r31, r0
 1de:	40 e0       	ldi	r20, 0x00	; 0

	for (int i = 0; i < maxSteps; i++) {
		int currentDelay;
		if (i < accelSteps) {
			// Acceleration phase: delay decreases
			currentDelay = maxDelay - (i * (maxDelay - minDelay) / accelSteps);
 1e0:	0f 2e       	mov	r0, r31
 1e2:	fa e0       	ldi	r31, 0x0A	; 10
 1e4:	af 2e       	mov	r10, r31
 1e6:	b1 2c       	mov	r11, r1
 1e8:	f0 2d       	mov	r31, r0
	int minDelay = 5;                           // Minimum delay (top speed) in ms
	int maxDelay = 10;                          // Maximum delay (start and end) in ms

	for (int i = 0; i < maxSteps; i++) {
		int currentDelay;
		if (i < accelSteps) {
 1ea:	20 17       	cp	r18, r16
 1ec:	31 07       	cpc	r19, r17
			// Acceleration phase: delay decreases
			currentDelay = maxDelay - (i * (maxDelay - minDelay) / accelSteps);
 1ee:	44 f4       	brge	.+16     	; 0x200 <initializeDelayTable+0xa0>
 1f0:	cf 01       	movw	r24, r30
 1f2:	b8 01       	movw	r22, r16
 1f4:	65 d2       	rcall	.+1226   	; 0x6c0 <__divmodhi4>
 1f6:	c5 01       	movw	r24, r10
 1f8:	86 1b       	sub	r24, r22
 1fa:	97 0b       	sbc	r25, r23
 1fc:	bc 01       	movw	r22, r24
 1fe:	0d c0       	rjmp	.+26     	; 0x21a <initializeDelayTable+0xba>
			} else if (i < accelSteps + constSteps) {
 200:	2c 15       	cp	r18, r12
 202:	3d 05       	cpc	r19, r13
 204:	44 f0       	brlt	.+16     	; 0x216 <initializeDelayTable+0xb6>
			// Constant speed phase: delay is constant
			currentDelay = minDelay;
			} else {
			// Deceleration phase: delay increases
			currentDelay = minDelay + ((i - accelSteps - constSteps) * (maxDelay - minDelay) / decelSteps);
 206:	cf 01       	movw	r24, r30
 208:	88 0d       	add	r24, r8
 20a:	99 1d       	adc	r25, r9
 20c:	b8 01       	movw	r22, r16
 20e:	58 d2       	rcall	.+1200   	; 0x6c0 <__divmodhi4>
 210:	6b 5f       	subi	r22, 0xFB	; 251
 212:	7f 4f       	sbci	r23, 0xFF	; 255
 214:	02 c0       	rjmp	.+4      	; 0x21a <initializeDelayTable+0xba>
		if (i < accelSteps) {
			// Acceleration phase: delay decreases
			currentDelay = maxDelay - (i * (maxDelay - minDelay) / accelSteps);
			} else if (i < accelSteps + constSteps) {
			// Constant speed phase: delay is constant
			currentDelay = minDelay;
 216:	67 2d       	mov	r22, r7
 218:	74 2f       	mov	r23, r20
			} else {
			// Deceleration phase: delay increases
			currentDelay = minDelay + ((i - accelSteps - constSteps) * (maxDelay - minDelay) / decelSteps);
		}
		delayTable[i] = currentDelay;
 21a:	69 93       	st	Y+, r22
 21c:	79 93       	st	Y+, r23
	int decelSteps = maxSteps * 0.1;               // Number of steps for deceleration
	int constSteps = maxSteps - accelSteps - decelSteps; // Remaining steps at constant speed
	int minDelay = 5;                           // Minimum delay (top speed) in ms
	int maxDelay = 10;                          // Maximum delay (start and end) in ms

	for (int i = 0; i < maxSteps; i++) {
 21e:	2f 5f       	subi	r18, 0xFF	; 255
 220:	3f 4f       	sbci	r19, 0xFF	; 255
 222:	35 96       	adiw	r30, 0x05	; 5
 224:	e2 16       	cp	r14, r18
 226:	f3 06       	cpc	r15, r19
 228:	01 f7       	brne	.-64     	; 0x1ea <initializeDelayTable+0x8a>
			// Deceleration phase: delay increases
			currentDelay = minDelay + ((i - accelSteps - constSteps) * (maxDelay - minDelay) / decelSteps);
		}
		delayTable[i] = currentDelay;
	}
}
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	1f 91       	pop	r17
 230:	0f 91       	pop	r16
 232:	ff 90       	pop	r15
 234:	ef 90       	pop	r14
 236:	df 90       	pop	r13
 238:	cf 90       	pop	r12
 23a:	bf 90       	pop	r11
 23c:	af 90       	pop	r10
 23e:	9f 90       	pop	r9
 240:	8f 90       	pop	r8
 242:	7f 90       	pop	r7
 244:	08 95       	ret

00000246 <precomputeDelayTables>:

// Function to precompute the delay tables
void precomputeDelayTables() {
	if (delayTablesInitialized) {
 246:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
 24a:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__data_end+0x1>
 24e:	89 2b       	or	r24, r25
 250:	81 f4       	brne	.+32     	; 0x272 <precomputeDelayTables+0x2c>
		return; // Skip if already initialized
	}

	// Initialize delay tables for 90 and 180 degree moves
	initializeDelayTable(delayTable90, MAX_STEPS_90);
 252:	62 e3       	ldi	r22, 0x32	; 50
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	8e ed       	ldi	r24, 0xDE	; 222
 258:	92 e0       	ldi	r25, 0x02	; 2
 25a:	82 df       	rcall	.-252    	; 0x160 <initializeDelayTable>
	initializeDelayTable(delayTable180, MAX_STEPS_180);
 25c:	64 e6       	ldi	r22, 0x64	; 100
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	86 e1       	ldi	r24, 0x16	; 22
 262:	92 e0       	ldi	r25, 0x02	; 2
 264:	7d df       	rcall	.-262    	; 0x160 <initializeDelayTable>

	delayTablesInitialized = 1; // Mark as initialized
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <__data_end+0x1>
 26e:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
 272:	08 95       	ret

00000274 <homeMotor>:
}

// Function to home the motor
int homeMotor(void) {
 274:	ff 92       	push	r15
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
	int stepIdx = 0;
	while (1) {
		// Check the hall effect sensor
		if (!(PIND & (1 << HALL_SENSOR_PIN))) {
 27e:	4f 99       	sbic	0x09, 7	; 9
 280:	03 c0       	rjmp	.+6      	; 0x288 <homeMotor+0x14>
	delayTablesInitialized = 1; // Mark as initialized
}

// Function to home the motor
int homeMotor(void) {
	int stepIdx = 0;
 282:	c0 e0       	ldi	r28, 0x00	; 0
 284:	d0 e0       	ldi	r29, 0x00	; 0
 286:	1f c0       	rjmp	.+62     	; 0x2c6 <homeMotor+0x52>
	while (1) {
		// Check the hall effect sensor
		if (!(PIND & (1 << HALL_SENSOR_PIN))) {
 288:	c0 e0       	ldi	r28, 0x00	; 0
 28a:	d0 e0       	ldi	r29, 0x00	; 0
			PORTA = 0x00; // Stop the motor
			return(stepIdx);
			} else {
			// Move one step
			PORTL = 0b11000000;
 28c:	0b e0       	ldi	r16, 0x0B	; 11
 28e:	11 e0       	ldi	r17, 0x01	; 1
 290:	0f 2e       	mov	r0, r31
 292:	f0 ec       	ldi	r31, 0xC0	; 192
 294:	ff 2e       	mov	r15, r31
 296:	f0 2d       	mov	r31, r0
 298:	f8 01       	movw	r30, r16
 29a:	f0 82       	st	Z, r15
			stepIdx = (stepIdx + 1) % 4; // Cycle through steps
 29c:	ce 01       	movw	r24, r28
 29e:	01 96       	adiw	r24, 0x01	; 1
 2a0:	83 70       	andi	r24, 0x03	; 3
 2a2:	90 78       	andi	r25, 0x80	; 128
 2a4:	99 23       	and	r25, r25
 2a6:	24 f4       	brge	.+8      	; 0x2b0 <homeMotor+0x3c>
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	8c 6f       	ori	r24, 0xFC	; 252
 2ac:	9f 6f       	ori	r25, 0xFF	; 255
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	ec 01       	movw	r28, r24
			PORTA = motorSteps[stepIdx];
 2b2:	fc 01       	movw	r30, r24
 2b4:	e0 5f       	subi	r30, 0xF0	; 240
 2b6:	fd 4f       	sbci	r31, 0xFD	; 253
 2b8:	80 81       	ld	r24, Z
 2ba:	82 b9       	out	0x02, r24	; 2
			mTimer(20); // Delay for motor movement
 2bc:	84 e1       	ldi	r24, 0x14	; 20
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	bd d0       	rcall	.+378    	; 0x43c <mTimer>
// Function to home the motor
int homeMotor(void) {
	int stepIdx = 0;
	while (1) {
		// Check the hall effect sensor
		if (!(PIND & (1 << HALL_SENSOR_PIN))) {
 2c2:	4f 99       	sbic	0x09, 7	; 9
 2c4:	e9 cf       	rjmp	.-46     	; 0x298 <homeMotor+0x24>
			PORTA = 0x00; // Stop the motor
 2c6:	12 b8       	out	0x02, r1	; 2
			stepIdx = (stepIdx + 1) % 4; // Cycle through steps
			PORTA = motorSteps[stepIdx];
			mTimer(20); // Delay for motor movement
		}
	}
}
 2c8:	ce 01       	movw	r24, r28
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	1f 91       	pop	r17
 2d0:	0f 91       	pop	r16
 2d2:	ff 90       	pop	r15
 2d4:	08 95       	ret

000002d6 <moveStepper>:

// Function to move the stepper motor with variable delay based on the lookup table
void moveStepper(int moveNum, int* stepNumInput){
 2d6:	6f 92       	push	r6
 2d8:	7f 92       	push	r7
 2da:	8f 92       	push	r8
 2dc:	9f 92       	push	r9
 2de:	af 92       	push	r10
 2e0:	bf 92       	push	r11
 2e2:	cf 92       	push	r12
 2e4:	df 92       	push	r13
 2e6:	ef 92       	push	r14
 2e8:	ff 92       	push	r15
 2ea:	0f 93       	push	r16
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	7c 01       	movw	r14, r24
 2f4:	3b 01       	movw	r6, r22
	int stepNum = *stepNumInput;
 2f6:	db 01       	movw	r26, r22
 2f8:	cd 91       	ld	r28, X+
 2fa:	dc 91       	ld	r29, X
	int *ptr;
	if(moveNum >= 0){
 2fc:	99 23       	and	r25, r25
 2fe:	54 f4       	brge	.+20     	; 0x314 <moveStepper+0x3e>
		static int forSteps[] = {0,1,2,3};
		ptr = forSteps;
		} else {
		static int backSteps[] = {2,3,0,1};
		ptr = backSteps;
		moveNum = -moveNum;
 300:	f1 94       	neg	r15
 302:	e1 94       	neg	r14
 304:	f1 08       	sbc	r15, r1
	if(moveNum >= 0){
		static int forSteps[] = {0,1,2,3};
		ptr = forSteps;
		} else {
		static int backSteps[] = {2,3,0,1};
		ptr = backSteps;
 306:	0f 2e       	mov	r0, r31
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	cf 2e       	mov	r12, r31
 30c:	f2 e0       	ldi	r31, 0x02	; 2
 30e:	df 2e       	mov	r13, r31
 310:	f0 2d       	mov	r31, r0
 312:	06 c0       	rjmp	.+12     	; 0x320 <moveStepper+0x4a>
void moveStepper(int moveNum, int* stepNumInput){
	int stepNum = *stepNumInput;
	int *ptr;
	if(moveNum >= 0){
		static int forSteps[] = {0,1,2,3};
		ptr = forSteps;
 314:	0f 2e       	mov	r0, r31
 316:	f8 e0       	ldi	r31, 0x08	; 8
 318:	cf 2e       	mov	r12, r31
 31a:	f2 e0       	ldi	r31, 0x02	; 2
 31c:	df 2e       	mov	r13, r31
 31e:	f0 2d       	mov	r31, r0
		} else {
		static int backSteps[] = {2,3,0,1};
		ptr = backSteps;
		moveNum = -moveNum;
	}
	for(int i=0; i < moveNum; i++){
 320:	1e 14       	cp	r1, r14
 322:	1f 04       	cpc	r1, r15
 324:	0c f0       	brlt	.+2      	; 0x328 <moveStepper+0x52>
 326:	6e c0       	rjmp	.+220    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 328:	0f 2e       	mov	r0, r31
 32a:	fe ed       	ldi	r31, 0xDE	; 222
 32c:	8f 2e       	mov	r8, r31
 32e:	f2 e0       	ldi	r31, 0x02	; 2
 330:	9f 2e       	mov	r9, r31
 332:	f0 2d       	mov	r31, r0
 334:	06 e1       	ldi	r16, 0x16	; 22
 336:	12 e0       	ldi	r17, 0x02	; 2
 338:	c7 01       	movw	r24, r14
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	fc 01       	movw	r30, r24
 340:	e2 52       	subi	r30, 0x22	; 34
 342:	fd 4f       	sbci	r31, 0xFD	; 253
 344:	5f 01       	movw	r10, r30
		switch(stepNum){
 346:	c1 30       	cpi	r28, 0x01	; 1
 348:	d1 05       	cpc	r29, r1
 34a:	19 f1       	breq	.+70     	; 0x392 <moveStepper+0xbc>
 34c:	1c f4       	brge	.+6      	; 0x354 <moveStepper+0x7e>
 34e:	20 97       	sbiw	r28, 0x00	; 0
 350:	91 f0       	breq	.+36     	; 0x376 <moveStepper+0xa0>
 352:	3a c0       	rjmp	.+116    	; 0x3c8 <moveStepper+0xf2>
 354:	c2 30       	cpi	r28, 0x02	; 2
 356:	d1 05       	cpc	r29, r1
 358:	51 f1       	breq	.+84     	; 0x3ae <moveStepper+0xd8>
 35a:	c3 30       	cpi	r28, 0x03	; 3
 35c:	d1 05       	cpc	r29, r1
 35e:	a1 f5       	brne	.+104    	; 0x3c8 <moveStepper+0xf2>
			case(3):
			PORTA = motorSteps[*ptr];
 360:	d6 01       	movw	r26, r12
 362:	ed 91       	ld	r30, X+
 364:	fc 91       	ld	r31, X
 366:	11 97       	sbiw	r26, 0x01	; 1
 368:	e0 5f       	subi	r30, 0xF0	; 240
 36a:	fd 4f       	sbci	r31, 0xFD	; 253
 36c:	80 81       	ld	r24, Z
 36e:	82 b9       	out	0x02, r24	; 2
			stepNum = *ptr;
 370:	cd 91       	ld	r28, X+
 372:	dc 91       	ld	r29, X
			break;
 374:	29 c0       	rjmp	.+82     	; 0x3c8 <moveStepper+0xf2>
			case(0):
			PORTA = motorSteps[*(ptr+1)];
 376:	d6 01       	movw	r26, r12
 378:	12 96       	adiw	r26, 0x02	; 2
 37a:	ed 91       	ld	r30, X+
 37c:	fc 91       	ld	r31, X
 37e:	13 97       	sbiw	r26, 0x03	; 3
 380:	e0 5f       	subi	r30, 0xF0	; 240
 382:	fd 4f       	sbci	r31, 0xFD	; 253
 384:	80 81       	ld	r24, Z
 386:	82 b9       	out	0x02, r24	; 2
			stepNum = *(ptr+1);
 388:	12 96       	adiw	r26, 0x02	; 2
 38a:	cd 91       	ld	r28, X+
 38c:	dc 91       	ld	r29, X
 38e:	13 97       	sbiw	r26, 0x03	; 3
			break;
 390:	1b c0       	rjmp	.+54     	; 0x3c8 <moveStepper+0xf2>
			case(1):
			PORTA = motorSteps[*(ptr+2)];
 392:	d6 01       	movw	r26, r12
 394:	14 96       	adiw	r26, 0x04	; 4
 396:	ed 91       	ld	r30, X+
 398:	fc 91       	ld	r31, X
 39a:	15 97       	sbiw	r26, 0x05	; 5
 39c:	e0 5f       	subi	r30, 0xF0	; 240
 39e:	fd 4f       	sbci	r31, 0xFD	; 253
 3a0:	80 81       	ld	r24, Z
 3a2:	82 b9       	out	0x02, r24	; 2
			stepNum = *(ptr+2);
 3a4:	14 96       	adiw	r26, 0x04	; 4
 3a6:	cd 91       	ld	r28, X+
 3a8:	dc 91       	ld	r29, X
 3aa:	15 97       	sbiw	r26, 0x05	; 5
			break;
 3ac:	0d c0       	rjmp	.+26     	; 0x3c8 <moveStepper+0xf2>
			case(2):
			PORTA = motorSteps[*(ptr+3)];
 3ae:	d6 01       	movw	r26, r12
 3b0:	16 96       	adiw	r26, 0x06	; 6
 3b2:	ed 91       	ld	r30, X+
 3b4:	fc 91       	ld	r31, X
 3b6:	17 97       	sbiw	r26, 0x07	; 7
 3b8:	e0 5f       	subi	r30, 0xF0	; 240
 3ba:	fd 4f       	sbci	r31, 0xFD	; 253
 3bc:	80 81       	ld	r24, Z
 3be:	82 b9       	out	0x02, r24	; 2
			stepNum = *(ptr+3);
 3c0:	16 96       	adiw	r26, 0x06	; 6
 3c2:	cd 91       	ld	r28, X+
 3c4:	dc 91       	ld	r29, X
 3c6:	17 97       	sbiw	r26, 0x07	; 7
			break;
			default:
			break;
		}
		if (moveNum == 50){
 3c8:	b2 e3       	ldi	r27, 0x32	; 50
 3ca:	eb 16       	cp	r14, r27
 3cc:	f1 04       	cpc	r15, r1
 3ce:	29 f4       	brne	.+10     	; 0x3da <moveStepper+0x104>
			mTimer(delayTable90[i]);
 3d0:	f4 01       	movw	r30, r8
 3d2:	80 81       	ld	r24, Z
 3d4:	91 81       	ldd	r25, Z+1	; 0x01
 3d6:	32 d0       	rcall	.+100    	; 0x43c <mTimer>
 3d8:	0c c0       	rjmp	.+24     	; 0x3f2 <moveStepper+0x11c>
			} else if (moveNum == 100){
 3da:	f4 e6       	ldi	r31, 0x64	; 100
 3dc:	ef 16       	cp	r14, r31
 3de:	f1 04       	cpc	r15, r1
 3e0:	29 f4       	brne	.+10     	; 0x3ec <moveStepper+0x116>
			mTimer(delayTable180[i]);
 3e2:	d8 01       	movw	r26, r16
 3e4:	8d 91       	ld	r24, X+
 3e6:	9c 91       	ld	r25, X
 3e8:	29 d0       	rcall	.+82     	; 0x43c <mTimer>
 3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <moveStepper+0x11c>
			} else {
			mTimer(20);
 3ec:	84 e1       	ldi	r24, 0x14	; 20
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	25 d0       	rcall	.+74     	; 0x43c <mTimer>
 3f2:	b2 e0       	ldi	r27, 0x02	; 2
 3f4:	8b 0e       	add	r8, r27
 3f6:	91 1c       	adc	r9, r1
 3f8:	0e 5f       	subi	r16, 0xFE	; 254
 3fa:	1f 4f       	sbci	r17, 0xFF	; 255
		} else {
		static int backSteps[] = {2,3,0,1};
		ptr = backSteps;
		moveNum = -moveNum;
	}
	for(int i=0; i < moveNum; i++){
 3fc:	8a 14       	cp	r8, r10
 3fe:	9b 04       	cpc	r9, r11
 400:	09 f0       	breq	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 402:	a1 cf       	rjmp	.-190    	; 0x346 <moveStepper+0x70>
			mTimer(delayTable180[i]);
			} else {
			mTimer(20);
		}
	}
	*stepNumInput = stepNum;
 404:	f3 01       	movw	r30, r6
 406:	d1 83       	std	Z+1, r29	; 0x01
 408:	c0 83       	st	Z, r28
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	1f 91       	pop	r17
 410:	0f 91       	pop	r16
 412:	ff 90       	pop	r15
 414:	ef 90       	pop	r14
 416:	df 90       	pop	r13
 418:	cf 90       	pop	r12
 41a:	bf 90       	pop	r11
 41c:	af 90       	pop	r10
 41e:	9f 90       	pop	r9
 420:	8f 90       	pop	r8
 422:	7f 90       	pop	r7
 424:	6f 90       	pop	r6
 426:	08 95       	ret

00000428 <timer8MHz>:

//This file contains the timer subroutines from lab 2. They have been repurposed for use in future labs

void timer8MHz(){ //sets the timer to 8MHz

    CLKPR = 0x80; /* This will be discussed later. */
 428:	e1 e6       	ldi	r30, 0x61	; 97
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	80 e8       	ldi	r24, 0x80	; 128
 42e:	80 83       	st	Z, r24
    CLKPR = 0x01; /* Required to set CPU Clock to 8MHz */
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	80 83       	st	Z, r24
    
    /* Timer instructions */
    /* Sets timer 1 to run at 1MHz, note: CPU clock is set to 8MHz.
       Disable all functions and use as pure timer */
    
    TCCR1B = _BV(CS11); /* _BV sets the bit to logic 1 */
 434:	82 e0       	ldi	r24, 0x02	; 2
 436:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 43a:	08 95       	ret

0000043c <mTimer>:
    /* CS means clock select, has the pre-scaler set to 8 */

} /* close timer8MHz */

/* This is the driver for the timer. */
void mTimer(int count){
 43c:	ac 01       	movw	r20, r24
    int i; /* keeps track of loop number */

    i = 0; /* initializes loop counter */

    /* Set the Waveform Generation mode bit description to Clear Timer on Compare Match mode (CTC) only */
    TCCR1B |= _BV(WGM12); /* set WGM bits to 0100, see page 145 */
 43e:	e1 e8       	ldi	r30, 0x81	; 129
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	90 81       	ld	r25, Z
 444:	98 60       	ori	r25, 0x08	; 8
 446:	90 83       	st	Z, r25
    /* Note WGM is spread over two registers. */

    OCR1A = 0x03E8; /* Set Output Compare Register for 1000 cycles = 1ms */
 448:	88 ee       	ldi	r24, 0xE8	; 232
 44a:	93 e0       	ldi	r25, 0x03	; 3
 44c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 450:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
    TCNT1 = 0x0000; /* Sets initial value of Timer Counter to 0x0000 */
 454:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 458:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
 45c:	b1 9a       	sbi	0x16, 1	; 22
    The system clock has been pre-scaled by 2. This means it's running at half speed, 8MHz. See Technical manual for
    ATmega2560 (i.e. full manual) and look up "16-bit Timer/Counter1." */

    int i; /* keeps track of loop number */

    i = 0; /* initializes loop counter */
 45e:	20 e0       	ldi	r18, 0x00	; 0
 460:	30 e0       	ldi	r19, 0x00	; 0

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
    /* If the following statement is confusing, please ask for clarification! */

    /* Poll the timer to determine when the timer has reached 0x03E8 */
    while(i<count){
 462:	05 c0       	rjmp	.+10     	; 0x46e <mTimer+0x32>
        if((TIFR1 & 0x02) == 0x02){
 464:	b1 9b       	sbis	0x16, 1	; 22
 466:	fe cf       	rjmp	.-4      	; 0x464 <mTimer+0x28>
            TIFR1 |= _BV(OCF1A); /* clear interrupt flag by writing a ONE to the bit */
 468:	b1 9a       	sbi	0x16, 1	; 22
            i++; /* increment loop number */
 46a:	2f 5f       	subi	r18, 0xFF	; 255
 46c:	3f 4f       	sbci	r19, 0xFF	; 255

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
    /* If the following statement is confusing, please ask for clarification! */

    /* Poll the timer to determine when the timer has reached 0x03E8 */
    while(i<count){
 46e:	24 17       	cp	r18, r20
 470:	35 07       	cpc	r19, r21
 472:	1c f4       	brge	.+6      	; 0x47a <mTimer+0x3e>
        if((TIFR1 & 0x02) == 0x02){
 474:	b1 9b       	sbis	0x16, 1	; 22
 476:	f6 cf       	rjmp	.-20     	; 0x464 <mTimer+0x28>
 478:	f7 cf       	rjmp	.-18     	; 0x468 <mTimer+0x2c>
 47a:	08 95       	ret

0000047c <__fixsfsi>:
 47c:	04 d0       	rcall	.+8      	; 0x486 <__fixunssfsi>
 47e:	68 94       	set
 480:	b1 11       	cpse	r27, r1
 482:	8d c0       	rjmp	.+282    	; 0x59e <__fp_szero>
 484:	08 95       	ret

00000486 <__fixunssfsi>:
 486:	70 d0       	rcall	.+224    	; 0x568 <__fp_splitA>
 488:	88 f0       	brcs	.+34     	; 0x4ac <__fixunssfsi+0x26>
 48a:	9f 57       	subi	r25, 0x7F	; 127
 48c:	90 f0       	brcs	.+36     	; 0x4b2 <__fixunssfsi+0x2c>
 48e:	b9 2f       	mov	r27, r25
 490:	99 27       	eor	r25, r25
 492:	b7 51       	subi	r27, 0x17	; 23
 494:	a0 f0       	brcs	.+40     	; 0x4be <__fixunssfsi+0x38>
 496:	d1 f0       	breq	.+52     	; 0x4cc <__fixunssfsi+0x46>
 498:	66 0f       	add	r22, r22
 49a:	77 1f       	adc	r23, r23
 49c:	88 1f       	adc	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	1a f0       	brmi	.+6      	; 0x4a8 <__fixunssfsi+0x22>
 4a2:	ba 95       	dec	r27
 4a4:	c9 f7       	brne	.-14     	; 0x498 <__fixunssfsi+0x12>
 4a6:	12 c0       	rjmp	.+36     	; 0x4cc <__fixunssfsi+0x46>
 4a8:	b1 30       	cpi	r27, 0x01	; 1
 4aa:	81 f0       	breq	.+32     	; 0x4cc <__fixunssfsi+0x46>
 4ac:	77 d0       	rcall	.+238    	; 0x59c <__fp_zero>
 4ae:	b1 e0       	ldi	r27, 0x01	; 1
 4b0:	08 95       	ret
 4b2:	74 c0       	rjmp	.+232    	; 0x59c <__fp_zero>
 4b4:	67 2f       	mov	r22, r23
 4b6:	78 2f       	mov	r23, r24
 4b8:	88 27       	eor	r24, r24
 4ba:	b8 5f       	subi	r27, 0xF8	; 248
 4bc:	39 f0       	breq	.+14     	; 0x4cc <__fixunssfsi+0x46>
 4be:	b9 3f       	cpi	r27, 0xF9	; 249
 4c0:	cc f3       	brlt	.-14     	; 0x4b4 <__fixunssfsi+0x2e>
 4c2:	86 95       	lsr	r24
 4c4:	77 95       	ror	r23
 4c6:	67 95       	ror	r22
 4c8:	b3 95       	inc	r27
 4ca:	d9 f7       	brne	.-10     	; 0x4c2 <__fixunssfsi+0x3c>
 4cc:	3e f4       	brtc	.+14     	; 0x4dc <__fixunssfsi+0x56>
 4ce:	90 95       	com	r25
 4d0:	80 95       	com	r24
 4d2:	70 95       	com	r23
 4d4:	61 95       	neg	r22
 4d6:	7f 4f       	sbci	r23, 0xFF	; 255
 4d8:	8f 4f       	sbci	r24, 0xFF	; 255
 4da:	9f 4f       	sbci	r25, 0xFF	; 255
 4dc:	08 95       	ret

000004de <__floatunsisf>:
 4de:	e8 94       	clt
 4e0:	09 c0       	rjmp	.+18     	; 0x4f4 <__floatsisf+0x12>

000004e2 <__floatsisf>:
 4e2:	97 fb       	bst	r25, 7
 4e4:	3e f4       	brtc	.+14     	; 0x4f4 <__floatsisf+0x12>
 4e6:	90 95       	com	r25
 4e8:	80 95       	com	r24
 4ea:	70 95       	com	r23
 4ec:	61 95       	neg	r22
 4ee:	7f 4f       	sbci	r23, 0xFF	; 255
 4f0:	8f 4f       	sbci	r24, 0xFF	; 255
 4f2:	9f 4f       	sbci	r25, 0xFF	; 255
 4f4:	99 23       	and	r25, r25
 4f6:	a9 f0       	breq	.+42     	; 0x522 <__floatsisf+0x40>
 4f8:	f9 2f       	mov	r31, r25
 4fa:	96 e9       	ldi	r25, 0x96	; 150
 4fc:	bb 27       	eor	r27, r27
 4fe:	93 95       	inc	r25
 500:	f6 95       	lsr	r31
 502:	87 95       	ror	r24
 504:	77 95       	ror	r23
 506:	67 95       	ror	r22
 508:	b7 95       	ror	r27
 50a:	f1 11       	cpse	r31, r1
 50c:	f8 cf       	rjmp	.-16     	; 0x4fe <__floatsisf+0x1c>
 50e:	fa f4       	brpl	.+62     	; 0x54e <__floatsisf+0x6c>
 510:	bb 0f       	add	r27, r27
 512:	11 f4       	brne	.+4      	; 0x518 <__floatsisf+0x36>
 514:	60 ff       	sbrs	r22, 0
 516:	1b c0       	rjmp	.+54     	; 0x54e <__floatsisf+0x6c>
 518:	6f 5f       	subi	r22, 0xFF	; 255
 51a:	7f 4f       	sbci	r23, 0xFF	; 255
 51c:	8f 4f       	sbci	r24, 0xFF	; 255
 51e:	9f 4f       	sbci	r25, 0xFF	; 255
 520:	16 c0       	rjmp	.+44     	; 0x54e <__floatsisf+0x6c>
 522:	88 23       	and	r24, r24
 524:	11 f0       	breq	.+4      	; 0x52a <__floatsisf+0x48>
 526:	96 e9       	ldi	r25, 0x96	; 150
 528:	11 c0       	rjmp	.+34     	; 0x54c <__floatsisf+0x6a>
 52a:	77 23       	and	r23, r23
 52c:	21 f0       	breq	.+8      	; 0x536 <__floatsisf+0x54>
 52e:	9e e8       	ldi	r25, 0x8E	; 142
 530:	87 2f       	mov	r24, r23
 532:	76 2f       	mov	r23, r22
 534:	05 c0       	rjmp	.+10     	; 0x540 <__floatsisf+0x5e>
 536:	66 23       	and	r22, r22
 538:	71 f0       	breq	.+28     	; 0x556 <__floatsisf+0x74>
 53a:	96 e8       	ldi	r25, 0x86	; 134
 53c:	86 2f       	mov	r24, r22
 53e:	70 e0       	ldi	r23, 0x00	; 0
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	2a f0       	brmi	.+10     	; 0x54e <__floatsisf+0x6c>
 544:	9a 95       	dec	r25
 546:	66 0f       	add	r22, r22
 548:	77 1f       	adc	r23, r23
 54a:	88 1f       	adc	r24, r24
 54c:	da f7       	brpl	.-10     	; 0x544 <__floatsisf+0x62>
 54e:	88 0f       	add	r24, r24
 550:	96 95       	lsr	r25
 552:	87 95       	ror	r24
 554:	97 f9       	bld	r25, 7
 556:	08 95       	ret

00000558 <__fp_split3>:
 558:	57 fd       	sbrc	r21, 7
 55a:	90 58       	subi	r25, 0x80	; 128
 55c:	44 0f       	add	r20, r20
 55e:	55 1f       	adc	r21, r21
 560:	59 f0       	breq	.+22     	; 0x578 <__fp_splitA+0x10>
 562:	5f 3f       	cpi	r21, 0xFF	; 255
 564:	71 f0       	breq	.+28     	; 0x582 <__fp_splitA+0x1a>
 566:	47 95       	ror	r20

00000568 <__fp_splitA>:
 568:	88 0f       	add	r24, r24
 56a:	97 fb       	bst	r25, 7
 56c:	99 1f       	adc	r25, r25
 56e:	61 f0       	breq	.+24     	; 0x588 <__fp_splitA+0x20>
 570:	9f 3f       	cpi	r25, 0xFF	; 255
 572:	79 f0       	breq	.+30     	; 0x592 <__fp_splitA+0x2a>
 574:	87 95       	ror	r24
 576:	08 95       	ret
 578:	12 16       	cp	r1, r18
 57a:	13 06       	cpc	r1, r19
 57c:	14 06       	cpc	r1, r20
 57e:	55 1f       	adc	r21, r21
 580:	f2 cf       	rjmp	.-28     	; 0x566 <__fp_split3+0xe>
 582:	46 95       	lsr	r20
 584:	f1 df       	rcall	.-30     	; 0x568 <__fp_splitA>
 586:	08 c0       	rjmp	.+16     	; 0x598 <__fp_splitA+0x30>
 588:	16 16       	cp	r1, r22
 58a:	17 06       	cpc	r1, r23
 58c:	18 06       	cpc	r1, r24
 58e:	99 1f       	adc	r25, r25
 590:	f1 cf       	rjmp	.-30     	; 0x574 <__fp_splitA+0xc>
 592:	86 95       	lsr	r24
 594:	71 05       	cpc	r23, r1
 596:	61 05       	cpc	r22, r1
 598:	08 94       	sec
 59a:	08 95       	ret

0000059c <__fp_zero>:
 59c:	e8 94       	clt

0000059e <__fp_szero>:
 59e:	bb 27       	eor	r27, r27
 5a0:	66 27       	eor	r22, r22
 5a2:	77 27       	eor	r23, r23
 5a4:	cb 01       	movw	r24, r22
 5a6:	97 f9       	bld	r25, 7
 5a8:	08 95       	ret

000005aa <__mulsf3>:
 5aa:	0b d0       	rcall	.+22     	; 0x5c2 <__mulsf3x>
 5ac:	78 c0       	rjmp	.+240    	; 0x69e <__fp_round>
 5ae:	69 d0       	rcall	.+210    	; 0x682 <__fp_pscA>
 5b0:	28 f0       	brcs	.+10     	; 0x5bc <__mulsf3+0x12>
 5b2:	6e d0       	rcall	.+220    	; 0x690 <__fp_pscB>
 5b4:	18 f0       	brcs	.+6      	; 0x5bc <__mulsf3+0x12>
 5b6:	95 23       	and	r25, r21
 5b8:	09 f0       	breq	.+2      	; 0x5bc <__mulsf3+0x12>
 5ba:	5a c0       	rjmp	.+180    	; 0x670 <__fp_inf>
 5bc:	5f c0       	rjmp	.+190    	; 0x67c <__fp_nan>
 5be:	11 24       	eor	r1, r1
 5c0:	ee cf       	rjmp	.-36     	; 0x59e <__fp_szero>

000005c2 <__mulsf3x>:
 5c2:	ca df       	rcall	.-108    	; 0x558 <__fp_split3>
 5c4:	a0 f3       	brcs	.-24     	; 0x5ae <__mulsf3+0x4>

000005c6 <__mulsf3_pse>:
 5c6:	95 9f       	mul	r25, r21
 5c8:	d1 f3       	breq	.-12     	; 0x5be <__mulsf3+0x14>
 5ca:	95 0f       	add	r25, r21
 5cc:	50 e0       	ldi	r21, 0x00	; 0
 5ce:	55 1f       	adc	r21, r21
 5d0:	62 9f       	mul	r22, r18
 5d2:	f0 01       	movw	r30, r0
 5d4:	72 9f       	mul	r23, r18
 5d6:	bb 27       	eor	r27, r27
 5d8:	f0 0d       	add	r31, r0
 5da:	b1 1d       	adc	r27, r1
 5dc:	63 9f       	mul	r22, r19
 5de:	aa 27       	eor	r26, r26
 5e0:	f0 0d       	add	r31, r0
 5e2:	b1 1d       	adc	r27, r1
 5e4:	aa 1f       	adc	r26, r26
 5e6:	64 9f       	mul	r22, r20
 5e8:	66 27       	eor	r22, r22
 5ea:	b0 0d       	add	r27, r0
 5ec:	a1 1d       	adc	r26, r1
 5ee:	66 1f       	adc	r22, r22
 5f0:	82 9f       	mul	r24, r18
 5f2:	22 27       	eor	r18, r18
 5f4:	b0 0d       	add	r27, r0
 5f6:	a1 1d       	adc	r26, r1
 5f8:	62 1f       	adc	r22, r18
 5fa:	73 9f       	mul	r23, r19
 5fc:	b0 0d       	add	r27, r0
 5fe:	a1 1d       	adc	r26, r1
 600:	62 1f       	adc	r22, r18
 602:	83 9f       	mul	r24, r19
 604:	a0 0d       	add	r26, r0
 606:	61 1d       	adc	r22, r1
 608:	22 1f       	adc	r18, r18
 60a:	74 9f       	mul	r23, r20
 60c:	33 27       	eor	r19, r19
 60e:	a0 0d       	add	r26, r0
 610:	61 1d       	adc	r22, r1
 612:	23 1f       	adc	r18, r19
 614:	84 9f       	mul	r24, r20
 616:	60 0d       	add	r22, r0
 618:	21 1d       	adc	r18, r1
 61a:	82 2f       	mov	r24, r18
 61c:	76 2f       	mov	r23, r22
 61e:	6a 2f       	mov	r22, r26
 620:	11 24       	eor	r1, r1
 622:	9f 57       	subi	r25, 0x7F	; 127
 624:	50 40       	sbci	r21, 0x00	; 0
 626:	8a f0       	brmi	.+34     	; 0x64a <__mulsf3_pse+0x84>
 628:	e1 f0       	breq	.+56     	; 0x662 <__mulsf3_pse+0x9c>
 62a:	88 23       	and	r24, r24
 62c:	4a f0       	brmi	.+18     	; 0x640 <__mulsf3_pse+0x7a>
 62e:	ee 0f       	add	r30, r30
 630:	ff 1f       	adc	r31, r31
 632:	bb 1f       	adc	r27, r27
 634:	66 1f       	adc	r22, r22
 636:	77 1f       	adc	r23, r23
 638:	88 1f       	adc	r24, r24
 63a:	91 50       	subi	r25, 0x01	; 1
 63c:	50 40       	sbci	r21, 0x00	; 0
 63e:	a9 f7       	brne	.-22     	; 0x62a <__mulsf3_pse+0x64>
 640:	9e 3f       	cpi	r25, 0xFE	; 254
 642:	51 05       	cpc	r21, r1
 644:	70 f0       	brcs	.+28     	; 0x662 <__mulsf3_pse+0x9c>
 646:	14 c0       	rjmp	.+40     	; 0x670 <__fp_inf>
 648:	aa cf       	rjmp	.-172    	; 0x59e <__fp_szero>
 64a:	5f 3f       	cpi	r21, 0xFF	; 255
 64c:	ec f3       	brlt	.-6      	; 0x648 <__mulsf3_pse+0x82>
 64e:	98 3e       	cpi	r25, 0xE8	; 232
 650:	dc f3       	brlt	.-10     	; 0x648 <__mulsf3_pse+0x82>
 652:	86 95       	lsr	r24
 654:	77 95       	ror	r23
 656:	67 95       	ror	r22
 658:	b7 95       	ror	r27
 65a:	f7 95       	ror	r31
 65c:	e7 95       	ror	r30
 65e:	9f 5f       	subi	r25, 0xFF	; 255
 660:	c1 f7       	brne	.-16     	; 0x652 <__mulsf3_pse+0x8c>
 662:	fe 2b       	or	r31, r30
 664:	88 0f       	add	r24, r24
 666:	91 1d       	adc	r25, r1
 668:	96 95       	lsr	r25
 66a:	87 95       	ror	r24
 66c:	97 f9       	bld	r25, 7
 66e:	08 95       	ret

00000670 <__fp_inf>:
 670:	97 f9       	bld	r25, 7
 672:	9f 67       	ori	r25, 0x7F	; 127
 674:	80 e8       	ldi	r24, 0x80	; 128
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	60 e0       	ldi	r22, 0x00	; 0
 67a:	08 95       	ret

0000067c <__fp_nan>:
 67c:	9f ef       	ldi	r25, 0xFF	; 255
 67e:	80 ec       	ldi	r24, 0xC0	; 192
 680:	08 95       	ret

00000682 <__fp_pscA>:
 682:	00 24       	eor	r0, r0
 684:	0a 94       	dec	r0
 686:	16 16       	cp	r1, r22
 688:	17 06       	cpc	r1, r23
 68a:	18 06       	cpc	r1, r24
 68c:	09 06       	cpc	r0, r25
 68e:	08 95       	ret

00000690 <__fp_pscB>:
 690:	00 24       	eor	r0, r0
 692:	0a 94       	dec	r0
 694:	12 16       	cp	r1, r18
 696:	13 06       	cpc	r1, r19
 698:	14 06       	cpc	r1, r20
 69a:	05 06       	cpc	r0, r21
 69c:	08 95       	ret

0000069e <__fp_round>:
 69e:	09 2e       	mov	r0, r25
 6a0:	03 94       	inc	r0
 6a2:	00 0c       	add	r0, r0
 6a4:	11 f4       	brne	.+4      	; 0x6aa <__fp_round+0xc>
 6a6:	88 23       	and	r24, r24
 6a8:	52 f0       	brmi	.+20     	; 0x6be <__fp_round+0x20>
 6aa:	bb 0f       	add	r27, r27
 6ac:	40 f4       	brcc	.+16     	; 0x6be <__fp_round+0x20>
 6ae:	bf 2b       	or	r27, r31
 6b0:	11 f4       	brne	.+4      	; 0x6b6 <__fp_round+0x18>
 6b2:	60 ff       	sbrs	r22, 0
 6b4:	04 c0       	rjmp	.+8      	; 0x6be <__fp_round+0x20>
 6b6:	6f 5f       	subi	r22, 0xFF	; 255
 6b8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ba:	8f 4f       	sbci	r24, 0xFF	; 255
 6bc:	9f 4f       	sbci	r25, 0xFF	; 255
 6be:	08 95       	ret

000006c0 <__divmodhi4>:
 6c0:	97 fb       	bst	r25, 7
 6c2:	07 2e       	mov	r0, r23
 6c4:	16 f4       	brtc	.+4      	; 0x6ca <__divmodhi4+0xa>
 6c6:	00 94       	com	r0
 6c8:	06 d0       	rcall	.+12     	; 0x6d6 <__divmodhi4_neg1>
 6ca:	77 fd       	sbrc	r23, 7
 6cc:	08 d0       	rcall	.+16     	; 0x6de <__divmodhi4_neg2>
 6ce:	0b d0       	rcall	.+22     	; 0x6e6 <__udivmodhi4>
 6d0:	07 fc       	sbrc	r0, 7
 6d2:	05 d0       	rcall	.+10     	; 0x6de <__divmodhi4_neg2>
 6d4:	3e f4       	brtc	.+14     	; 0x6e4 <__divmodhi4_exit>

000006d6 <__divmodhi4_neg1>:
 6d6:	90 95       	com	r25
 6d8:	81 95       	neg	r24
 6da:	9f 4f       	sbci	r25, 0xFF	; 255
 6dc:	08 95       	ret

000006de <__divmodhi4_neg2>:
 6de:	70 95       	com	r23
 6e0:	61 95       	neg	r22
 6e2:	7f 4f       	sbci	r23, 0xFF	; 255

000006e4 <__divmodhi4_exit>:
 6e4:	08 95       	ret

000006e6 <__udivmodhi4>:
 6e6:	aa 1b       	sub	r26, r26
 6e8:	bb 1b       	sub	r27, r27
 6ea:	51 e1       	ldi	r21, 0x11	; 17
 6ec:	07 c0       	rjmp	.+14     	; 0x6fc <__udivmodhi4_ep>

000006ee <__udivmodhi4_loop>:
 6ee:	aa 1f       	adc	r26, r26
 6f0:	bb 1f       	adc	r27, r27
 6f2:	a6 17       	cp	r26, r22
 6f4:	b7 07       	cpc	r27, r23
 6f6:	10 f0       	brcs	.+4      	; 0x6fc <__udivmodhi4_ep>
 6f8:	a6 1b       	sub	r26, r22
 6fa:	b7 0b       	sbc	r27, r23

000006fc <__udivmodhi4_ep>:
 6fc:	88 1f       	adc	r24, r24
 6fe:	99 1f       	adc	r25, r25
 700:	5a 95       	dec	r21
 702:	a9 f7       	brne	.-22     	; 0x6ee <__udivmodhi4_loop>
 704:	80 95       	com	r24
 706:	90 95       	com	r25
 708:	bc 01       	movw	r22, r24
 70a:	cd 01       	movw	r24, r26
 70c:	08 95       	ret

0000070e <_exit>:
 70e:	f8 94       	cli

00000710 <__stop_program>:
 710:	ff cf       	rjmp	.-2      	; 0x710 <__stop_program>
