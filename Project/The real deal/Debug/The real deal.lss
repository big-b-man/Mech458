
The real deal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000196  00800200  00000e14  00000ea8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800396  00800396  0000103e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000103e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001070  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002217  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012d0  00000000  00000000  00003437  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001036  00000000  00000000  00004707  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000410  00000000  00000000  00005740  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008dd  00000000  00000000  00005b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010ac  00000000  00000000  0000642d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000074d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	60 c4       	rjmp	.+2240   	; 0x8c6 <__vector_1>
   6:	00 00       	nop
   8:	6d c4       	rjmp	.+2266   	; 0x8e4 <__vector_2>
   a:	00 00       	nop
   c:	9d c4       	rjmp	.+2362   	; 0x948 <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	e8 c4       	rjmp	.+2512   	; 0x9ea <__vector_6>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	ec c4       	rjmp	.+2520   	; 0xa4e <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e1       	ldi	r30, 0x14	; 20
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 39       	cpi	r26, 0x96	; 150
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a6 e9       	ldi	r26, 0x96	; 150
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 3a       	cpi	r26, 0xA1	; 161
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	14 d2       	rcall	.+1064   	; 0x548 <main>
 120:	77 c6       	rjmp	.+3310   	; 0xe10 <_exit>

00000122 <__bad_interrupt>:
 122:	d1 c4       	rjmp	.+2466   	; 0xac6 <__vector_default>

00000124 <homeMotor>:
	0b00101110,  // Step 2
	0b00101101   // Step 3
};
int delayTable90[] = {15000, 14797.6, 14241.5, 13408.7, 12376.1, 11220.4, 10018.7, 8847.66, 7784.26, 6905.35, 6287.81, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6059.28, 6287.81, 6666.67, 7173.07, 7784.26, 8477.44, 9229.83, 10018.7, 10821.2, 11614.6, 12376.1, 13082.9, 13712.3, 14241.5, 14647.7, 14908.1, 15000};
int delayTable180[] = {15000, 14972.9, 14893.8, 14766.4, 14594.1, 14380.7, 14129.5, 13844.2, 13528.3, 13185.4, 12819, 12432.7, 12030, 11614.6, 11189.9, 10759.5, 10327, 9895.86, 9469.73, 9052.14, 8646.64, 8256.78, 7886.13, 7538.24, 7216.66, 6924.95, 6666.67, 6445.37, 6264.6, 6127.93, 6038.92, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6007.8, 6038.92, 6092.79, 6168.37, 6264.6, 6380.43, 6514.8, 6666.67, 6834.97, 7018.65, 7216.66, 7427.95, 7651.46, 7886.13, 8130.92, 8384.78, 8646.64, 8915.45, 9190.17, 9469.73, 9753.09, 10039.2, 10327, 10615.4, 10903.4, 11189.9, 11473.9, 11754.3, 12030, 12300.1, 12563.5, 12819, 13065.7, 13302.5, 13528.3, 13742.1, 13942.9, 14129.5, 14301, 14456.2, 14594.1, 14713.8, 14814, 14893.8, 14952.1, 14987.8, 15000};
int homeMotor(void) {
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
	int stepIdx = 0;
	while (1) {
		// Check the hall effect sensor
		if (!(PIND & (1 << HALL_SENSOR_PIN))) {
 128:	4f 99       	sbic	0x09, 7	; 9
 12a:	03 c0       	rjmp	.+6      	; 0x132 <homeMotor+0xe>
	0b00101101   // Step 3
};
int delayTable90[] = {15000, 14797.6, 14241.5, 13408.7, 12376.1, 11220.4, 10018.7, 8847.66, 7784.26, 6905.35, 6287.81, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6059.28, 6287.81, 6666.67, 7173.07, 7784.26, 8477.44, 9229.83, 10018.7, 10821.2, 11614.6, 12376.1, 13082.9, 13712.3, 14241.5, 14647.7, 14908.1, 15000};
int delayTable180[] = {15000, 14972.9, 14893.8, 14766.4, 14594.1, 14380.7, 14129.5, 13844.2, 13528.3, 13185.4, 12819, 12432.7, 12030, 11614.6, 11189.9, 10759.5, 10327, 9895.86, 9469.73, 9052.14, 8646.64, 8256.78, 7886.13, 7538.24, 7216.66, 6924.95, 6666.67, 6445.37, 6264.6, 6127.93, 6038.92, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6007.8, 6038.92, 6092.79, 6168.37, 6264.6, 6380.43, 6514.8, 6666.67, 6834.97, 7018.65, 7216.66, 7427.95, 7651.46, 7886.13, 8130.92, 8384.78, 8646.64, 8915.45, 9190.17, 9469.73, 9753.09, 10039.2, 10327, 10615.4, 10903.4, 11189.9, 11473.9, 11754.3, 12030, 12300.1, 12563.5, 12819, 13065.7, 13302.5, 13528.3, 13742.1, 13942.9, 14129.5, 14301, 14456.2, 14594.1, 14713.8, 14814, 14893.8, 14952.1, 14987.8, 15000};
int homeMotor(void) {
	int stepIdx = 0;
 12c:	c0 e0       	ldi	r28, 0x00	; 0
 12e:	d0 e0       	ldi	r29, 0x00	; 0
 130:	17 c0       	rjmp	.+46     	; 0x160 <homeMotor+0x3c>
	while (1) {
		// Check the hall effect sensor
		if (!(PIND & (1 << HALL_SENSOR_PIN))) {
 132:	c0 e0       	ldi	r28, 0x00	; 0
 134:	d0 e0       	ldi	r29, 0x00	; 0
			PORTA = 0x00; // Stop the motor
			return(stepIdx);
			} else {
			// Move one step
			stepIdx = (stepIdx + 1) % 4; // Cycle through steps
 136:	ce 01       	movw	r24, r28
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	83 70       	andi	r24, 0x03	; 3
 13c:	90 78       	andi	r25, 0x80	; 128
 13e:	99 23       	and	r25, r25
 140:	24 f4       	brge	.+8      	; 0x14a <homeMotor+0x26>
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	8c 6f       	ori	r24, 0xFC	; 252
 146:	9f 6f       	ori	r25, 0xFF	; 255
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	ec 01       	movw	r28, r24
			PORTA = motorSteps[stepIdx];
 14c:	fc 01       	movw	r30, r24
 14e:	e8 5b       	subi	r30, 0xB8	; 184
 150:	fc 4f       	sbci	r31, 0xFC	; 252
 152:	80 81       	ld	r24, Z
 154:	82 b9       	out	0x02, r24	; 2
			mTimer(20); // Delay for motor movement
 156:	84 e1       	ldi	r24, 0x14	; 20
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	e3 d4       	rcall	.+2502   	; 0xb22 <mTimer>
int delayTable180[] = {15000, 14972.9, 14893.8, 14766.4, 14594.1, 14380.7, 14129.5, 13844.2, 13528.3, 13185.4, 12819, 12432.7, 12030, 11614.6, 11189.9, 10759.5, 10327, 9895.86, 9469.73, 9052.14, 8646.64, 8256.78, 7886.13, 7538.24, 7216.66, 6924.95, 6666.67, 6445.37, 6264.6, 6127.93, 6038.92, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6007.8, 6038.92, 6092.79, 6168.37, 6264.6, 6380.43, 6514.8, 6666.67, 6834.97, 7018.65, 7216.66, 7427.95, 7651.46, 7886.13, 8130.92, 8384.78, 8646.64, 8915.45, 9190.17, 9469.73, 9753.09, 10039.2, 10327, 10615.4, 10903.4, 11189.9, 11473.9, 11754.3, 12030, 12300.1, 12563.5, 12819, 13065.7, 13302.5, 13528.3, 13742.1, 13942.9, 14129.5, 14301, 14456.2, 14594.1, 14713.8, 14814, 14893.8, 14952.1, 14987.8, 15000};
int homeMotor(void) {
	int stepIdx = 0;
	while (1) {
		// Check the hall effect sensor
		if (!(PIND & (1 << HALL_SENSOR_PIN))) {
 15c:	4f 99       	sbic	0x09, 7	; 9
 15e:	eb cf       	rjmp	.-42     	; 0x136 <homeMotor+0x12>
			PORTA = 0x00; // Stop the motor
 160:	12 b8       	out	0x02, r1	; 2
			stepIdx = (stepIdx + 1) % 4; // Cycle through steps
			PORTA = motorSteps[stepIdx];
			mTimer(20); // Delay for motor movement
		}
	}
}
 162:	ce 01       	movw	r24, r28
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <moveStepper>:

// Function to move the stepper motor with variable delay based on the lookup table
void moveStepper(int moveNum, int* stepNumInput){
 16a:	6f 92       	push	r6
 16c:	7f 92       	push	r7
 16e:	8f 92       	push	r8
 170:	9f 92       	push	r9
 172:	af 92       	push	r10
 174:	bf 92       	push	r11
 176:	cf 92       	push	r12
 178:	df 92       	push	r13
 17a:	ef 92       	push	r14
 17c:	ff 92       	push	r15
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	7c 01       	movw	r14, r24
 188:	3b 01       	movw	r6, r22
	int stepNum = *stepNumInput;
 18a:	db 01       	movw	r26, r22
 18c:	cd 91       	ld	r28, X+
 18e:	dc 91       	ld	r29, X
	int *ptr;
	if(moveNum >= 0){
 190:	99 23       	and	r25, r25
 192:	54 f4       	brge	.+20     	; 0x1a8 <moveStepper+0x3e>
		static int forSteps[] = {0,1,2,3};
		ptr = forSteps;
		} else {
		static int backSteps[] = {2,3,0,1};
		ptr = backSteps;
		moveNum = -moveNum;
 194:	f1 94       	neg	r15
 196:	e1 94       	neg	r14
 198:	f1 08       	sbc	r15, r1
	if(moveNum >= 0){
		static int forSteps[] = {0,1,2,3};
		ptr = forSteps;
		} else {
		static int backSteps[] = {2,3,0,1};
		ptr = backSteps;
 19a:	0f 2e       	mov	r0, r31
 19c:	f6 e0       	ldi	r31, 0x06	; 6
 19e:	cf 2e       	mov	r12, r31
 1a0:	f2 e0       	ldi	r31, 0x02	; 2
 1a2:	df 2e       	mov	r13, r31
 1a4:	f0 2d       	mov	r31, r0
 1a6:	06 c0       	rjmp	.+12     	; 0x1b4 <moveStepper+0x4a>
void moveStepper(int moveNum, int* stepNumInput){
	int stepNum = *stepNumInput;
	int *ptr;
	if(moveNum >= 0){
		static int forSteps[] = {0,1,2,3};
		ptr = forSteps;
 1a8:	0f 2e       	mov	r0, r31
 1aa:	fe e0       	ldi	r31, 0x0E	; 14
 1ac:	cf 2e       	mov	r12, r31
 1ae:	f2 e0       	ldi	r31, 0x02	; 2
 1b0:	df 2e       	mov	r13, r31
 1b2:	f0 2d       	mov	r31, r0
		} else {
		static int backSteps[] = {2,3,0,1};
		ptr = backSteps;
		moveNum = -moveNum;
	}
	for(int i=0; i < moveNum; i++){
 1b4:	1e 14       	cp	r1, r14
 1b6:	1f 04       	cpc	r1, r15
 1b8:	0c f0       	brlt	.+2      	; 0x1bc <moveStepper+0x52>
 1ba:	6e c0       	rjmp	.+220    	; 0x298 <moveStepper+0x12e>
 1bc:	0f 2e       	mov	r0, r31
 1be:	fe ed       	ldi	r31, 0xDE	; 222
 1c0:	8f 2e       	mov	r8, r31
 1c2:	f2 e0       	ldi	r31, 0x02	; 2
 1c4:	9f 2e       	mov	r9, r31
 1c6:	f0 2d       	mov	r31, r0
 1c8:	06 e1       	ldi	r16, 0x16	; 22
 1ca:	12 e0       	ldi	r17, 0x02	; 2
 1cc:	c7 01       	movw	r24, r14
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	fc 01       	movw	r30, r24
 1d4:	e2 52       	subi	r30, 0x22	; 34
 1d6:	fd 4f       	sbci	r31, 0xFD	; 253
 1d8:	5f 01       	movw	r10, r30
		switch(stepNum){
 1da:	c1 30       	cpi	r28, 0x01	; 1
 1dc:	d1 05       	cpc	r29, r1
 1de:	19 f1       	breq	.+70     	; 0x226 <moveStepper+0xbc>
 1e0:	1c f4       	brge	.+6      	; 0x1e8 <moveStepper+0x7e>
 1e2:	20 97       	sbiw	r28, 0x00	; 0
 1e4:	91 f0       	breq	.+36     	; 0x20a <moveStepper+0xa0>
 1e6:	3a c0       	rjmp	.+116    	; 0x25c <moveStepper+0xf2>
 1e8:	c2 30       	cpi	r28, 0x02	; 2
 1ea:	d1 05       	cpc	r29, r1
 1ec:	51 f1       	breq	.+84     	; 0x242 <moveStepper+0xd8>
 1ee:	c3 30       	cpi	r28, 0x03	; 3
 1f0:	d1 05       	cpc	r29, r1
 1f2:	a1 f5       	brne	.+104    	; 0x25c <moveStepper+0xf2>
			case(3):
			PORTA = motorSteps[*ptr];
 1f4:	d6 01       	movw	r26, r12
 1f6:	ed 91       	ld	r30, X+
 1f8:	fc 91       	ld	r31, X
 1fa:	11 97       	sbiw	r26, 0x01	; 1
 1fc:	e8 5b       	subi	r30, 0xB8	; 184
 1fe:	fc 4f       	sbci	r31, 0xFC	; 252
 200:	80 81       	ld	r24, Z
 202:	82 b9       	out	0x02, r24	; 2
			stepNum = *ptr;
 204:	cd 91       	ld	r28, X+
 206:	dc 91       	ld	r29, X
			break;
 208:	29 c0       	rjmp	.+82     	; 0x25c <moveStepper+0xf2>
			case(0):
			PORTA = motorSteps[*(ptr+1)];
 20a:	d6 01       	movw	r26, r12
 20c:	12 96       	adiw	r26, 0x02	; 2
 20e:	ed 91       	ld	r30, X+
 210:	fc 91       	ld	r31, X
 212:	13 97       	sbiw	r26, 0x03	; 3
 214:	e8 5b       	subi	r30, 0xB8	; 184
 216:	fc 4f       	sbci	r31, 0xFC	; 252
 218:	80 81       	ld	r24, Z
 21a:	82 b9       	out	0x02, r24	; 2
			stepNum = *(ptr+1);
 21c:	12 96       	adiw	r26, 0x02	; 2
 21e:	cd 91       	ld	r28, X+
 220:	dc 91       	ld	r29, X
 222:	13 97       	sbiw	r26, 0x03	; 3
			break;
 224:	1b c0       	rjmp	.+54     	; 0x25c <moveStepper+0xf2>
			case(1):
			PORTA = motorSteps[*(ptr+2)];
 226:	d6 01       	movw	r26, r12
 228:	14 96       	adiw	r26, 0x04	; 4
 22a:	ed 91       	ld	r30, X+
 22c:	fc 91       	ld	r31, X
 22e:	15 97       	sbiw	r26, 0x05	; 5
 230:	e8 5b       	subi	r30, 0xB8	; 184
 232:	fc 4f       	sbci	r31, 0xFC	; 252
 234:	80 81       	ld	r24, Z
 236:	82 b9       	out	0x02, r24	; 2
			stepNum = *(ptr+2);
 238:	14 96       	adiw	r26, 0x04	; 4
 23a:	cd 91       	ld	r28, X+
 23c:	dc 91       	ld	r29, X
 23e:	15 97       	sbiw	r26, 0x05	; 5
			break;
 240:	0d c0       	rjmp	.+26     	; 0x25c <moveStepper+0xf2>
			case(2):
			PORTA = motorSteps[*(ptr+3)];
 242:	d6 01       	movw	r26, r12
 244:	16 96       	adiw	r26, 0x06	; 6
 246:	ed 91       	ld	r30, X+
 248:	fc 91       	ld	r31, X
 24a:	17 97       	sbiw	r26, 0x07	; 7
 24c:	e8 5b       	subi	r30, 0xB8	; 184
 24e:	fc 4f       	sbci	r31, 0xFC	; 252
 250:	80 81       	ld	r24, Z
 252:	82 b9       	out	0x02, r24	; 2
			stepNum = *(ptr+3);
 254:	16 96       	adiw	r26, 0x06	; 6
 256:	cd 91       	ld	r28, X+
 258:	dc 91       	ld	r29, X
 25a:	17 97       	sbiw	r26, 0x07	; 7
			break;
			default:
			break;
		}
		if (moveNum == 50){
 25c:	b2 e3       	ldi	r27, 0x32	; 50
 25e:	eb 16       	cp	r14, r27
 260:	f1 04       	cpc	r15, r1
 262:	29 f4       	brne	.+10     	; 0x26e <moveStepper+0x104>
			//mTimer(15);
			uTimer(delayTable90[i]);
 264:	f4 01       	movw	r30, r8
 266:	80 81       	ld	r24, Z
 268:	91 81       	ldd	r25, Z+1	; 0x01
 26a:	7b d4       	rcall	.+2294   	; 0xb62 <uTimer>
 26c:	0c c0       	rjmp	.+24     	; 0x286 <moveStepper+0x11c>
			} else if (moveNum == 100){
 26e:	f4 e6       	ldi	r31, 0x64	; 100
 270:	ef 16       	cp	r14, r31
 272:	f1 04       	cpc	r15, r1
 274:	29 f4       	brne	.+10     	; 0x280 <moveStepper+0x116>
			//mTimer(15);
			uTimer(delayTable180[i]);
 276:	d8 01       	movw	r26, r16
 278:	8d 91       	ld	r24, X+
 27a:	9c 91       	ld	r25, X
 27c:	72 d4       	rcall	.+2276   	; 0xb62 <uTimer>
 27e:	03 c0       	rjmp	.+6      	; 0x286 <moveStepper+0x11c>
			} else {
			mTimer(20);
 280:	84 e1       	ldi	r24, 0x14	; 20
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	4e d4       	rcall	.+2204   	; 0xb22 <mTimer>
 286:	b2 e0       	ldi	r27, 0x02	; 2
 288:	8b 0e       	add	r8, r27
 28a:	91 1c       	adc	r9, r1
 28c:	0e 5f       	subi	r16, 0xFE	; 254
 28e:	1f 4f       	sbci	r17, 0xFF	; 255
		} else {
		static int backSteps[] = {2,3,0,1};
		ptr = backSteps;
		moveNum = -moveNum;
	}
	for(int i=0; i < moveNum; i++){
 290:	8a 14       	cp	r8, r10
 292:	9b 04       	cpc	r9, r11
 294:	09 f0       	breq	.+2      	; 0x298 <moveStepper+0x12e>
 296:	a1 cf       	rjmp	.-190    	; 0x1da <moveStepper+0x70>
			uTimer(delayTable180[i]);
			} else {
			mTimer(20);
		}
	}
	*stepNumInput = stepNum;
 298:	f3 01       	movw	r30, r6
 29a:	d1 83       	std	Z+1, r29	; 0x01
 29c:	c0 83       	st	Z, r28
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	1f 91       	pop	r17
 2a4:	0f 91       	pop	r16
 2a6:	ff 90       	pop	r15
 2a8:	ef 90       	pop	r14
 2aa:	df 90       	pop	r13
 2ac:	cf 90       	pop	r12
 2ae:	bf 90       	pop	r11
 2b0:	af 90       	pop	r10
 2b2:	9f 90       	pop	r9
 2b4:	8f 90       	pop	r8
 2b6:	7f 90       	pop	r7
 2b8:	6f 90       	pop	r6
 2ba:	08 95       	ret

000002bc <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 2bc:	87 b1       	in	r24, 0x07	; 7
 2be:	80 7f       	andi	r24, 0xF0	; 240
 2c0:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 2c2:	45 9a       	sbi	0x08, 5	; 8
	CLEAR_RS();		//Read status
 2c4:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	8a 95       	dec	r24
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <LCDBusyLoop+0xc>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <LCDBusyLoop+0x12>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
 2ce:	47 9a       	sbi	0x08, 7	; 8
 2d0:	92 e0       	ldi	r25, 0x02	; 2
 2d2:	9a 95       	dec	r25
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <LCDBusyLoop+0x16>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <LCDBusyLoop+0x1c>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
 2d8:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 2da:	82 95       	swap	r24
 2dc:	80 7f       	andi	r24, 0xF0	; 240
 2de:	92 e0       	ldi	r25, 0x02	; 2
 2e0:	9a 95       	dec	r25
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <LCDBusyLoop+0x24>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <LCDBusyLoop+0x2a>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
 2e6:	47 98       	cbi	0x08, 7	; 8
 2e8:	95 e0       	ldi	r25, 0x05	; 5
 2ea:	9a 95       	dec	r25
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <LCDBusyLoop+0x2e>
 2ee:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
 2f0:	47 9a       	sbi	0x08, 7	; 8
 2f2:	92 e0       	ldi	r25, 0x02	; 2
 2f4:	9a 95       	dec	r25
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <LCDBusyLoop+0x38>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <LCDBusyLoop+0x3e>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
 2fa:	96 b1       	in	r25, 0x06	; 6
 2fc:	92 e0       	ldi	r25, 0x02	; 2
 2fe:	9a 95       	dec	r25
 300:	f1 f7       	brne	.-4      	; 0x2fe <LCDBusyLoop+0x42>
 302:	00 c0       	rjmp	.+0      	; 0x304 <LCDBusyLoop+0x48>

		busy=status & 0b10000000;

		_delay_us(0.5);
		
		CLEAR_E();
 304:	47 98       	cbi	0x08, 7	; 8
 306:	95 e0       	ldi	r25, 0x05	; 5
 308:	9a 95       	dec	r25
 30a:	f1 f7       	brne	.-4      	; 0x308 <LCDBusyLoop+0x4c>
 30c:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
 30e:	88 23       	and	r24, r24
 310:	f4 f2       	brlt	.-68     	; 0x2ce <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 312:	45 98       	cbi	0x08, 5	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 314:	87 b1       	in	r24, 0x07	; 7
 316:	8f 60       	ori	r24, 0x0F	; 15
 318:	87 b9       	out	0x07, r24	; 7
 31a:	08 95       	ret

0000031c <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 31c:	28 2f       	mov	r18, r24
 31e:	22 95       	swap	r18
 320:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 322:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 324:	61 11       	cpse	r22, r1
 326:	02 c0       	rjmp	.+4      	; 0x32c <LCDByte+0x10>
	CLEAR_RS();
 328:	46 98       	cbi	0x08, 6	; 8
 32a:	01 c0       	rjmp	.+2      	; 0x32e <LCDByte+0x12>
else
	SET_RS();
 32c:	46 9a       	sbi	0x08, 6	; 8
 32e:	92 e0       	ldi	r25, 0x02	; 2
 330:	9a 95       	dec	r25
 332:	f1 f7       	brne	.-4      	; 0x330 <LCDByte+0x14>
 334:	00 c0       	rjmp	.+0      	; 0x336 <LCDByte+0x1a>

_delay_us(0.500);		//tAS


SET_E();
 336:	47 9a       	sbi	0x08, 7	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 338:	98 b1       	in	r25, 0x08	; 8
 33a:	90 7f       	andi	r25, 0xF0	; 240
 33c:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 33e:	98 b9       	out	0x08, r25	; 8
 340:	95 e0       	ldi	r25, 0x05	; 5
 342:	9a 95       	dec	r25
 344:	f1 f7       	brne	.-4      	; 0x342 <LCDByte+0x26>
 346:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
 348:	47 98       	cbi	0x08, 7	; 8
 34a:	95 e0       	ldi	r25, 0x05	; 5
 34c:	9a 95       	dec	r25
 34e:	f1 f7       	brne	.-4      	; 0x34c <LCDByte+0x30>
 350:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
 352:	47 9a       	sbi	0x08, 7	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 354:	98 b1       	in	r25, 0x08	; 8
 356:	90 7f       	andi	r25, 0xF0	; 240
 358:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 35a:	88 b9       	out	0x08, r24	; 8
 35c:	85 e0       	ldi	r24, 0x05	; 5
 35e:	8a 95       	dec	r24
 360:	f1 f7       	brne	.-4      	; 0x35e <LCDByte+0x42>
 362:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
 364:	47 98       	cbi	0x08, 7	; 8
 366:	95 e0       	ldi	r25, 0x05	; 5
 368:	9a 95       	dec	r25
 36a:	f1 f7       	brne	.-4      	; 0x368 <LCDByte+0x4c>
 36c:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
 36e:	a6 cf       	rjmp	.-180    	; 0x2bc <LCDBusyLoop>
 370:	08 95       	ret

00000372 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 372:	cf 93       	push	r28
 374:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 376:	2f ef       	ldi	r18, 0xFF	; 255
 378:	86 e7       	ldi	r24, 0x76	; 118
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	21 50       	subi	r18, 0x01	; 1
 37e:	80 40       	sbci	r24, 0x00	; 0
 380:	90 40       	sbci	r25, 0x00	; 0
 382:	e1 f7       	brne	.-8      	; 0x37c <InitLCD+0xa>
 384:	00 c0       	rjmp	.+0      	; 0x386 <InitLCD+0x14>
 386:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 388:	87 b1       	in	r24, 0x07	; 7
 38a:	8f 60       	ori	r24, 0x0F	; 15
 38c:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 38e:	3f 9a       	sbi	0x07, 7	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 390:	3e 9a       	sbi	0x07, 6	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 392:	3d 9a       	sbi	0x07, 5	; 7

	LCD_DATA_PORT&=0XF0;
 394:	88 b1       	in	r24, 0x08	; 8
 396:	80 7f       	andi	r24, 0xF0	; 240
 398:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 39a:	47 98       	cbi	0x08, 7	; 8
	CLEAR_RW();
 39c:	45 98       	cbi	0x08, 5	; 8
	CLEAR_RS();
 39e:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <InitLCD+0x30>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <InitLCD+0x32>
 3a4:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
 3a6:	47 9a       	sbi	0x08, 7	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 3a8:	41 9a       	sbi	0x08, 1	; 8
 3aa:	25 e0       	ldi	r18, 0x05	; 5
 3ac:	2a 95       	dec	r18
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <InitLCD+0x3a>
 3b0:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
 3b2:	47 98       	cbi	0x08, 7	; 8
 3b4:	85 e0       	ldi	r24, 0x05	; 5
 3b6:	8a 95       	dec	r24
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <InitLCD+0x44>
 3ba:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 3bc:	7f df       	rcall	.-258    	; 0x2bc <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	8c 2f       	mov	r24, r28
 3c2:	8c 60       	ori	r24, 0x0C	; 12
 3c4:	ab df       	rcall	.-170    	; 0x31c <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	88 e2       	ldi	r24, 0x28	; 40
 3ca:	a8 df       	rcall	.-176    	; 0x31c <LCDByte>
}
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 3d6:	88 81       	ld	r24, Y
 3d8:	88 23       	and	r24, r24
 3da:	31 f0       	breq	.+12     	; 0x3e8 <LCDWriteString+0x18>
 3dc:	21 96       	adiw	r28, 0x01	; 1
 {
	LCDData(*msg);
 3de:	61 e0       	ldi	r22, 0x01	; 1
 3e0:	9d df       	rcall	.-198    	; 0x31c <LCDByte>
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 3e2:	89 91       	ld	r24, Y+
 3e4:	81 11       	cpse	r24, r1
 3e6:	fb cf       	rjmp	.-10     	; 0x3de <LCDWriteString+0xe>
 {
	LCDData(*msg);
	msg++;
 }
}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	08 95       	ret

000003ee <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 3ee:	ef 92       	push	r14
 3f0:	ff 92       	push	r15
 3f2:	0f 93       	push	r16
 3f4:	1f 93       	push	r17
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	00 d0       	rcall	.+0      	; 0x3fc <LCDWriteInt+0xe>
 3fc:	1f 92       	push	r1
 3fe:	1f 92       	push	r1
 400:	cd b7       	in	r28, 0x3d	; 61
 402:	de b7       	in	r29, 0x3e	; 62
 404:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 406:	fe 01       	movw	r30, r28
 408:	31 96       	adiw	r30, 0x01	; 1
 40a:	25 e0       	ldi	r18, 0x05	; 5
 40c:	df 01       	movw	r26, r30
 40e:	1d 92       	st	X+, r1
 410:	2a 95       	dec	r18
 412:	e9 f7       	brne	.-6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	int i=4,j=0;
	while(val)
 414:	00 97       	sbiw	r24, 0x00	; 0
 416:	51 f0       	breq	.+20     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 418:	35 96       	adiw	r30, 0x05	; 5
	{
	str[i]=val%10;
 41a:	2a e0       	ldi	r18, 0x0A	; 10
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	b9 01       	movw	r22, r18
 420:	af d3       	rcall	.+1886   	; 0xb80 <__divmodhi4>
 422:	82 93       	st	-Z, r24
	val=val/10;
 424:	86 2f       	mov	r24, r22
 426:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 428:	00 97       	sbiw	r24, 0x00	; 0
 42a:	c9 f7       	brne	.-14     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 42c:	bf ef       	ldi	r27, 0xFF	; 255
 42e:	eb 16       	cp	r14, r27
 430:	fb 06       	cpc	r15, r27
 432:	69 f4       	brne	.+26     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		while(str[j]==0) j++;
 434:	89 81       	ldd	r24, Y+1	; 0x01
 436:	81 11       	cpse	r24, r1
 438:	1d c0       	rjmp	.+58     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 43a:	fe 01       	movw	r30, r28
 43c:	32 96       	adiw	r30, 0x02	; 2
 43e:	00 e0       	ldi	r16, 0x00	; 0
 440:	10 e0       	ldi	r17, 0x00	; 0
 442:	0f 5f       	subi	r16, 0xFF	; 255
 444:	1f 4f       	sbci	r17, 0xFF	; 255
 446:	81 91       	ld	r24, Z+
 448:	88 23       	and	r24, r24
 44a:	d9 f3       	breq	.-10     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 44c:	0f c0       	rjmp	.+30     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	else
		j=5-field_length;
 44e:	05 e0       	ldi	r16, 0x05	; 5
 450:	10 e0       	ldi	r17, 0x00	; 0
 452:	0e 19       	sub	r16, r14
 454:	1f 09       	sbc	r17, r15
 456:	0a c0       	rjmp	.+20     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 458:	f8 01       	movw	r30, r16
 45a:	81 91       	ld	r24, Z+
 45c:	8f 01       	movw	r16, r30
 45e:	61 e0       	ldi	r22, 0x01	; 1
 460:	80 5d       	subi	r24, 0xD0	; 208
 462:	5c df       	rcall	.-328    	; 0x31c <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 464:	0e 15       	cp	r16, r14
 466:	1f 05       	cpc	r17, r15
 468:	b9 f7       	brne	.-18     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 46a:	11 c0       	rjmp	.+34     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 46c:	05 30       	cpi	r16, 0x05	; 5
 46e:	11 05       	cpc	r17, r1
 470:	1c f0       	brlt	.+6      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 472:	0d c0       	rjmp	.+26     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
 474:	00 e0       	ldi	r16, 0x00	; 0
 476:	10 e0       	ldi	r17, 0x00	; 0
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	8c 0f       	add	r24, r28
 47e:	9d 1f       	adc	r25, r29
 480:	08 0f       	add	r16, r24
 482:	19 1f       	adc	r17, r25
 484:	7e 01       	movw	r14, r28
 486:	96 e0       	ldi	r25, 0x06	; 6
 488:	e9 0e       	add	r14, r25
 48a:	f1 1c       	adc	r15, r1
 48c:	e5 cf       	rjmp	.-54     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
 48e:	0f 90       	pop	r0
 490:	0f 90       	pop	r0
 492:	0f 90       	pop	r0
 494:	0f 90       	pop	r0
 496:	0f 90       	pop	r0
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	1f 91       	pop	r17
 49e:	0f 91       	pop	r16
 4a0:	ff 90       	pop	r15
 4a2:	ef 90       	pop	r14
 4a4:	08 95       	ret

000004a6 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 4a6:	88 32       	cpi	r24, 0x28	; 40
 4a8:	28 f4       	brcc	.+10     	; 0x4b4 <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
 4aa:	61 11       	cpse	r22, r1
 4ac:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	80 68       	ori	r24, 0x80	; 128
 4b2:	34 cf       	rjmp	.-408    	; 0x31c <LCDByte>
 4b4:	08 95       	ret

000004b6 <setup>:
* DESC: initializes the linked queue to 'NULL' status
* INPUT: the head and tail pointers by reference
*/

void setup(link **h,link **t){
	*h = NULL;		/* Point the head to NOTHING (NULL) */
 4b6:	fc 01       	movw	r30, r24
 4b8:	11 82       	std	Z+1, r1	; 0x01
 4ba:	10 82       	st	Z, r1
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
 4bc:	fb 01       	movw	r30, r22
 4be:	11 82       	std	Z+1, r1	; 0x01
 4c0:	10 82       	st	Z, r1
 4c2:	08 95       	ret

000004c4 <initLink>:

	/**************************************************************************************
	* DESC: This initializes a link and returns the pointer to the new link or NULL if error
	* INPUT: the head and tail pointers by reference
	*/
	void initLink(link **newLink){
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	ec 01       	movw	r28, r24
		//link *l;
		*newLink = malloc(sizeof(link));
 4ca:	84 e0       	ldi	r24, 0x04	; 4
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	7f d3       	rcall	.+1790   	; 0xbce <malloc>
 4d0:	99 83       	std	Y+1, r25	; 0x01
 4d2:	88 83       	st	Y, r24
		(*newLink)->next = NULL;
 4d4:	fc 01       	movw	r30, r24
 4d6:	13 82       	std	Z+3, r1	; 0x03
 4d8:	12 82       	std	Z+2, r1	; 0x02
		return;
		}/*initLink*/
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	08 95       	ret

000004e0 <enqueue>:
*  of the queue accordingly
*  INPUT: the head and tail pointers, and a pointer to the new link that was created
*/
/* will put an item at the tail of the queue */
void enqueue(link **h, link **t, link **nL){
	if (*t != NULL){
 4e0:	db 01       	movw	r26, r22
 4e2:	ed 91       	ld	r30, X+
 4e4:	fc 91       	ld	r31, X
 4e6:	30 97       	sbiw	r30, 0x00	; 0
 4e8:	61 f0       	breq	.+24     	; 0x502 <enqueue+0x22>
		/* Not an empty queue */
		(*t)->next = *nL;
 4ea:	da 01       	movw	r26, r20
 4ec:	8d 91       	ld	r24, X+
 4ee:	9c 91       	ld	r25, X
 4f0:	11 97       	sbiw	r26, 0x01	; 1
 4f2:	93 83       	std	Z+3, r25	; 0x03
 4f4:	82 83       	std	Z+2, r24	; 0x02
		*t = *nL; //(*t)->next;
 4f6:	8d 91       	ld	r24, X+
 4f8:	9c 91       	ld	r25, X
 4fa:	fb 01       	movw	r30, r22
 4fc:	91 83       	std	Z+1, r25	; 0x01
 4fe:	80 83       	st	Z, r24
 500:	08 95       	ret
		}/*if*/
	else{
		/* It's an empty Queue */
		//(*h)->next = *nL;
		//should be this
		*h = *nL;
 502:	da 01       	movw	r26, r20
 504:	2d 91       	ld	r18, X+
 506:	3c 91       	ld	r19, X
 508:	11 97       	sbiw	r26, 0x01	; 1
 50a:	fc 01       	movw	r30, r24
 50c:	31 83       	std	Z+1, r19	; 0x01
 50e:	20 83       	st	Z, r18
		*t = *nL;
 510:	8d 91       	ld	r24, X+
 512:	9c 91       	ld	r25, X
 514:	db 01       	movw	r26, r22
 516:	8d 93       	st	X+, r24
 518:	9c 93       	st	X, r25
 51a:	08 95       	ret

0000051c <dequeue>:
* DESC : Removes the link from the head of the list and assigns it to deQueuedLink
* INPUT: The head and tail pointers, and a ptr 'deQueuedLink'
* 		 which the removed link will be assigned to
*/
/* This will remove the link and element within the link from the head of the queue */
void dequeue(link **h, link **t, link **deQueuedLink) {
 51c:	fc 01       	movw	r30, r24
	*deQueuedLink = *h;  // Assign the head to deQueuedLink
 51e:	80 81       	ld	r24, Z
 520:	91 81       	ldd	r25, Z+1	; 0x01
 522:	da 01       	movw	r26, r20
 524:	8d 93       	st	X+, r24
 526:	9c 93       	st	X, r25
	if (*h != NULL) {    // Ensure it's not an empty queue
 528:	a0 81       	ld	r26, Z
 52a:	b1 81       	ldd	r27, Z+1	; 0x01
 52c:	10 97       	sbiw	r26, 0x00	; 0
 52e:	59 f0       	breq	.+22     	; 0x546 <dequeue+0x2a>
		*h = (*h)->next; // Move the head to the next link
 530:	12 96       	adiw	r26, 0x02	; 2
 532:	8d 91       	ld	r24, X+
 534:	9c 91       	ld	r25, X
 536:	13 97       	sbiw	r26, 0x03	; 3
 538:	91 83       	std	Z+1, r25	; 0x01
 53a:	80 83       	st	Z, r24
		if (*h == NULL) { // If the queue is now empty
 53c:	89 2b       	or	r24, r25
 53e:	19 f4       	brne	.+6      	; 0x546 <dequeue+0x2a>
			*t = NULL;    // Update the tail to NULL
 540:	fb 01       	movw	r30, r22
 542:	11 82       	std	Z+1, r1	; 0x01
 544:	10 82       	st	Z, r1
 546:	08 95       	ret

00000548 <main>:
	FE = 3
};

volatile char rampDown = 0;//rampDown flag

int main() {
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	cd b7       	in	r28, 0x3d	; 61
 54e:	de b7       	in	r29, 0x3e	; 62
 550:	2a 97       	sbiw	r28, 0x0a	; 10
 552:	0f b6       	in	r0, 0x3f	; 63
 554:	f8 94       	cli
 556:	de bf       	out	0x3e, r29	; 62
 558:	0f be       	out	0x3f, r0	; 63
 55a:	cd bf       	out	0x3d, r28	; 61
	int stepNum;
	timer8MHz();//setup the chip clock to 8 MHz
 55c:	d8 d2       	rcall	.+1456   	; 0xb0e <timer8MHz>
	DDRL = 0xFF;//sets debug lights to output
 55e:	8f ef       	ldi	r24, 0xFF	; 255
 560:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	DDRA = 0xFF;//stepper output
 564:	81 b9       	out	0x01, r24	; 1
	DDRB = 0x03;//sets B0-B1 to output
 566:	83 e0       	ldi	r24, 0x03	; 3
 568:	84 b9       	out	0x04, r24	; 4
	DDRE = 0x00;//all E pins on input
	
	//Initialize LCD module
	InitLCD(LS_BLINK|LS_ULINE);
 56a:	1d b8       	out	0x0d, r1	; 13
 56c:	02 df       	rcall	.-508    	; 0x372 <InitLCD>

	//Clear the screen
	LCDClear();
 56e:	60 e0       	ldi	r22, 0x00	; 0
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	d4 de       	rcall	.-600    	; 0x31c <LCDByte>
	LCDWriteString("Program Setup");
 574:	8c e4       	ldi	r24, 0x4C	; 76
 576:	93 e0       	ldi	r25, 0x03	; 3
 578:	2b df       	rcall	.-426    	; 0x3d0 <LCDWriteString>
	mTimer(500);
 57a:	84 ef       	ldi	r24, 0xF4	; 244
 57c:	91 e0       	ldi	r25, 0x01	; 1
 57e:	d1 d2       	rcall	.+1442   	; 0xb22 <mTimer>
 580:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <motorState>
	PORTB = motorState;
 584:	85 b9       	out	0x05, r24	; 5
 586:	f8 94       	cli
	
	cli(); // disable all of the interrupt ==================================
 588:	8d b3       	in	r24, 0x1d	; 29

	// config the external interrupt ========================================
	EIMSK |= (1 << INT0) | (1 << INT1) | (1 << INT2) | (1 << INT5);                                     // enable INT0-INT2 and INT5
 58a:	87 62       	ori	r24, 0x27	; 39
 58c:	8d bb       	out	0x1d, r24	; 29
 58e:	e9 e6       	ldi	r30, 0x69	; 105
	EICRA |= (1 << ISC21) | (1 << ISC20) | (1 << ISC11) | (1 << ISC10) | (1 << ISC01);                  // rising edge interrupt for INT1-INT2, falling edge for INT0
 590:	f0 e0       	ldi	r31, 0x00	; 0
 592:	80 81       	ld	r24, Z
 594:	8e 63       	ori	r24, 0x3E	; 62
 596:	80 83       	st	Z, r24
 598:	ea e6       	ldi	r30, 0x6A	; 106
	EICRB |= (1 << ISC50);			     					                                            // rising edge for INT5
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	80 81       	ld	r24, Z
 59e:	84 60       	ori	r24, 0x04	; 4
 5a0:	80 83       	st	Z, r24
 5a2:	ea e7       	ldi	r30, 0x7A	; 122

	// config ADC ===========================================================
	// by default, the ADC input (analog input) is set to ADC0 / PORTF0
	ADCSRA |= (1 << ADEN);                       // enable ADC
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	80 81       	ld	r24, Z
 5a8:	80 68       	ori	r24, 0x80	; 128
 5aa:	80 83       	st	Z, r24
 5ac:	80 81       	ld	r24, Z
	ADCSRA |= (1 << ADIE);                       // enable interrupt of ADC
 5ae:	88 60       	ori	r24, 0x08	; 8
 5b0:	80 83       	st	Z, r24
 5b2:	ec e7       	ldi	r30, 0x7C	; 124
	ADMUX  |= (1 << REFS0);						 //AVCC with external capacitor at AREF pin
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	80 64       	ori	r24, 0x40	; 64
 5ba:	80 83       	st	Z, r24
	
	// sets the Global Enable for all interrupts ============================
	sei();
 5bc:	78 94       	sei
	
	//stepper initialization.
	LCDClear();
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	ac de       	rcall	.-680    	; 0x31c <LCDByte>
 5c4:	af dd       	rcall	.-1186   	; 0x124 <homeMotor>
	
	stepNum = homeMotor();
 5c6:	9a 83       	std	Y+2, r25	; 0x02
 5c8:	89 83       	std	Y+1, r24	; 0x01
 5ca:	fc 01       	movw	r30, r24
 5cc:	e8 5b       	subi	r30, 0xB8	; 184
	PORTA = motorSteps[stepNum];
 5ce:	fc 4f       	sbci	r31, 0xFC	; 252
 5d0:	80 81       	ld	r24, Z
 5d2:	82 b9       	out	0x02, r24	; 2
 5d4:	be 01       	movw	r22, r28
	link *head;			/* The ptr to the head of the queue */
	link *tail;			/* The ptr to the tail of the queue */
	link *newLink;		/* A ptr to a link aggregate data type (struct) */
	link *rtnLink;		/* same as the above */
	
	setup(&head,&tail);//sets up linked list
 5d6:	6b 5f       	subi	r22, 0xFB	; 251
 5d8:	7f 4f       	sbci	r23, 0xFF	; 255
 5da:	ce 01       	movw	r24, r28
 5dc:	03 96       	adiw	r24, 0x03	; 3
 5de:	6b df       	rcall	.-298    	; 0x4b6 <setup>
 5e0:	1a 86       	std	Y+10, r1	; 0x0a

	rtnLink = NULL;
 5e2:	19 86       	std	Y+9, r1	; 0x09
	newLink = NULL;
 5e4:	18 86       	std	Y+8, r1	; 0x08
 5e6:	1f 82       	std	Y+7, r1	; 0x07
	
	STATE = 0;
 5e8:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <STATE>
	//pwm setup to 40% duty cycle
	pwm();
 5ec:	7b d2       	rcall	.+1270   	; 0xae4 <pwm>
 5ee:	8f e7       	ldi	r24, 0x7F	; 127
	pwmSet(127);
 5f0:	8c d2       	rcall	.+1304   	; 0xb0a <pwmSet>
 5f2:	82 e0       	ldi	r24, 0x02	; 2
 5f4:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <motorState>
	motorState = 0x02;
 5f8:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <motorState>
	PORTB |= motorState;
 5fc:	85 b1       	in	r24, 0x05	; 5
 5fe:	89 2b       	or	r24, r25
 600:	85 b9       	out	0x05, r24	; 5
 602:	0f 2e       	mov	r0, r31
 604:	f3 e0       	ldi	r31, 0x03	; 3
	goto POLLING_STAGE;

	// POLLING STATE
	POLLING_STAGE:
	if((rampDown == 1) && (tail == NULL)){
		STATE = 3;
 606:	3f 2e       	mov	r3, r31
 608:	f0 2d       	mov	r31, r0
 60a:	a3 2c       	mov	r10, r3
 60c:	0f 2e       	mov	r0, r31
 60e:	fb e0       	ldi	r31, 0x0B	; 11
		} //do nothing if an ADC convert is in progress
		goto POLLING_STAGE;
	}
	BUCKET_STAGE:
	{
		PORTL = (1 << PINL5);
 610:	ef 2e       	mov	r14, r31
 612:	ff 24       	eor	r15, r15
 614:	f3 94       	inc	r15
 616:	f0 2d       	mov	r31, r0
 618:	68 94       	set
 61a:	bb 24       	eor	r11, r11
 61c:	b5 f8       	bld	r11, 5
 61e:	0f 2e       	mov	r0, r31
 620:	f9 e9       	ldi	r31, 0x99	; 153
			} else if (ADC_result > material_types[2]) {
			material = FE;
			} else {
			material = AL;
		}
		sorted_items[material]++;
 622:	cf 2e       	mov	r12, r31
 624:	f3 e0       	ldi	r31, 0x03	; 3
 626:	df 2e       	mov	r13, r31
 628:	f0 2d       	mov	r31, r0
 62a:	0f 2e       	mov	r0, r31
 62c:	44 24       	eor	r4, r4
		LCDWriteInt(sorted_items[1],2);
		LCDGotoXY(6,1);
		LCDWriteInt(sorted_items[2],2);
		LCDGotoXY(9,1);
		LCDWriteInt(sorted_items[3],2);
		ADC_result = 1023;//reset ADC
 62e:	4a 94       	dec	r4
 630:	f3 e0       	ldi	r31, 0x03	; 3
 632:	5f 2e       	mov	r5, r31
 634:	f0 2d       	mov	r31, r0
 636:	61 2c       	mov	r6, r1
 638:	71 2c       	mov	r7, r1
		400 /*steel/aluminum boundary*/};
		LCDGotoXY(12,0);
		LCDWriteInt(ADC_result,3);
		int material;
		if(ADC_result > material_types[0]){
			material = BLACK;
 63a:	0f 2e       	mov	r0, r31
 63c:	fa e7       	ldi	r31, 0x7A	; 122
	REFLECTIVE_STAGE:
	{
		PORTL = (1 << PINL6);//debug light to show we're in the reflective stage
		if(ADC_result_flag == 1){
			ADC_result_flag = 0;
			ADCSRA |= (1 << ADSC);//start a new ADC convert if last one is done
 63e:	8f 2e       	mov	r8, r31
 640:	91 2c       	mov	r9, r1
 642:	f0 2d       	mov	r31, r0
 644:	2d 81       	ldd	r18, Y+5	; 0x05
 646:	3e 81       	ldd	r19, Y+6	; 0x06

	goto POLLING_STAGE;

	// POLLING STATE
	POLLING_STAGE:
	if((rampDown == 1) && (tail == NULL)){
 648:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <__data_end>
 64c:	81 30       	cpi	r24, 0x01	; 1
 64e:	29 f4       	brne	.+10     	; 0x65a <main+0x112>
 650:	21 15       	cp	r18, r1
 652:	31 05       	cpc	r19, r1
 654:	11 f4       	brne	.+4      	; 0x65a <main+0x112>
 656:	a0 92 42 03 	sts	0x0342, r10	; 0x800342 <STATE>
		STATE = 3;
 65a:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <STATE>
	}
	switch(STATE){
 65e:	82 30       	cpi	r24, 0x02	; 2
 660:	19 f1       	breq	.+70     	; 0x6a8 <main+0x160>
 662:	28 f4       	brcc	.+10     	; 0x66e <main+0x126>
 664:	88 23       	and	r24, r24
 666:	51 f0       	breq	.+20     	; 0x67c <main+0x134>
 668:	81 30       	cpi	r24, 0x01	; 1
 66a:	61 f0       	breq	.+24     	; 0x684 <main+0x13c>
 66c:	ed cf       	rjmp	.-38     	; 0x648 <main+0x100>
 66e:	83 30       	cpi	r24, 0x03	; 3
 670:	09 f4       	brne	.+2      	; 0x674 <main+0x12c>
 672:	70 c0       	rjmp	.+224    	; 0x754 <main+0x20c>
 674:	84 30       	cpi	r24, 0x04	; 4
 676:	09 f4       	brne	.+2      	; 0x67a <main+0x132>
 678:	b1 c0       	rjmp	.+354    	; 0x7dc <main+0x294>
 67a:	e6 cf       	rjmp	.-52     	; 0x648 <main+0x100>
 67c:	80 e8       	ldi	r24, 0x80	; 128
 67e:	f7 01       	movw	r30, r14
		case (0) :
		PORTL = (1 << PINL7);   //shows what stage we are in
 680:	80 83       	st	Z, r24
 682:	e0 cf       	rjmp	.-64     	; 0x644 <main+0xfc>
 684:	80 e4       	ldi	r24, 0x40	; 64
		goto POLLING_STAGE;
 686:	f7 01       	movw	r30, r14
		goto POLLING_STAGE;
	}//switch STATE

	REFLECTIVE_STAGE:
	{
		PORTL = (1 << PINL6);//debug light to show we're in the reflective stage
 688:	80 83       	st	Z, r24
 68a:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <ADC_result_flag>
		if(ADC_result_flag == 1){
 68e:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <ADC_result_flag+0x1>
 692:	01 97       	sbiw	r24, 0x01	; 1
 694:	b9 f6       	brne	.-82     	; 0x644 <main+0xfc>
 696:	70 92 45 03 	sts	0x0345, r7	; 0x800345 <ADC_result_flag+0x1>
			ADC_result_flag = 0;
 69a:	60 92 44 03 	sts	0x0344, r6	; 0x800344 <ADC_result_flag>
 69e:	f4 01       	movw	r30, r8
 6a0:	80 81       	ld	r24, Z
			ADCSRA |= (1 << ADSC);//start a new ADC convert if last one is done
 6a2:	80 64       	ori	r24, 0x40	; 64
 6a4:	80 83       	st	Z, r24
 6a6:	ce cf       	rjmp	.-100    	; 0x644 <main+0xfc>
 6a8:	f7 01       	movw	r30, r14
 6aa:	b0 82       	st	Z, r11
		} //do nothing if an ADC convert is in progress
		goto POLLING_STAGE;
	}
	BUCKET_STAGE:
	{
		PORTL = (1 << PINL5);
 6ac:	ae 01       	movw	r20, r28
		dequeue(&head,&tail,&rtnLink);
 6ae:	47 5f       	subi	r20, 0xF7	; 247
 6b0:	5f 4f       	sbci	r21, 0xFF	; 255
 6b2:	be 01       	movw	r22, r28
 6b4:	6b 5f       	subi	r22, 0xFB	; 251
 6b6:	7f 4f       	sbci	r23, 0xFF	; 255
 6b8:	ce 01       	movw	r24, r28
 6ba:	03 96       	adiw	r24, 0x03	; 3
 6bc:	2f df       	rcall	.-418    	; 0x51c <dequeue>
 6be:	e0 91 97 03 	lds	r30, 0x0397	; 0x800397 <sorterbin>
		//if item is in same bin don't move motor
		if((binMovements[sorterbin][rtnLink->e.number])){
 6c2:	f0 91 98 03 	lds	r31, 0x0398	; 0x800398 <sorterbin+0x1>
 6c6:	a9 85       	ldd	r26, Y+9	; 0x09
 6c8:	ba 85       	ldd	r27, Y+10	; 0x0a
 6ca:	ee 0f       	add	r30, r30
 6cc:	ff 1f       	adc	r31, r31
 6ce:	ee 0f       	add	r30, r30
 6d0:	ff 1f       	adc	r31, r31
 6d2:	8d 91       	ld	r24, X+
 6d4:	9c 91       	ld	r25, X
 6d6:	e8 0f       	add	r30, r24
 6d8:	f9 1f       	adc	r31, r25
 6da:	ee 0f       	add	r30, r30
 6dc:	ff 1f       	adc	r31, r31
 6de:	eb 58       	subi	r30, 0x8B	; 139
 6e0:	fc 4f       	sbci	r31, 0xFC	; 252
 6e2:	80 81       	ld	r24, Z
 6e4:	91 81       	ldd	r25, Z+1	; 0x01
 6e6:	89 2b       	or	r24, r25
 6e8:	41 f1       	breq	.+80     	; 0x73a <main+0x1f2>
 6ea:	a0 92 43 03 	sts	0x0343, r10	; 0x800343 <motorState>
			motorState = 0x03;//stop motor
 6ee:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <motorState>
			PORTB = (motorState & 0x03);
 6f2:	83 70       	andi	r24, 0x03	; 3
 6f4:	85 b9       	out	0x05, r24	; 5
 6f6:	f7 01       	movw	r30, r14
 6f8:	10 82       	st	Z, r1
			//motorState = 0x03;//stop motor
			//PORTB = (motorState & 0x03);
			PORTL = 0x00;
 6fa:	e0 91 97 03 	lds	r30, 0x0397	; 0x800397 <sorterbin>
			moveStepper(binMovements[sorterbin][rtnLink->e.number],&stepNum);
 6fe:	f0 91 98 03 	lds	r31, 0x0398	; 0x800398 <sorterbin+0x1>
 702:	a9 85       	ldd	r26, Y+9	; 0x09
 704:	ba 85       	ldd	r27, Y+10	; 0x0a
 706:	ee 0f       	add	r30, r30
 708:	ff 1f       	adc	r31, r31
 70a:	ee 0f       	add	r30, r30
 70c:	ff 1f       	adc	r31, r31
 70e:	8d 91       	ld	r24, X+
 710:	9c 91       	ld	r25, X
 712:	e8 0f       	add	r30, r24
 714:	f9 1f       	adc	r31, r25
 716:	ee 0f       	add	r30, r30
 718:	ff 1f       	adc	r31, r31
 71a:	eb 58       	subi	r30, 0x8B	; 139
 71c:	fc 4f       	sbci	r31, 0xFC	; 252
 71e:	be 01       	movw	r22, r28
 720:	6f 5f       	subi	r22, 0xFF	; 255
 722:	7f 4f       	sbci	r23, 0xFF	; 255
 724:	80 81       	ld	r24, Z
 726:	91 81       	ldd	r25, Z+1	; 0x01
 728:	20 dd       	rcall	.-1472   	; 0x16a <moveStepper>
 72a:	e9 85       	ldd	r30, Y+9	; 0x09
			sorterbin = rtnLink->e.number;
 72c:	fa 85       	ldd	r31, Y+10	; 0x0a
 72e:	80 81       	ld	r24, Z
 730:	91 81       	ldd	r25, Z+1	; 0x01
 732:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <sorterbin+0x1>
 736:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <sorterbin>
 73a:	89 85       	ldd	r24, Y+9	; 0x09
			// Reset the counter to 195 for another ~200 ms cycle
		}
		free(rtnLink);
 73c:	9a 85       	ldd	r25, Y+10	; 0x0a
 73e:	df d2       	rcall	.+1470   	; 0xcfe <free>
 740:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <STATE>
		//Reset the state variable
		STATE = 0;
 744:	82 e0       	ldi	r24, 0x02	; 2
		motorState = 0x02;
 746:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <motorState>
 74a:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <motorState>
		PORTB = motorState & 0x03;
 74e:	83 70       	andi	r24, 0x03	; 3
 750:	85 b9       	out	0x05, r24	; 5
 752:	78 cf       	rjmp	.-272    	; 0x644 <main+0xfc>
		goto POLLING_STAGE;
 754:	08 e8       	ldi	r16, 0x88	; 136
	// POLLING STATE
	POLLING_STAGE:
	if((rampDown == 1) && (tail == NULL)){
		STATE = 3;
	}
	switch(STATE){
 756:	13 e1       	ldi	r17, 0x13	; 19
 758:	81 e0       	ldi	r24, 0x01	; 1
	}
	END:
	{
		//waits 5 seconds to make sure belt is clear
		for(int i = 0; i < 5000; i++){
			mTimer(1);
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	e2 d1       	rcall	.+964    	; 0xb22 <mTimer>
 75e:	8d 81       	ldd	r24, Y+5	; 0x05
			if(!(tail == NULL)){
 760:	9e 81       	ldd	r25, Y+6	; 0x06
 762:	89 2b       	or	r24, r25
 764:	19 f0       	breq	.+6      	; 0x76c <main+0x224>
				STATE = 0;
 766:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <STATE>
				goto POLLING_STAGE;
 76a:	6c cf       	rjmp	.-296    	; 0x644 <main+0xfc>
 76c:	01 50       	subi	r16, 0x01	; 1
		goto POLLING_STAGE;
	}
	END:
	{
		//waits 5 seconds to make sure belt is clear
		for(int i = 0; i < 5000; i++){
 76e:	11 09       	sbc	r17, r1
			if(!(tail == NULL)){
				STATE = 0;
				goto POLLING_STAGE;
			}
		}
		LCDGotoXY(0,0);
 770:	99 f7       	brne	.-26     	; 0x758 <main+0x210>
 772:	60 e0       	ldi	r22, 0x00	; 0
 774:	80 e0       	ldi	r24, 0x00	; 0
		LCDWriteString("BL AL WI FE");
 776:	97 de       	rcall	.-722    	; 0x4a6 <LCDGotoXY>
 778:	8a e5       	ldi	r24, 0x5A	; 90
 77a:	93 e0       	ldi	r25, 0x03	; 3
		LCDGotoXY(0,1);
 77c:	29 de       	rcall	.-942    	; 0x3d0 <LCDWriteString>
 77e:	61 e0       	ldi	r22, 0x01	; 1
 780:	80 e0       	ldi	r24, 0x00	; 0
		LCDWriteInt(sorted_items[0],2);
 782:	91 de       	rcall	.-734    	; 0x4a6 <LCDGotoXY>
 784:	09 e9       	ldi	r16, 0x99	; 153
 786:	13 e0       	ldi	r17, 0x03	; 3
 788:	f8 01       	movw	r30, r16
 78a:	80 81       	ld	r24, Z
 78c:	62 e0       	ldi	r22, 0x02	; 2
 78e:	70 e0       	ldi	r23, 0x00	; 0
 790:	90 e0       	ldi	r25, 0x00	; 0
		LCDGotoXY(3,1);
 792:	2d de       	rcall	.-934    	; 0x3ee <LCDWriteInt>
 794:	61 e0       	ldi	r22, 0x01	; 1
 796:	83 e0       	ldi	r24, 0x03	; 3
		LCDWriteInt(sorted_items[1],2);
 798:	86 de       	rcall	.-756    	; 0x4a6 <LCDGotoXY>
 79a:	f8 01       	movw	r30, r16
 79c:	81 81       	ldd	r24, Z+1	; 0x01
 79e:	62 e0       	ldi	r22, 0x02	; 2
 7a0:	70 e0       	ldi	r23, 0x00	; 0
 7a2:	90 e0       	ldi	r25, 0x00	; 0
		LCDGotoXY(6,1);
 7a4:	24 de       	rcall	.-952    	; 0x3ee <LCDWriteInt>
 7a6:	61 e0       	ldi	r22, 0x01	; 1
 7a8:	86 e0       	ldi	r24, 0x06	; 6
 7aa:	7d de       	rcall	.-774    	; 0x4a6 <LCDGotoXY>
		LCDWriteInt(sorted_items[2],2);
 7ac:	f8 01       	movw	r30, r16
 7ae:	82 81       	ldd	r24, Z+2	; 0x02
 7b0:	62 e0       	ldi	r22, 0x02	; 2
 7b2:	70 e0       	ldi	r23, 0x00	; 0
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	1b de       	rcall	.-970    	; 0x3ee <LCDWriteInt>
 7b8:	61 e0       	ldi	r22, 0x01	; 1
		LCDGotoXY(9,1);
 7ba:	89 e0       	ldi	r24, 0x09	; 9
 7bc:	74 de       	rcall	.-792    	; 0x4a6 <LCDGotoXY>
 7be:	f8 01       	movw	r30, r16
		LCDWriteInt(sorted_items[3],2);
 7c0:	83 81       	ldd	r24, Z+3	; 0x03
 7c2:	62 e0       	ldi	r22, 0x02	; 2
 7c4:	70 e0       	ldi	r23, 0x00	; 0
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	12 de       	rcall	.-988    	; 0x3ee <LCDWriteInt>
 7ca:	83 e0       	ldi	r24, 0x03	; 3
		motorState = 0x03;
 7cc:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <motorState>
 7d0:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <motorState>
		PORTB = (motorState & 0x03);
 7d4:	83 70       	andi	r24, 0x03	; 3
 7d6:	85 b9       	out	0x05, r24	; 5
 7d8:	f8 94       	cli
		while(1){
			cli();
 7da:	fe cf       	rjmp	.-4      	; 0x7d8 <main+0x290>
 7dc:	f7 01       	movw	r30, r14
		}
	}
	
	ENQUEUE:
	{
		PORTL = (1 << PINL5);
 7de:	b0 82       	st	Z, r11
 7e0:	60 e0       	ldi	r22, 0x00	; 0
		LCDClear();
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	9b dd       	rcall	.-1226   	; 0x31c <LCDByte>
 7e6:	60 e0       	ldi	r22, 0x00	; 0
 7e8:	8c e0       	ldi	r24, 0x0C	; 12
		//Highest ADC Values for white, FE and AL
		uint16_t material_types[] = {940, /*Black derlin low limit*/
			800, //white delrin/steel boundary
		400 /*steel/aluminum boundary*/};
		LCDGotoXY(12,0);
 7ea:	5d de       	rcall	.-838    	; 0x4a6 <LCDGotoXY>
 7ec:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <ADC_result>
 7f0:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <ADC_result+0x1>
		LCDWriteInt(ADC_result,3);
 7f4:	63 e0       	ldi	r22, 0x03	; 3
 7f6:	70 e0       	ldi	r23, 0x00	; 0
 7f8:	fa dd       	rcall	.-1036   	; 0x3ee <LCDWriteInt>
 7fa:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <ADC_result>
 7fe:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <ADC_result+0x1>
		int material;
		if(ADC_result > material_types[0]){
 802:	8d 3a       	cpi	r24, 0xAD	; 173
 804:	93 40       	sbci	r25, 0x03	; 3
 806:	88 f4       	brcc	.+34     	; 0x82a <main+0x2e2>
 808:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <ADC_result>
 80c:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <ADC_result+0x1>
			material = BLACK;
			} else if (ADC_result > material_types[1]) {
 810:	81 32       	cpi	r24, 0x21	; 33
 812:	93 40       	sbci	r25, 0x03	; 3
 814:	60 f4       	brcc	.+24     	; 0x82e <main+0x2e6>
 816:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <ADC_result>
 81a:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <ADC_result+0x1>
			material = WHITE;
			} else if (ADC_result > material_types[2]) {
 81e:	81 39       	cpi	r24, 0x91	; 145
 820:	91 40       	sbci	r25, 0x01	; 1
 822:	40 f4       	brcc	.+16     	; 0x834 <main+0x2ec>
 824:	01 e0       	ldi	r16, 0x01	; 1
 826:	10 e0       	ldi	r17, 0x00	; 0
 828:	07 c0       	rjmp	.+14     	; 0x838 <main+0x2f0>
			material = FE;
			} else {
			material = AL;
 82a:	83 01       	movw	r16, r6
 82c:	05 c0       	rjmp	.+10     	; 0x838 <main+0x2f0>
 82e:	02 e0       	ldi	r16, 0x02	; 2
		400 /*steel/aluminum boundary*/};
		LCDGotoXY(12,0);
		LCDWriteInt(ADC_result,3);
		int material;
		if(ADC_result > material_types[0]){
			material = BLACK;
 830:	10 e0       	ldi	r17, 0x00	; 0
			} else if (ADC_result > material_types[1]) {
			material = WHITE;
 832:	02 c0       	rjmp	.+4      	; 0x838 <main+0x2f0>
 834:	03 e0       	ldi	r16, 0x03	; 3
			} else if (ADC_result > material_types[2]) {
			material = FE;
 836:	10 e0       	ldi	r17, 0x00	; 0
 838:	f8 01       	movw	r30, r16
			} else {
			material = AL;
		}
		sorted_items[material]++;
 83a:	e7 56       	subi	r30, 0x67	; 103
 83c:	fc 4f       	sbci	r31, 0xFC	; 252
 83e:	80 81       	ld	r24, Z
 840:	8f 5f       	subi	r24, 0xFF	; 255
		initLink(&newLink); //creates new link and stores input to linked lsit.
 842:	80 83       	st	Z, r24
 844:	ce 01       	movw	r24, r28
 846:	07 96       	adiw	r24, 0x07	; 7
		newLink->e.number = material;
 848:	3d de       	rcall	.-902    	; 0x4c4 <initLink>
 84a:	ef 81       	ldd	r30, Y+7	; 0x07
 84c:	f8 85       	ldd	r31, Y+8	; 0x08
		enqueue(&head, &tail, &newLink);
 84e:	11 83       	std	Z+1, r17	; 0x01
 850:	00 83       	st	Z, r16
 852:	ae 01       	movw	r20, r28
 854:	49 5f       	subi	r20, 0xF9	; 249
 856:	5f 4f       	sbci	r21, 0xFF	; 255
 858:	be 01       	movw	r22, r28
 85a:	6b 5f       	subi	r22, 0xFB	; 251
 85c:	7f 4f       	sbci	r23, 0xFF	; 255
		LCDGotoXY(0,0);
 85e:	ce 01       	movw	r24, r28
 860:	03 96       	adiw	r24, 0x03	; 3
 862:	3e de       	rcall	.-900    	; 0x4e0 <enqueue>
		LCDWriteString("BL AL WI FE");
 864:	60 e0       	ldi	r22, 0x00	; 0
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	1e de       	rcall	.-964    	; 0x4a6 <LCDGotoXY>
		LCDGotoXY(0,1);
 86a:	8a e5       	ldi	r24, 0x5A	; 90
 86c:	93 e0       	ldi	r25, 0x03	; 3
 86e:	b0 dd       	rcall	.-1184   	; 0x3d0 <LCDWriteString>
 870:	61 e0       	ldi	r22, 0x01	; 1
		LCDWriteInt(sorted_items[0],2);
 872:	80 e0       	ldi	r24, 0x00	; 0
 874:	18 de       	rcall	.-976    	; 0x4a6 <LCDGotoXY>
 876:	f6 01       	movw	r30, r12
 878:	80 81       	ld	r24, Z
 87a:	62 e0       	ldi	r22, 0x02	; 2
 87c:	70 e0       	ldi	r23, 0x00	; 0
		LCDGotoXY(3,1);
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	b6 dd       	rcall	.-1172   	; 0x3ee <LCDWriteInt>
 882:	61 e0       	ldi	r22, 0x01	; 1
 884:	83 2d       	mov	r24, r3
		LCDWriteInt(sorted_items[1],2);
 886:	0f de       	rcall	.-994    	; 0x4a6 <LCDGotoXY>
 888:	f6 01       	movw	r30, r12
 88a:	81 81       	ldd	r24, Z+1	; 0x01
 88c:	62 e0       	ldi	r22, 0x02	; 2
 88e:	70 e0       	ldi	r23, 0x00	; 0
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	ad dd       	rcall	.-1190   	; 0x3ee <LCDWriteInt>
		LCDGotoXY(6,1);
 894:	61 e0       	ldi	r22, 0x01	; 1
 896:	86 e0       	ldi	r24, 0x06	; 6
 898:	06 de       	rcall	.-1012   	; 0x4a6 <LCDGotoXY>
 89a:	f6 01       	movw	r30, r12
		LCDWriteInt(sorted_items[2],2);
 89c:	82 81       	ldd	r24, Z+2	; 0x02
 89e:	62 e0       	ldi	r22, 0x02	; 2
 8a0:	70 e0       	ldi	r23, 0x00	; 0
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	a4 dd       	rcall	.-1208   	; 0x3ee <LCDWriteInt>
 8a6:	61 e0       	ldi	r22, 0x01	; 1
 8a8:	89 e0       	ldi	r24, 0x09	; 9
		LCDGotoXY(9,1);
 8aa:	fd dd       	rcall	.-1030   	; 0x4a6 <LCDGotoXY>
 8ac:	f6 01       	movw	r30, r12
 8ae:	83 81       	ldd	r24, Z+3	; 0x03
 8b0:	62 e0       	ldi	r22, 0x02	; 2
		LCDWriteInt(sorted_items[3],2);
 8b2:	70 e0       	ldi	r23, 0x00	; 0
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	9b dd       	rcall	.-1226   	; 0x3ee <LCDWriteInt>
 8b8:	50 92 47 03 	sts	0x0347, r5	; 0x800347 <ADC_result+0x1>
 8bc:	40 92 46 03 	sts	0x0346, r4	; 0x800346 <ADC_result>
		ADC_result = 1023;//reset ADC
 8c0:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <STATE>
 8c4:	bf ce       	rjmp	.-642    	; 0x644 <main+0xfc>

000008c6 <__vector_1>:
 8c6:	1f 92       	push	r1
		STATE = 0;
 8c8:	0f 92       	push	r0
 8ca:	0f b6       	in	r0, 0x3f	; 63
 8cc:	0f 92       	push	r0
	}
} // end main

// sensor switch: Active HIGH starts AD conversion ==========================
ISR(INT0_vect)
{
 8ce:	11 24       	eor	r1, r1
 8d0:	8f 93       	push	r24
	STATE = 2;
 8d2:	82 e0       	ldi	r24, 0x02	; 2
 8d4:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <STATE>
}
 8d8:	8f 91       	pop	r24
 8da:	0f 90       	pop	r0
 8dc:	0f be       	out	0x3f, r0	; 63
 8de:	0f 90       	pop	r0
 8e0:	1f 90       	pop	r1
 8e2:	18 95       	reti

000008e4 <__vector_2>:

ISR(INT1_vect){
 8e4:	1f 92       	push	r1
 8e6:	0f 92       	push	r0
 8e8:	0f b6       	in	r0, 0x3f	; 63
 8ea:	0f 92       	push	r0
 8ec:	11 24       	eor	r1, r1
 8ee:	0b b6       	in	r0, 0x3b	; 59
 8f0:	0f 92       	push	r0
 8f2:	2f 93       	push	r18
 8f4:	3f 93       	push	r19
 8f6:	4f 93       	push	r20
 8f8:	5f 93       	push	r21
 8fa:	6f 93       	push	r22
 8fc:	7f 93       	push	r23
 8fe:	8f 93       	push	r24
 900:	9f 93       	push	r25
 902:	af 93       	push	r26
 904:	bf 93       	push	r27
 906:	ef 93       	push	r30
 908:	ff 93       	push	r31
	mTimer(20);
 90a:	84 e1       	ldi	r24, 0x14	; 20
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	09 d1       	rcall	.+530    	; 0xb22 <mTimer>
	while(PIND & (1 << PIND1)){};//wait for button to be released
 910:	49 99       	sbic	0x09, 1	; 9
 912:	fe cf       	rjmp	.-4      	; 0x910 <__vector_2+0x2c>
	mTimer(20);
 914:	84 e1       	ldi	r24, 0x14	; 20
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	04 d1       	rcall	.+520    	; 0xb22 <mTimer>
	rampDown = 1;
 91a:	81 e0       	ldi	r24, 0x01	; 1
 91c:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <__data_end>
	EIFR |= (1 << INTF1);//for some reason the interrupt automatically re triggers unless I explicitly clear the flag at the end.
 920:	e1 9a       	sbi	0x1c, 1	; 28
}
 922:	ff 91       	pop	r31
 924:	ef 91       	pop	r30
 926:	bf 91       	pop	r27
 928:	af 91       	pop	r26
 92a:	9f 91       	pop	r25
 92c:	8f 91       	pop	r24
 92e:	7f 91       	pop	r23
 930:	6f 91       	pop	r22
 932:	5f 91       	pop	r21
 934:	4f 91       	pop	r20
 936:	3f 91       	pop	r19
 938:	2f 91       	pop	r18
 93a:	0f 90       	pop	r0
 93c:	0b be       	out	0x3b, r0	; 59
 93e:	0f 90       	pop	r0
 940:	0f be       	out	0x3f, r0	; 63
 942:	0f 90       	pop	r0
 944:	1f 90       	pop	r1
 946:	18 95       	reti

00000948 <__vector_3>:

ISR(INT2_vect) //Controls program pause button. Holds the program in the interrupt until pause it pressed again.
{
 948:	1f 92       	push	r1
 94a:	0f 92       	push	r0
 94c:	0f b6       	in	r0, 0x3f	; 63
 94e:	0f 92       	push	r0
 950:	11 24       	eor	r1, r1
 952:	0b b6       	in	r0, 0x3b	; 59
 954:	0f 92       	push	r0
 956:	2f 93       	push	r18
 958:	3f 93       	push	r19
 95a:	4f 93       	push	r20
 95c:	5f 93       	push	r21
 95e:	6f 93       	push	r22
 960:	7f 93       	push	r23
 962:	8f 93       	push	r24
 964:	9f 93       	push	r25
 966:	af 93       	push	r26
 968:	bf 93       	push	r27
 96a:	ef 93       	push	r30
 96c:	ff 93       	push	r31
	LCDClear();
 96e:	60 e0       	ldi	r22, 0x00	; 0
 970:	81 e0       	ldi	r24, 0x01	; 1
 972:	d4 dc       	rcall	.-1624   	; 0x31c <LCDByte>
	LCDWriteString("Program Paused");
 974:	86 e6       	ldi	r24, 0x66	; 102
 976:	93 e0       	ldi	r25, 0x03	; 3
 978:	2b dd       	rcall	.-1450   	; 0x3d0 <LCDWriteString>
	motorState = 0x03;//stop motor
 97a:	83 e0       	ldi	r24, 0x03	; 3
 97c:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <motorState>
	PORTB = (motorState & 0x03);
 980:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <motorState>
 984:	83 70       	andi	r24, 0x03	; 3
 986:	85 b9       	out	0x05, r24	; 5
	while(PIND & (1 << PIND2)){};//wait for button to be released
 988:	4a 99       	sbic	0x09, 2	; 9
 98a:	fe cf       	rjmp	.-4      	; 0x988 <__vector_3+0x40>
	mTimer(20);
 98c:	84 e1       	ldi	r24, 0x14	; 20
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	c8 d0       	rcall	.+400    	; 0xb22 <mTimer>
	while (!(PIND & (1 << PIND2))){};//wait for button to be pressed again
 992:	4a 9b       	sbis	0x09, 2	; 9
	LCDClear();
 994:	fe cf       	rjmp	.-4      	; 0x992 <__vector_3+0x4a>
 996:	60 e0       	ldi	r22, 0x00	; 0
 998:	81 e0       	ldi	r24, 0x01	; 1
	mTimer(20);
 99a:	c0 dc       	rcall	.-1664   	; 0x31c <LCDByte>
 99c:	84 e1       	ldi	r24, 0x14	; 20
 99e:	90 e0       	ldi	r25, 0x00	; 0
	while(PIND & (1 << PIND2)){};//wait for button to be released
 9a0:	c0 d0       	rcall	.+384    	; 0xb22 <mTimer>
 9a2:	4a 99       	sbic	0x09, 2	; 9
	mTimer(20);
 9a4:	fe cf       	rjmp	.-4      	; 0x9a2 <__vector_3+0x5a>
 9a6:	84 e1       	ldi	r24, 0x14	; 20
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	bb d0       	rcall	.+374    	; 0xb22 <mTimer>
	if(STATE == 2) {//if in bucket stage
 9ac:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <STATE>
 9b0:	82 30       	cpi	r24, 0x02	; 2
 9b2:	39 f0       	breq	.+14     	; 0x9c2 <__vector_3+0x7a>
		//do nothing
		} else { //restart the motor otherwise
		motorState = 0x02;//start motor
 9b4:	82 e0       	ldi	r24, 0x02	; 2
 9b6:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <motorState>
		PORTB = (motorState & 0x03);
 9ba:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <motorState>
 9be:	83 70       	andi	r24, 0x03	; 3
 9c0:	85 b9       	out	0x05, r24	; 5
	}
	EIFR |= (1 << INTF2);//for some reason the interrupt automatically re triggers unless I explicitly clear the flag at the end.
 9c2:	e2 9a       	sbi	0x1c, 2	; 28
}
 9c4:	ff 91       	pop	r31
 9c6:	ef 91       	pop	r30
 9c8:	bf 91       	pop	r27
 9ca:	af 91       	pop	r26
 9cc:	9f 91       	pop	r25
 9ce:	8f 91       	pop	r24
 9d0:	7f 91       	pop	r23
 9d2:	6f 91       	pop	r22
 9d4:	5f 91       	pop	r21
 9d6:	4f 91       	pop	r20
 9d8:	3f 91       	pop	r19
 9da:	2f 91       	pop	r18
 9dc:	0f 90       	pop	r0
 9de:	0b be       	out	0x3b, r0	; 59
 9e0:	0f 90       	pop	r0
 9e2:	0f be       	out	0x3f, r0	; 63
 9e4:	0f 90       	pop	r0
 9e6:	1f 90       	pop	r1
 9e8:	18 95       	reti

000009ea <__vector_6>:

ISR(INT5_vect)// Interrupt 5, Triggered the optical sensor next to the reflectivity sensor
{
 9ea:	1f 92       	push	r1
 9ec:	0f 92       	push	r0
 9ee:	0f b6       	in	r0, 0x3f	; 63
 9f0:	0f 92       	push	r0
 9f2:	11 24       	eor	r1, r1
 9f4:	0b b6       	in	r0, 0x3b	; 59
 9f6:	0f 92       	push	r0
 9f8:	2f 93       	push	r18
 9fa:	3f 93       	push	r19
 9fc:	4f 93       	push	r20
 9fe:	5f 93       	push	r21
 a00:	6f 93       	push	r22
 a02:	7f 93       	push	r23
 a04:	8f 93       	push	r24
 a06:	9f 93       	push	r25
 a08:	af 93       	push	r26
 a0a:	bf 93       	push	r27
 a0c:	ef 93       	push	r30
 a0e:	ff 93       	push	r31
	mTimer(3);//de-bouncing
 a10:	83 e0       	ldi	r24, 0x03	; 3
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	86 d0       	rcall	.+268    	; 0xb22 <mTimer>
	if (PINE & (1 << PINE5)) {
 a16:	65 9b       	sbis	0x0c, 5	; 12
 a18:	04 c0       	rjmp	.+8      	; 0xa22 <__vector_6+0x38>
		//If pin is high, enter reflective stage
		STATE = 1;
 a1a:	81 e0       	ldi	r24, 0x01	; 1
 a1c:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <STATE>
 a20:	03 c0       	rjmp	.+6      	; 0xa28 <__vector_6+0x3e>
		} else {
		//if pin is low, enter ENQUEUE Stage
		STATE = 4;
 a22:	84 e0       	ldi	r24, 0x04	; 4
 a24:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <STATE>
		// INT5 pin is low
	}
}
 a28:	ff 91       	pop	r31
 a2a:	ef 91       	pop	r30
 a2c:	bf 91       	pop	r27
 a2e:	af 91       	pop	r26
 a30:	9f 91       	pop	r25
 a32:	8f 91       	pop	r24
 a34:	7f 91       	pop	r23
 a36:	6f 91       	pop	r22
 a38:	5f 91       	pop	r21
 a3a:	4f 91       	pop	r20
 a3c:	3f 91       	pop	r19
 a3e:	2f 91       	pop	r18
 a40:	0f 90       	pop	r0
 a42:	0b be       	out	0x3b, r0	; 59
 a44:	0f 90       	pop	r0
 a46:	0f be       	out	0x3f, r0	; 63
 a48:	0f 90       	pop	r0
 a4a:	1f 90       	pop	r1
 a4c:	18 95       	reti

00000a4e <__vector_29>:

// the interrupt will be triggered if the ADC is done =======================
ISR(ADC_vect)
{
 a4e:	1f 92       	push	r1
 a50:	0f 92       	push	r0
 a52:	0f b6       	in	r0, 0x3f	; 63
 a54:	0f 92       	push	r0
 a56:	11 24       	eor	r1, r1
 a58:	2f 93       	push	r18
 a5a:	4f 93       	push	r20
 a5c:	5f 93       	push	r21
 a5e:	8f 93       	push	r24
 a60:	9f 93       	push	r25
	uint16_t ADC_result_last = ADC_result;
 a62:	40 91 46 03 	lds	r20, 0x0346	; 0x800346 <ADC_result>
 a66:	50 91 47 03 	lds	r21, 0x0347	; 0x800347 <ADC_result+0x1>
	ADC_result = ADCL;
 a6a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 a6e:	90 e0       	ldi	r25, 0x00	; 0
 a70:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <ADC_result+0x1>
 a74:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <ADC_result>
	ADC_result |= (ADCH & 0x03) << 8;
 a78:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 a7c:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <ADC_result>
 a80:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <ADC_result+0x1>
 a84:	23 70       	andi	r18, 0x03	; 3
 a86:	92 2b       	or	r25, r18
 a88:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <ADC_result+0x1>
 a8c:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <ADC_result>
	if((ADC_result < ADC_result_last)){//gets us the lowest value read by the reflectivity sensor
 a90:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <ADC_result>
 a94:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <ADC_result+0x1>
 a98:	84 17       	cp	r24, r20
 a9a:	95 07       	cpc	r25, r21
 a9c:	20 f0       	brcs	.+8      	; 0xaa6 <__vector_29+0x58>
		} else {
		ADC_result = ADC_result_last;
 a9e:	50 93 47 03 	sts	0x0347, r21	; 0x800347 <ADC_result+0x1>
 aa2:	40 93 46 03 	sts	0x0346, r20	; 0x800346 <ADC_result>
	}
	ADC_result_flag = 1;
 aa6:	81 e0       	ldi	r24, 0x01	; 1
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <ADC_result_flag+0x1>
 aae:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <ADC_result_flag>
}
 ab2:	9f 91       	pop	r25
 ab4:	8f 91       	pop	r24
 ab6:	5f 91       	pop	r21
 ab8:	4f 91       	pop	r20
 aba:	2f 91       	pop	r18
 abc:	0f 90       	pop	r0
 abe:	0f be       	out	0x3f, r0	; 63
 ac0:	0f 90       	pop	r0
 ac2:	1f 90       	pop	r1
 ac4:	18 95       	reti

00000ac6 <__vector_default>:



ISR(BADISR_vect)
{
 ac6:	1f 92       	push	r1
 ac8:	0f 92       	push	r0
 aca:	0f b6       	in	r0, 0x3f	; 63
 acc:	0f 92       	push	r0
 ace:	11 24       	eor	r1, r1
 ad0:	8f 93       	push	r24
	PORTL = 0xF0;//light up everything to let us know it's screwed
 ad2:	80 ef       	ldi	r24, 0xF0	; 240
 ad4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 ad8:	8f 91       	pop	r24
 ada:	0f 90       	pop	r0
 adc:	0f be       	out	0x3f, r0	; 63
 ade:	0f 90       	pop	r0
 ae0:	1f 90       	pop	r1
 ae2:	18 95       	reti

00000ae4 <pwm>:
#include <avr/interrupt.h> /* Needed for interrupt functionality */

void pwm(){
	//Step 1
	// Set Timer0 to Fast PWM mode (WGM02:0 = 011)
	TCCR0A |= (1 << WGM00) | (1 << WGM01);  // Set WGM01 and WGM00
 ae4:	84 b5       	in	r24, 0x24	; 36
 ae6:	83 60       	ori	r24, 0x03	; 3
 ae8:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~(1 << WGM02);                // Clear WGM02 for Fast PWM, TOP=0xFF
 aea:	85 b5       	in	r24, 0x25	; 37
 aec:	87 7f       	andi	r24, 0xF7	; 247
 aee:	85 bd       	out	0x25, r24	; 37
	// Enable the Output Compare Match A Interrupt for Timer 0
	//TIMSK0 |= (1 <<  (OCIE0A));// Enable overflow interrupt

	//step 3
	// Set Compare Match Output Mode to clear on compare match and set at TOP (non-inverting mode)
	TCCR0A |= (1 << COM0A1);  // Set COM0A1 to 1
 af0:	84 b5       	in	r24, 0x24	; 36
 af2:	80 68       	ori	r24, 0x80	; 128
 af4:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1 << COM0A0); // Clear COM0A0 to 0
 af6:	84 b5       	in	r24, 0x24	; 36
 af8:	8f 7b       	andi	r24, 0xBF	; 191
 afa:	84 bd       	out	0x24, r24	; 36
	
	//step 4
	// Set the prescaler
	TCCR0B |= (1 << CS01);// CS02:0 = 010 (clk/64 prescale)
 afc:	85 b5       	in	r24, 0x25	; 37
 afe:	82 60       	ori	r24, 0x02	; 2
 b00:	85 bd       	out	0x25, r24	; 37
	
	//Step 5
	//For a duty cycle of 50%, ORCA should be 127, which is half of 255 rounded to nearest integer
	OCR0A = 127;
 b02:	8f e7       	ldi	r24, 0x7F	; 127
 b04:	87 bd       	out	0x27, r24	; 39
	
	//Step 6
	DDRB |= (1 << DDB7);  // Configure PORTB7 as output (OC0A is on PB7)
 b06:	27 9a       	sbi	0x04, 7	; 4
 b08:	08 95       	ret

00000b0a <pwmSet>:
}

void pwmSet(unsigned char input){//sets PWM duty cycle
	OCR0A = input;
 b0a:	87 bd       	out	0x27, r24	; 39
 b0c:	08 95       	ret

00000b0e <timer8MHz>:

//This file contains the timer subroutines from lab 2. They have been repurposed for use in future labs

void timer8MHz(){ //sets the timer to 8MHz

    CLKPR = 0x80; /* This will be discussed later. */
 b0e:	e1 e6       	ldi	r30, 0x61	; 97
 b10:	f0 e0       	ldi	r31, 0x00	; 0
 b12:	80 e8       	ldi	r24, 0x80	; 128
 b14:	80 83       	st	Z, r24
    CLKPR = 0x01; /* Required to set CPU Clock to 8MHz */
 b16:	81 e0       	ldi	r24, 0x01	; 1
 b18:	80 83       	st	Z, r24
    
    /* Timer instructions */
    /* Sets timer 1 to run at 1MHz, note: CPU clock is set to 8MHz.
       Disable all functions and use as pure timer */
    
    TCCR1B = _BV(CS11); /* _BV sets the bit to logic 1 */
 b1a:	82 e0       	ldi	r24, 0x02	; 2
 b1c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 b20:	08 95       	ret

00000b22 <mTimer>:
    /* CS means clock select, has the pre-scaler set to 8 */

} /* close timer8MHz */

/* This is the driver for the timer. */
void mTimer(int count){
 b22:	ac 01       	movw	r20, r24
    int i; /* keeps track of loop number */

    i = 0; /* initializes loop counter */

    /* Set the Waveform Generation mode bit description to Clear Timer on Compare Match mode (CTC) only */
    TCCR1B |= _BV(WGM12); /* set WGM bits to 0100, see page 145 */
 b24:	e1 e8       	ldi	r30, 0x81	; 129
 b26:	f0 e0       	ldi	r31, 0x00	; 0
 b28:	90 81       	ld	r25, Z
 b2a:	98 60       	ori	r25, 0x08	; 8
 b2c:	90 83       	st	Z, r25
    /* Note WGM is spread over two registers. */

    OCR1A = 0x03E8; /* Set Output Compare Register for 1000 cycles = 1ms */
 b2e:	88 ee       	ldi	r24, 0xE8	; 232
 b30:	93 e0       	ldi	r25, 0x03	; 3
 b32:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 b36:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
    TCNT1 = 0x0000; /* Sets initial value of Timer Counter to 0x0000 */
 b3a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 b3e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
 b42:	b1 9a       	sbi	0x16, 1	; 22
    The system clock has been pre-scaled by 2. This means it's running at half speed, 8MHz. See Technical manual for
    ATmega2560 (i.e. full manual) and look up "16-bit Timer/Counter1." */

    int i; /* keeps track of loop number */

    i = 0; /* initializes loop counter */
 b44:	20 e0       	ldi	r18, 0x00	; 0
 b46:	30 e0       	ldi	r19, 0x00	; 0

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
    /* If the following statement is confusing, please ask for clarification! */

    /* Poll the timer to determine when the timer has reached 0x03E8 */
    while(i<count){
 b48:	05 c0       	rjmp	.+10     	; 0xb54 <mTimer+0x32>
        if((TIFR1 & 0x02) == 0x02){
 b4a:	b1 9b       	sbis	0x16, 1	; 22
 b4c:	fe cf       	rjmp	.-4      	; 0xb4a <mTimer+0x28>
            TIFR1 |= _BV(OCF1A); /* clear interrupt flag by writing a ONE to the bit */
 b4e:	b1 9a       	sbi	0x16, 1	; 22
            i++; /* increment loop number */
 b50:	2f 5f       	subi	r18, 0xFF	; 255
 b52:	3f 4f       	sbci	r19, 0xFF	; 255

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
    /* If the following statement is confusing, please ask for clarification! */

    /* Poll the timer to determine when the timer has reached 0x03E8 */
    while(i<count){
 b54:	24 17       	cp	r18, r20
 b56:	35 07       	cpc	r19, r21
 b58:	1c f4       	brge	.+6      	; 0xb60 <mTimer+0x3e>
        if((TIFR1 & 0x02) == 0x02){
 b5a:	b1 9b       	sbis	0x16, 1	; 22
 b5c:	f6 cf       	rjmp	.-20     	; 0xb4a <mTimer+0x28>
 b5e:	f7 cf       	rjmp	.-18     	; 0xb4e <mTimer+0x2c>
 b60:	08 95       	ret

00000b62 <uTimer>:
            i++; /* increment loop number */
        } /* end if */
    } /* end while */
} /* mTimer */

void uTimer(unsigned int count){
 b62:	9c 01       	movw	r18, r24
    the system clock. You can also use a pre-scaler on the Timer, by 1, 8, 64, 256, or 1024 to lower the speed.
    The system clock has been pre-scaled by 2. This means it's running at half speed, 8MHz. See Technical manual for
    ATmega2560 (i.e. full manual) and look up "16-bit Timer/Counter1." */

    /* Set the Waveform Generation mode bit description to Clear Timer on Compare Match mode (CTC) only */
    TCCR1B |= _BV(WGM12); /* set WGM bits to 0100, see page 145 */
 b64:	e1 e8       	ldi	r30, 0x81	; 129
 b66:	f0 e0       	ldi	r31, 0x00	; 0
 b68:	90 81       	ld	r25, Z
 b6a:	98 60       	ori	r25, 0x08	; 8
 b6c:	90 83       	st	Z, r25
    /* Note WGM is spread over two registers. */

    OCR1A = count; /* Set Output Compare Register equal to the count variable. Since this is a 16 bit timer it should be able to hold all possible values of count
 b6e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 b72:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
    TCNT1 = 0x0000; /* Sets initial value of Timer Counter to 0x0000 */

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
 b76:	b1 9a       	sbi	0x16, 1	; 22
    /* If the following statement is confusing, please ask for clarification! */

    /* Poll the timer to determine when the timer has reached 0x0001 */
    while((TIFR1 & 0x02) != 0x02){}
 b78:	b1 9b       	sbis	0x16, 1	; 22
 b7a:	fe cf       	rjmp	.-4      	; 0xb78 <uTimer+0x16>
	TIFR1 |= _BV(OCF1A); /* clear interrupt flag by writing a ONE to the bit */
 b7c:	b1 9a       	sbi	0x16, 1	; 22
 b7e:	08 95       	ret

00000b80 <__divmodhi4>:
 b80:	97 fb       	bst	r25, 7
 b82:	07 2e       	mov	r0, r23
 b84:	16 f4       	brtc	.+4      	; 0xb8a <__divmodhi4+0xa>
 b86:	00 94       	com	r0
 b88:	06 d0       	rcall	.+12     	; 0xb96 <__divmodhi4_neg1>
 b8a:	77 fd       	sbrc	r23, 7
 b8c:	08 d0       	rcall	.+16     	; 0xb9e <__divmodhi4_neg2>
 b8e:	0b d0       	rcall	.+22     	; 0xba6 <__udivmodhi4>
 b90:	07 fc       	sbrc	r0, 7
 b92:	05 d0       	rcall	.+10     	; 0xb9e <__divmodhi4_neg2>
 b94:	3e f4       	brtc	.+14     	; 0xba4 <__divmodhi4_exit>

00000b96 <__divmodhi4_neg1>:
 b96:	90 95       	com	r25
 b98:	81 95       	neg	r24
 b9a:	9f 4f       	sbci	r25, 0xFF	; 255
 b9c:	08 95       	ret

00000b9e <__divmodhi4_neg2>:
 b9e:	70 95       	com	r23
 ba0:	61 95       	neg	r22
 ba2:	7f 4f       	sbci	r23, 0xFF	; 255

00000ba4 <__divmodhi4_exit>:
 ba4:	08 95       	ret

00000ba6 <__udivmodhi4>:
 ba6:	aa 1b       	sub	r26, r26
 ba8:	bb 1b       	sub	r27, r27
 baa:	51 e1       	ldi	r21, 0x11	; 17
 bac:	07 c0       	rjmp	.+14     	; 0xbbc <__udivmodhi4_ep>

00000bae <__udivmodhi4_loop>:
 bae:	aa 1f       	adc	r26, r26
 bb0:	bb 1f       	adc	r27, r27
 bb2:	a6 17       	cp	r26, r22
 bb4:	b7 07       	cpc	r27, r23
 bb6:	10 f0       	brcs	.+4      	; 0xbbc <__udivmodhi4_ep>
 bb8:	a6 1b       	sub	r26, r22
 bba:	b7 0b       	sbc	r27, r23

00000bbc <__udivmodhi4_ep>:
 bbc:	88 1f       	adc	r24, r24
 bbe:	99 1f       	adc	r25, r25
 bc0:	5a 95       	dec	r21
 bc2:	a9 f7       	brne	.-22     	; 0xbae <__udivmodhi4_loop>
 bc4:	80 95       	com	r24
 bc6:	90 95       	com	r25
 bc8:	bc 01       	movw	r22, r24
 bca:	cd 01       	movw	r24, r26
 bcc:	08 95       	ret

00000bce <malloc>:
 bce:	0f 93       	push	r16
 bd0:	1f 93       	push	r17
 bd2:	cf 93       	push	r28
 bd4:	df 93       	push	r29
 bd6:	82 30       	cpi	r24, 0x02	; 2
 bd8:	91 05       	cpc	r25, r1
 bda:	10 f4       	brcc	.+4      	; 0xbe0 <malloc+0x12>
 bdc:	82 e0       	ldi	r24, 0x02	; 2
 bde:	90 e0       	ldi	r25, 0x00	; 0
 be0:	e0 91 9f 03 	lds	r30, 0x039F	; 0x80039f <__flp>
 be4:	f0 91 a0 03 	lds	r31, 0x03A0	; 0x8003a0 <__flp+0x1>
 be8:	20 e0       	ldi	r18, 0x00	; 0
 bea:	30 e0       	ldi	r19, 0x00	; 0
 bec:	a0 e0       	ldi	r26, 0x00	; 0
 bee:	b0 e0       	ldi	r27, 0x00	; 0
 bf0:	30 97       	sbiw	r30, 0x00	; 0
 bf2:	19 f1       	breq	.+70     	; 0xc3a <malloc+0x6c>
 bf4:	40 81       	ld	r20, Z
 bf6:	51 81       	ldd	r21, Z+1	; 0x01
 bf8:	02 81       	ldd	r16, Z+2	; 0x02
 bfa:	13 81       	ldd	r17, Z+3	; 0x03
 bfc:	48 17       	cp	r20, r24
 bfe:	59 07       	cpc	r21, r25
 c00:	c8 f0       	brcs	.+50     	; 0xc34 <malloc+0x66>
 c02:	84 17       	cp	r24, r20
 c04:	95 07       	cpc	r25, r21
 c06:	69 f4       	brne	.+26     	; 0xc22 <malloc+0x54>
 c08:	10 97       	sbiw	r26, 0x00	; 0
 c0a:	31 f0       	breq	.+12     	; 0xc18 <malloc+0x4a>
 c0c:	12 96       	adiw	r26, 0x02	; 2
 c0e:	0c 93       	st	X, r16
 c10:	12 97       	sbiw	r26, 0x02	; 2
 c12:	13 96       	adiw	r26, 0x03	; 3
 c14:	1c 93       	st	X, r17
 c16:	27 c0       	rjmp	.+78     	; 0xc66 <malloc+0x98>
 c18:	00 93 9f 03 	sts	0x039F, r16	; 0x80039f <__flp>
 c1c:	10 93 a0 03 	sts	0x03A0, r17	; 0x8003a0 <__flp+0x1>
 c20:	22 c0       	rjmp	.+68     	; 0xc66 <malloc+0x98>
 c22:	21 15       	cp	r18, r1
 c24:	31 05       	cpc	r19, r1
 c26:	19 f0       	breq	.+6      	; 0xc2e <malloc+0x60>
 c28:	42 17       	cp	r20, r18
 c2a:	53 07       	cpc	r21, r19
 c2c:	18 f4       	brcc	.+6      	; 0xc34 <malloc+0x66>
 c2e:	9a 01       	movw	r18, r20
 c30:	bd 01       	movw	r22, r26
 c32:	ef 01       	movw	r28, r30
 c34:	df 01       	movw	r26, r30
 c36:	f8 01       	movw	r30, r16
 c38:	db cf       	rjmp	.-74     	; 0xbf0 <malloc+0x22>
 c3a:	21 15       	cp	r18, r1
 c3c:	31 05       	cpc	r19, r1
 c3e:	f9 f0       	breq	.+62     	; 0xc7e <malloc+0xb0>
 c40:	28 1b       	sub	r18, r24
 c42:	39 0b       	sbc	r19, r25
 c44:	24 30       	cpi	r18, 0x04	; 4
 c46:	31 05       	cpc	r19, r1
 c48:	80 f4       	brcc	.+32     	; 0xc6a <malloc+0x9c>
 c4a:	8a 81       	ldd	r24, Y+2	; 0x02
 c4c:	9b 81       	ldd	r25, Y+3	; 0x03
 c4e:	61 15       	cp	r22, r1
 c50:	71 05       	cpc	r23, r1
 c52:	21 f0       	breq	.+8      	; 0xc5c <malloc+0x8e>
 c54:	fb 01       	movw	r30, r22
 c56:	93 83       	std	Z+3, r25	; 0x03
 c58:	82 83       	std	Z+2, r24	; 0x02
 c5a:	04 c0       	rjmp	.+8      	; 0xc64 <malloc+0x96>
 c5c:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <__flp+0x1>
 c60:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <__flp>
 c64:	fe 01       	movw	r30, r28
 c66:	32 96       	adiw	r30, 0x02	; 2
 c68:	44 c0       	rjmp	.+136    	; 0xcf2 <malloc+0x124>
 c6a:	fe 01       	movw	r30, r28
 c6c:	e2 0f       	add	r30, r18
 c6e:	f3 1f       	adc	r31, r19
 c70:	81 93       	st	Z+, r24
 c72:	91 93       	st	Z+, r25
 c74:	22 50       	subi	r18, 0x02	; 2
 c76:	31 09       	sbc	r19, r1
 c78:	39 83       	std	Y+1, r19	; 0x01
 c7a:	28 83       	st	Y, r18
 c7c:	3a c0       	rjmp	.+116    	; 0xcf2 <malloc+0x124>
 c7e:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <__brkval>
 c82:	30 91 9e 03 	lds	r19, 0x039E	; 0x80039e <__brkval+0x1>
 c86:	23 2b       	or	r18, r19
 c88:	41 f4       	brne	.+16     	; 0xc9a <malloc+0xcc>
 c8a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 c8e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 c92:	30 93 9e 03 	sts	0x039E, r19	; 0x80039e <__brkval+0x1>
 c96:	20 93 9d 03 	sts	0x039D, r18	; 0x80039d <__brkval>
 c9a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 c9e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 ca2:	21 15       	cp	r18, r1
 ca4:	31 05       	cpc	r19, r1
 ca6:	41 f4       	brne	.+16     	; 0xcb8 <malloc+0xea>
 ca8:	2d b7       	in	r18, 0x3d	; 61
 caa:	3e b7       	in	r19, 0x3e	; 62
 cac:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 cb0:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 cb4:	24 1b       	sub	r18, r20
 cb6:	35 0b       	sbc	r19, r21
 cb8:	e0 91 9d 03 	lds	r30, 0x039D	; 0x80039d <__brkval>
 cbc:	f0 91 9e 03 	lds	r31, 0x039E	; 0x80039e <__brkval+0x1>
 cc0:	e2 17       	cp	r30, r18
 cc2:	f3 07       	cpc	r31, r19
 cc4:	a0 f4       	brcc	.+40     	; 0xcee <malloc+0x120>
 cc6:	2e 1b       	sub	r18, r30
 cc8:	3f 0b       	sbc	r19, r31
 cca:	28 17       	cp	r18, r24
 ccc:	39 07       	cpc	r19, r25
 cce:	78 f0       	brcs	.+30     	; 0xcee <malloc+0x120>
 cd0:	ac 01       	movw	r20, r24
 cd2:	4e 5f       	subi	r20, 0xFE	; 254
 cd4:	5f 4f       	sbci	r21, 0xFF	; 255
 cd6:	24 17       	cp	r18, r20
 cd8:	35 07       	cpc	r19, r21
 cda:	48 f0       	brcs	.+18     	; 0xcee <malloc+0x120>
 cdc:	4e 0f       	add	r20, r30
 cde:	5f 1f       	adc	r21, r31
 ce0:	50 93 9e 03 	sts	0x039E, r21	; 0x80039e <__brkval+0x1>
 ce4:	40 93 9d 03 	sts	0x039D, r20	; 0x80039d <__brkval>
 ce8:	81 93       	st	Z+, r24
 cea:	91 93       	st	Z+, r25
 cec:	02 c0       	rjmp	.+4      	; 0xcf2 <malloc+0x124>
 cee:	e0 e0       	ldi	r30, 0x00	; 0
 cf0:	f0 e0       	ldi	r31, 0x00	; 0
 cf2:	cf 01       	movw	r24, r30
 cf4:	df 91       	pop	r29
 cf6:	cf 91       	pop	r28
 cf8:	1f 91       	pop	r17
 cfa:	0f 91       	pop	r16
 cfc:	08 95       	ret

00000cfe <free>:
 cfe:	cf 93       	push	r28
 d00:	df 93       	push	r29
 d02:	00 97       	sbiw	r24, 0x00	; 0
 d04:	09 f4       	brne	.+2      	; 0xd08 <free+0xa>
 d06:	81 c0       	rjmp	.+258    	; 0xe0a <free+0x10c>
 d08:	fc 01       	movw	r30, r24
 d0a:	32 97       	sbiw	r30, 0x02	; 2
 d0c:	13 82       	std	Z+3, r1	; 0x03
 d0e:	12 82       	std	Z+2, r1	; 0x02
 d10:	a0 91 9f 03 	lds	r26, 0x039F	; 0x80039f <__flp>
 d14:	b0 91 a0 03 	lds	r27, 0x03A0	; 0x8003a0 <__flp+0x1>
 d18:	10 97       	sbiw	r26, 0x00	; 0
 d1a:	81 f4       	brne	.+32     	; 0xd3c <free+0x3e>
 d1c:	20 81       	ld	r18, Z
 d1e:	31 81       	ldd	r19, Z+1	; 0x01
 d20:	82 0f       	add	r24, r18
 d22:	93 1f       	adc	r25, r19
 d24:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <__brkval>
 d28:	30 91 9e 03 	lds	r19, 0x039E	; 0x80039e <__brkval+0x1>
 d2c:	28 17       	cp	r18, r24
 d2e:	39 07       	cpc	r19, r25
 d30:	51 f5       	brne	.+84     	; 0xd86 <free+0x88>
 d32:	f0 93 9e 03 	sts	0x039E, r31	; 0x80039e <__brkval+0x1>
 d36:	e0 93 9d 03 	sts	0x039D, r30	; 0x80039d <__brkval>
 d3a:	67 c0       	rjmp	.+206    	; 0xe0a <free+0x10c>
 d3c:	ed 01       	movw	r28, r26
 d3e:	20 e0       	ldi	r18, 0x00	; 0
 d40:	30 e0       	ldi	r19, 0x00	; 0
 d42:	ce 17       	cp	r28, r30
 d44:	df 07       	cpc	r29, r31
 d46:	40 f4       	brcc	.+16     	; 0xd58 <free+0x5a>
 d48:	4a 81       	ldd	r20, Y+2	; 0x02
 d4a:	5b 81       	ldd	r21, Y+3	; 0x03
 d4c:	9e 01       	movw	r18, r28
 d4e:	41 15       	cp	r20, r1
 d50:	51 05       	cpc	r21, r1
 d52:	f1 f0       	breq	.+60     	; 0xd90 <free+0x92>
 d54:	ea 01       	movw	r28, r20
 d56:	f5 cf       	rjmp	.-22     	; 0xd42 <free+0x44>
 d58:	d3 83       	std	Z+3, r29	; 0x03
 d5a:	c2 83       	std	Z+2, r28	; 0x02
 d5c:	40 81       	ld	r20, Z
 d5e:	51 81       	ldd	r21, Z+1	; 0x01
 d60:	84 0f       	add	r24, r20
 d62:	95 1f       	adc	r25, r21
 d64:	c8 17       	cp	r28, r24
 d66:	d9 07       	cpc	r29, r25
 d68:	59 f4       	brne	.+22     	; 0xd80 <free+0x82>
 d6a:	88 81       	ld	r24, Y
 d6c:	99 81       	ldd	r25, Y+1	; 0x01
 d6e:	84 0f       	add	r24, r20
 d70:	95 1f       	adc	r25, r21
 d72:	02 96       	adiw	r24, 0x02	; 2
 d74:	91 83       	std	Z+1, r25	; 0x01
 d76:	80 83       	st	Z, r24
 d78:	8a 81       	ldd	r24, Y+2	; 0x02
 d7a:	9b 81       	ldd	r25, Y+3	; 0x03
 d7c:	93 83       	std	Z+3, r25	; 0x03
 d7e:	82 83       	std	Z+2, r24	; 0x02
 d80:	21 15       	cp	r18, r1
 d82:	31 05       	cpc	r19, r1
 d84:	29 f4       	brne	.+10     	; 0xd90 <free+0x92>
 d86:	f0 93 a0 03 	sts	0x03A0, r31	; 0x8003a0 <__flp+0x1>
 d8a:	e0 93 9f 03 	sts	0x039F, r30	; 0x80039f <__flp>
 d8e:	3d c0       	rjmp	.+122    	; 0xe0a <free+0x10c>
 d90:	e9 01       	movw	r28, r18
 d92:	fb 83       	std	Y+3, r31	; 0x03
 d94:	ea 83       	std	Y+2, r30	; 0x02
 d96:	49 91       	ld	r20, Y+
 d98:	59 91       	ld	r21, Y+
 d9a:	c4 0f       	add	r28, r20
 d9c:	d5 1f       	adc	r29, r21
 d9e:	ec 17       	cp	r30, r28
 da0:	fd 07       	cpc	r31, r29
 da2:	61 f4       	brne	.+24     	; 0xdbc <free+0xbe>
 da4:	80 81       	ld	r24, Z
 da6:	91 81       	ldd	r25, Z+1	; 0x01
 da8:	84 0f       	add	r24, r20
 daa:	95 1f       	adc	r25, r21
 dac:	02 96       	adiw	r24, 0x02	; 2
 dae:	e9 01       	movw	r28, r18
 db0:	99 83       	std	Y+1, r25	; 0x01
 db2:	88 83       	st	Y, r24
 db4:	82 81       	ldd	r24, Z+2	; 0x02
 db6:	93 81       	ldd	r25, Z+3	; 0x03
 db8:	9b 83       	std	Y+3, r25	; 0x03
 dba:	8a 83       	std	Y+2, r24	; 0x02
 dbc:	e0 e0       	ldi	r30, 0x00	; 0
 dbe:	f0 e0       	ldi	r31, 0x00	; 0
 dc0:	12 96       	adiw	r26, 0x02	; 2
 dc2:	8d 91       	ld	r24, X+
 dc4:	9c 91       	ld	r25, X
 dc6:	13 97       	sbiw	r26, 0x03	; 3
 dc8:	00 97       	sbiw	r24, 0x00	; 0
 dca:	19 f0       	breq	.+6      	; 0xdd2 <free+0xd4>
 dcc:	fd 01       	movw	r30, r26
 dce:	dc 01       	movw	r26, r24
 dd0:	f7 cf       	rjmp	.-18     	; 0xdc0 <free+0xc2>
 dd2:	8d 91       	ld	r24, X+
 dd4:	9c 91       	ld	r25, X
 dd6:	11 97       	sbiw	r26, 0x01	; 1
 dd8:	9d 01       	movw	r18, r26
 dda:	2e 5f       	subi	r18, 0xFE	; 254
 ddc:	3f 4f       	sbci	r19, 0xFF	; 255
 dde:	82 0f       	add	r24, r18
 de0:	93 1f       	adc	r25, r19
 de2:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <__brkval>
 de6:	30 91 9e 03 	lds	r19, 0x039E	; 0x80039e <__brkval+0x1>
 dea:	28 17       	cp	r18, r24
 dec:	39 07       	cpc	r19, r25
 dee:	69 f4       	brne	.+26     	; 0xe0a <free+0x10c>
 df0:	30 97       	sbiw	r30, 0x00	; 0
 df2:	29 f4       	brne	.+10     	; 0xdfe <free+0x100>
 df4:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <__flp+0x1>
 df8:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <__flp>
 dfc:	02 c0       	rjmp	.+4      	; 0xe02 <free+0x104>
 dfe:	13 82       	std	Z+3, r1	; 0x03
 e00:	12 82       	std	Z+2, r1	; 0x02
 e02:	b0 93 9e 03 	sts	0x039E, r27	; 0x80039e <__brkval+0x1>
 e06:	a0 93 9d 03 	sts	0x039D, r26	; 0x80039d <__brkval>
 e0a:	df 91       	pop	r29
 e0c:	cf 91       	pop	r28
 e0e:	08 95       	ret

00000e10 <_exit>:
 e10:	f8 94       	cli

00000e12 <__stop_program>:
 e12:	ff cf       	rjmp	.-2      	; 0xe12 <__stop_program>
