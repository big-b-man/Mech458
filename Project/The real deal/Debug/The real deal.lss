
The real deal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800200  00000502  00000596  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000502  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080022e  0080022e  000005c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000170e  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f22  00000000  00000000  00001e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a07  00000000  00000000  00002d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  00003744  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006fa  00000000  00000000  00003958  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a31  00000000  00000000  00004052  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00004a83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	9d c1       	rjmp	.+826    	; 0x348 <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	ab c1       	rjmp	.+854    	; 0x370 <__vector_6>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	af c1       	rjmp	.+862    	; 0x3d4 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e0       	ldi	r30, 0x02	; 2
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 32       	cpi	r26, 0x2E	; 46
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ae e2       	ldi	r26, 0x2E	; 46
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 33       	cpi	r26, 0x32	; 50
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	a3 d0       	rcall	.+326    	; 0x266 <main>
 120:	ee c1       	rjmp	.+988    	; 0x4fe <_exit>

00000122 <__bad_interrupt>:
 122:	9f c1       	rjmp	.+830    	; 0x462 <__vector_default>

00000124 <LCDBusyLoop>:
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
 124:	87 b1       	in	r24, 0x07	; 7
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	87 b9       	out	0x07, r24	; 7
 12a:	45 9a       	sbi	0x08, 5	; 8
 12c:	46 98       	cbi	0x08, 6	; 8
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	8a 95       	dec	r24
 132:	f1 f7       	brne	.-4      	; 0x130 <LCDBusyLoop+0xc>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCDBusyLoop+0x12>
 136:	47 9a       	sbi	0x08, 7	; 8
 138:	92 e0       	ldi	r25, 0x02	; 2
 13a:	9a 95       	dec	r25
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCDBusyLoop+0x16>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCDBusyLoop+0x1c>
 140:	86 b1       	in	r24, 0x06	; 6
 142:	82 95       	swap	r24
 144:	80 7f       	andi	r24, 0xF0	; 240
 146:	92 e0       	ldi	r25, 0x02	; 2
 148:	9a 95       	dec	r25
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCDBusyLoop+0x24>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCDBusyLoop+0x2a>
 14e:	47 98       	cbi	0x08, 7	; 8
 150:	95 e0       	ldi	r25, 0x05	; 5
 152:	9a 95       	dec	r25
 154:	f1 f7       	brne	.-4      	; 0x152 <LCDBusyLoop+0x2e>
 156:	00 00       	nop
 158:	47 9a       	sbi	0x08, 7	; 8
 15a:	92 e0       	ldi	r25, 0x02	; 2
 15c:	9a 95       	dec	r25
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCDBusyLoop+0x38>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCDBusyLoop+0x3e>
 162:	96 b1       	in	r25, 0x06	; 6
 164:	92 e0       	ldi	r25, 0x02	; 2
 166:	9a 95       	dec	r25
 168:	f1 f7       	brne	.-4      	; 0x166 <LCDBusyLoop+0x42>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCDBusyLoop+0x48>
 16c:	47 98       	cbi	0x08, 7	; 8
 16e:	95 e0       	ldi	r25, 0x05	; 5
 170:	9a 95       	dec	r25
 172:	f1 f7       	brne	.-4      	; 0x170 <LCDBusyLoop+0x4c>
 174:	00 00       	nop
 176:	88 23       	and	r24, r24
 178:	f4 f2       	brlt	.-68     	; 0x136 <LCDBusyLoop+0x12>
 17a:	45 98       	cbi	0x08, 5	; 8
 17c:	87 b1       	in	r24, 0x07	; 7
 17e:	8f 60       	ori	r24, 0x0F	; 15
 180:	87 b9       	out	0x07, r24	; 7
 182:	08 95       	ret

00000184 <LCDByte>:
 184:	28 2f       	mov	r18, r24
 186:	22 95       	swap	r18
 188:	2f 70       	andi	r18, 0x0F	; 15
 18a:	8f 70       	andi	r24, 0x0F	; 15
 18c:	61 11       	cpse	r22, r1
 18e:	02 c0       	rjmp	.+4      	; 0x194 <LCDByte+0x10>
 190:	46 98       	cbi	0x08, 6	; 8
 192:	01 c0       	rjmp	.+2      	; 0x196 <LCDByte+0x12>
 194:	46 9a       	sbi	0x08, 6	; 8
 196:	92 e0       	ldi	r25, 0x02	; 2
 198:	9a 95       	dec	r25
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCDByte+0x14>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCDByte+0x1a>
 19e:	47 9a       	sbi	0x08, 7	; 8
 1a0:	98 b1       	in	r25, 0x08	; 8
 1a2:	90 7f       	andi	r25, 0xF0	; 240
 1a4:	92 2b       	or	r25, r18
 1a6:	98 b9       	out	0x08, r25	; 8
 1a8:	95 e0       	ldi	r25, 0x05	; 5
 1aa:	9a 95       	dec	r25
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCDByte+0x26>
 1ae:	00 00       	nop
 1b0:	47 98       	cbi	0x08, 7	; 8
 1b2:	95 e0       	ldi	r25, 0x05	; 5
 1b4:	9a 95       	dec	r25
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCDByte+0x30>
 1b8:	00 00       	nop
 1ba:	47 9a       	sbi	0x08, 7	; 8
 1bc:	98 b1       	in	r25, 0x08	; 8
 1be:	90 7f       	andi	r25, 0xF0	; 240
 1c0:	89 2b       	or	r24, r25
 1c2:	88 b9       	out	0x08, r24	; 8
 1c4:	85 e0       	ldi	r24, 0x05	; 5
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCDByte+0x42>
 1ca:	00 00       	nop
 1cc:	47 98       	cbi	0x08, 7	; 8
 1ce:	95 e0       	ldi	r25, 0x05	; 5
 1d0:	9a 95       	dec	r25
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <LCDByte+0x4c>
 1d4:	00 00       	nop
 1d6:	a6 cf       	rjmp	.-180    	; 0x124 <LCDBusyLoop>
 1d8:	08 95       	ret

000001da <InitLCD>:
 1da:	cf 93       	push	r28
 1dc:	c8 2f       	mov	r28, r24
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	86 e7       	ldi	r24, 0x76	; 118
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <InitLCD+0xa>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <InitLCD+0x14>
 1ee:	00 00       	nop
 1f0:	87 b1       	in	r24, 0x07	; 7
 1f2:	8f 60       	ori	r24, 0x0F	; 15
 1f4:	87 b9       	out	0x07, r24	; 7
 1f6:	3f 9a       	sbi	0x07, 7	; 7
 1f8:	3e 9a       	sbi	0x07, 6	; 7
 1fa:	3d 9a       	sbi	0x07, 5	; 7
 1fc:	88 b1       	in	r24, 0x08	; 8
 1fe:	80 7f       	andi	r24, 0xF0	; 240
 200:	88 b9       	out	0x08, r24	; 8
 202:	47 98       	cbi	0x08, 7	; 8
 204:	45 98       	cbi	0x08, 5	; 8
 206:	46 98       	cbi	0x08, 6	; 8
 208:	00 c0       	rjmp	.+0      	; 0x20a <InitLCD+0x30>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <InitLCD+0x32>
 20c:	00 00       	nop
 20e:	47 9a       	sbi	0x08, 7	; 8
 210:	41 9a       	sbi	0x08, 1	; 8
 212:	25 e0       	ldi	r18, 0x05	; 5
 214:	2a 95       	dec	r18
 216:	f1 f7       	brne	.-4      	; 0x214 <InitLCD+0x3a>
 218:	00 00       	nop
 21a:	47 98       	cbi	0x08, 7	; 8
 21c:	85 e0       	ldi	r24, 0x05	; 5
 21e:	8a 95       	dec	r24
 220:	f1 f7       	brne	.-4      	; 0x21e <InitLCD+0x44>
 222:	00 00       	nop
 224:	7f df       	rcall	.-258    	; 0x124 <LCDBusyLoop>
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	8c 2f       	mov	r24, r28
 22a:	8c 60       	ori	r24, 0x0C	; 12
 22c:	ab df       	rcall	.-170    	; 0x184 <LCDByte>
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	88 e2       	ldi	r24, 0x28	; 40
 232:	a8 df       	rcall	.-176    	; 0x184 <LCDByte>
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <LCDWriteString>:
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	ec 01       	movw	r28, r24
 23e:	88 81       	ld	r24, Y
 240:	88 23       	and	r24, r24
 242:	31 f0       	breq	.+12     	; 0x250 <LCDWriteString+0x18>
 244:	21 96       	adiw	r28, 0x01	; 1
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	9d df       	rcall	.-198    	; 0x184 <LCDByte>
 24a:	89 91       	ld	r24, Y+
 24c:	81 11       	cpse	r24, r1
 24e:	fb cf       	rjmp	.-10     	; 0x246 <LCDWriteString+0xe>
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 256:	88 32       	cpi	r24, 0x28	; 40
 258:	28 f4       	brcc	.+10     	; 0x264 <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
 25a:	61 11       	cpse	r22, r1
 25c:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	80 68       	ori	r24, 0x80	; 128
 262:	90 cf       	rjmp	.-224    	; 0x184 <LCDByte>
 264:	08 95       	ret

00000266 <main>:
volatile unsigned char motorState = 0x00;
volatile char STATE = 0;

int main()
{
	timer8MHz();//setup the chip clock to 8 MHz
 266:	21 d1       	rcall	.+578    	; 0x4aa <timer8MHz>
	DDRL = 0xFF;//sets debug lights to output
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	DDRB = 0x03;//sets D0 and D1 to output
 26e:	83 e0       	ldi	r24, 0x03	; 3
 270:	84 b9       	out	0x04, r24	; 4
	DDRE = 0b00;//all E pins on input
 272:	1d b8       	out	0x0d, r1	; 13
	PORTL = motorState << 6;
 274:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <motorState>
 278:	82 95       	swap	r24
 27a:	88 0f       	add	r24, r24
 27c:	88 0f       	add	r24, r24
 27e:	80 7c       	andi	r24, 0xC0	; 192
 280:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
	
	//Initialize LCD module
	InitLCD(LS_BLINK|LS_ULINE);
 284:	83 e0       	ldi	r24, 0x03	; 3
 286:	a9 df       	rcall	.-174    	; 0x1da <InitLCD>

	//Clear the screen
	LCDClear();
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	7b df       	rcall	.-266    	; 0x184 <LCDByte>
	LCDWriteString("Program Setup");
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	92 e0       	ldi	r25, 0x02	; 2
 292:	d2 df       	rcall	.-92     	; 0x238 <LCDWriteString>
	mTimer(500);
 294:	84 ef       	ldi	r24, 0xF4	; 244
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	12 d1       	rcall	.+548    	; 0x4be <mTimer>
	LCDClear();
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	72 df       	rcall	.-284    	; 0x184 <LCDByte>
	LCDWriteString("loading");
 2a0:	80 e1       	ldi	r24, 0x10	; 16
 2a2:	92 e0       	ldi	r25, 0x02	; 2
 2a4:	c9 df       	rcall	.-110    	; 0x238 <LCDWriteString>
	mTimer(2000);
 2a6:	80 ed       	ldi	r24, 0xD0	; 208
 2a8:	97 e0       	ldi	r25, 0x07	; 7
 2aa:	09 d1       	rcall	.+530    	; 0x4be <mTimer>
	LCDClear();
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	69 df       	rcall	.-302    	; 0x184 <LCDByte>
	LCDWriteString("ADC Value:");
 2b2:	88 e1       	ldi	r24, 0x18	; 24
 2b4:	92 e0       	ldi	r25, 0x02	; 2
 2b6:	c0 df       	rcall	.-128    	; 0x238 <LCDWriteString>
 2b8:	61 e0       	ldi	r22, 0x01	; 1
	LCDGotoXY(0,1);
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	cc df       	rcall	.-104    	; 0x256 <LCDGotoXY>
 2be:	83 e2       	ldi	r24, 0x23	; 35
 2c0:	92 e0       	ldi	r25, 0x02	; 2
	LCDWriteString("Optical:0");
 2c2:	ba df       	rcall	.-140    	; 0x238 <LCDWriteString>
 2c4:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <motorState>
 2c8:	85 b9       	out	0x05, r24	; 5
	PORTB = motorState;
 2ca:	f8 94       	cli
 2cc:	8d b3       	in	r24, 0x1d	; 29
 2ce:	84 62       	ori	r24, 0x24	; 36
	
	cli(); // disable all of the interrupt ==================================
 2d0:	8d bb       	out	0x1d, r24	; 29

	// config the external interrupt ========================================
	EIMSK |= (1 << INT2) | (1 << INT5);        // enable INT2 and INT5
 2d2:	e9 e6       	ldi	r30, 0x69	; 105
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
	EICRA |= (1 << ISC21);					   // falling edge interrupt for INT2
 2d8:	80 62       	ori	r24, 0x20	; 32
 2da:	80 83       	st	Z, r24
 2dc:	ea e6       	ldi	r30, 0x6A	; 106
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
	EICRB |= (1 << ISC50);					   // any edge interrupt for INT5
 2e2:	84 60       	ori	r24, 0x04	; 4
 2e4:	80 83       	st	Z, r24
 2e6:	ea e7       	ldi	r30, 0x7A	; 122
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z

	// config ADC ===========================================================
	// by default, the ADC input (analog input) is set to ADC0 / PORTF0
	ADCSRA |= (1 << ADEN);                       // enable ADC
 2ec:	80 68       	ori	r24, 0x80	; 128
 2ee:	80 83       	st	Z, r24
 2f0:	80 81       	ld	r24, Z
 2f2:	88 60       	ori	r24, 0x08	; 8
	ADCSRA |= (1 << ADIE);                       // enable interrupt of ADC
 2f4:	80 83       	st	Z, r24
 2f6:	ec e7       	ldi	r30, 0x7C	; 124
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
	ADMUX |= (1 << REFS0);						 //AVCC with external capacitor at AREF pin
 2fa:	80 81       	ld	r24, Z
 2fc:	80 64       	ori	r24, 0x40	; 64
 2fe:	80 83       	st	Z, r24
 300:	78 94       	sei
 302:	be d0       	rcall	.+380    	; 0x480 <pwm>

	// sets the Global Enable for all interrupts ============================
	sei();
 304:	86 e6       	ldi	r24, 0x66	; 102
	
	pwm();
 306:	cf d0       	rcall	.+414    	; 0x4a6 <pwmSet>
 308:	28 e0       	ldi	r18, 0x08	; 8
	pwmSet(102);
 30a:	eb e0       	ldi	r30, 0x0B	; 11
 30c:	f1 e0       	ldi	r31, 0x01	; 1
 30e:	90 e4       	ldi	r25, 0x40	; 64
	//linked list stuff
	goto POLLING_STAGE;

	BUCKET_STAGE:
	// Do whatever is necessary HERE
	PORTC = 0x08;
 310:	88 b1       	in	r24, 0x08	; 8
		default :
		goto POLLING_STAGE;
	}//switch STATE

	REFLECTIVE_STAGE:
	PORTL= 0x40;//debug light to show we're in the reflective stage
 312:	80 6f       	ori	r24, 0xF0	; 240
 314:	88 b9       	out	0x08, r24	; 8
 316:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <__data_end>

	goto POLLING_STAGE;

	// POLLING STATE
	POLLING_STAGE:
	PORTC |= 0xF0;	// Indicates this state is active
 31a:	83 30       	cpi	r24, 0x03	; 3
 31c:	61 f0       	breq	.+24     	; 0x336 <main+0xd0>
	switch(STATE){
 31e:	84 30       	cpi	r24, 0x04	; 4
 320:	71 f0       	breq	.+28     	; 0x33e <main+0xd8>
 322:	81 30       	cpi	r24, 0x01	; 1
 324:	a9 f7       	brne	.-22     	; 0x310 <main+0xaa>
 326:	90 83       	st	Z, r25
 328:	40 91 30 02 	lds	r20, 0x0230	; 0x800230 <ADC_result_flag>
 32c:	50 91 31 02 	lds	r21, 0x0231	; 0x800231 <ADC_result_flag+0x1>
		goto POLLING_STAGE;
	}//switch STATE

	REFLECTIVE_STAGE:
	PORTL= 0x40;//debug light to show we're in the reflective stage
	if(ADC_result_flag == 1){
 330:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <__data_end>
 334:	ed cf       	rjmp	.-38     	; 0x310 <main+0xaa>
 336:	28 b9       	out	0x08, r18	; 8

	}
	STATE = 0;
 338:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <__data_end>
	goto POLLING_STAGE;
 33c:	e9 cf       	rjmp	.-46     	; 0x310 <main+0xaa>
	//linked list stuff
	goto POLLING_STAGE;

	BUCKET_STAGE:
	// Do whatever is necessary HERE
	PORTC = 0x08;
 33e:	80 ef       	ldi	r24, 0xF0	; 240
	//Reset the state variable
	STATE = 0;
 340:	88 b9       	out	0x08, r24	; 8
 342:	80 e0       	ldi	r24, 0x00	; 0
	goto POLLING_STAGE;
 344:	90 e0       	ldi	r25, 0x00	; 0

	END:
	// The closing STATE ... how would you get here?
	PORTC = 0xF0;	// Indicates this state is active
 346:	08 95       	ret

00000348 <__vector_3>:
 348:	1f 92       	push	r1
	// Stop everything here...'MAKE SAFE'
	return(0);

} // end main
 34a:	0f 92       	push	r0
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	0f 92       	push	r0

// sensor switch: Active HIGH starts AD conversion ==========================
ISR(INT2_vect)
{
 350:	11 24       	eor	r1, r1
 352:	8f 93       	push	r24
 354:	9f 93       	push	r25
	ADC_result = 999;
 356:	87 ee       	ldi	r24, 0xE7	; 231
 358:	93 e0       	ldi	r25, 0x03	; 3
 35a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 35e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
}
 362:	9f 91       	pop	r25
 364:	8f 91       	pop	r24
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <__vector_6>:

ISR(INT5_vect)// Interupt 5, Triggered by the optical sensor next to the reflectivity sensor
{
 370:	1f 92       	push	r1
 372:	0f 92       	push	r0
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	0f 92       	push	r0
 378:	11 24       	eor	r1, r1
 37a:	0b b6       	in	r0, 0x3b	; 59
 37c:	0f 92       	push	r0
 37e:	2f 93       	push	r18
 380:	3f 93       	push	r19
 382:	4f 93       	push	r20
 384:	5f 93       	push	r21
 386:	6f 93       	push	r22
 388:	7f 93       	push	r23
 38a:	8f 93       	push	r24
 38c:	9f 93       	push	r25
 38e:	af 93       	push	r26
 390:	bf 93       	push	r27
 392:	ef 93       	push	r30
 394:	ff 93       	push	r31
    mTimer(20);//de-bouncing
 396:	84 e1       	ldi	r24, 0x14	; 20
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	91 d0       	rcall	.+290    	; 0x4be <mTimer>
	if (PINE & (1 << PINE5)) {
 39c:	65 9b       	sbis	0x0c, 5	; 12
 39e:	04 c0       	rjmp	.+8      	; 0x3a8 <__vector_6+0x38>
	    //If pin is high, start an ADC conversion
		STATE = 1;
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
 3a6:	03 c0       	rjmp	.+6      	; 0x3ae <__vector_6+0x3e>
	    } else {
	    // INT5 pin is low
	    STATE = 2;
 3a8:	82 e0       	ldi	r24, 0x02	; 2
 3aa:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
    }
}
 3ae:	ff 91       	pop	r31
 3b0:	ef 91       	pop	r30
 3b2:	bf 91       	pop	r27
 3b4:	af 91       	pop	r26
 3b6:	9f 91       	pop	r25
 3b8:	8f 91       	pop	r24
 3ba:	7f 91       	pop	r23
 3bc:	6f 91       	pop	r22
 3be:	5f 91       	pop	r21
 3c0:	4f 91       	pop	r20
 3c2:	3f 91       	pop	r19
 3c4:	2f 91       	pop	r18
 3c6:	0f 90       	pop	r0
 3c8:	0b be       	out	0x3b, r0	; 59
 3ca:	0f 90       	pop	r0
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	0f 90       	pop	r0
 3d0:	1f 90       	pop	r1
 3d2:	18 95       	reti

000003d4 <__vector_29>:

// the interrupt will be triggered if the ADC is done =======================
ISR(ADC_vect)
{
 3d4:	1f 92       	push	r1
 3d6:	0f 92       	push	r0
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	0f 92       	push	r0
 3dc:	11 24       	eor	r1, r1
 3de:	2f 93       	push	r18
 3e0:	3f 93       	push	r19
 3e2:	4f 93       	push	r20
 3e4:	5f 93       	push	r21
 3e6:	6f 93       	push	r22
 3e8:	8f 93       	push	r24
 3ea:	9f 93       	push	r25
	uint16_t ADC_result_last = ADC_result;
 3ec:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 3f0:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
	ADC_result = ADCL;
 3f4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 3fe:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	ADC_result |= (ADCH && 0x03) << 8;
 402:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 406:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 40a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 40e:	61 e0       	ldi	r22, 0x01	; 1
 410:	21 11       	cpse	r18, r1
 412:	01 c0       	rjmp	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	20 e0       	ldi	r18, 0x00	; 0
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	36 2f       	mov	r19, r22
 41c:	82 2b       	or	r24, r18
 41e:	93 2b       	or	r25, r19
 420:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 424:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	if((ADC_result < ADC_result_last)/* && (ADC_result > (ADC_result_last-20))*/){
 428:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 42c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 430:	84 17       	cp	r24, r20
 432:	95 07       	cpc	r25, r21
 434:	20 f0       	brcs	.+8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		} else {
		ADC_result = ADC_result_last;
 436:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 43a:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <__DATA_REGION_ORIGIN__>
	}
	ADC_result_flag = 1;
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <ADC_result_flag+0x1>
 446:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <ADC_result_flag>
}
 44a:	9f 91       	pop	r25
 44c:	8f 91       	pop	r24
 44e:	6f 91       	pop	r22
 450:	5f 91       	pop	r21
 452:	4f 91       	pop	r20
 454:	3f 91       	pop	r19
 456:	2f 91       	pop	r18
 458:	0f 90       	pop	r0
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	0f 90       	pop	r0
 45e:	1f 90       	pop	r1
 460:	18 95       	reti

00000462 <__vector_default>:

ISR(BADISR_vect)
{
 462:	1f 92       	push	r1
 464:	0f 92       	push	r0
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	0f 92       	push	r0
 46a:	11 24       	eor	r1, r1
 46c:	8f 93       	push	r24
	PORTL = 0xF0;//light up everything to let us know it's screwed
 46e:	80 ef       	ldi	r24, 0xF0	; 240
 470:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 474:	8f 91       	pop	r24
 476:	0f 90       	pop	r0
 478:	0f be       	out	0x3f, r0	; 63
 47a:	0f 90       	pop	r0
 47c:	1f 90       	pop	r1
 47e:	18 95       	reti

00000480 <pwm>:
#include <avr/interrupt.h> /* Needed for interrupt functionality */

void pwm(){
	//Step 1
	// Set Timer0 to Fast PWM mode (WGM02:0 = 011)
	TCCR0A |= (1 << WGM00) | (1 << WGM01);  // Set WGM01 and WGM00
 480:	84 b5       	in	r24, 0x24	; 36
 482:	83 60       	ori	r24, 0x03	; 3
 484:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~(1 << WGM02);                // Clear WGM02 for Fast PWM, TOP=0xFF
 486:	85 b5       	in	r24, 0x25	; 37
 488:	87 7f       	andi	r24, 0xF7	; 247
 48a:	85 bd       	out	0x25, r24	; 37
	// Enable the Output Compare Match A Interrupt for Timer 0
	//TIMSK0 |= (1 <<  (OCIE0A));// Enable overflow interrupt

	//step 3
	// Set Compare Match Output Mode to clear on compare match and set at TOP (non-inverting mode)
	TCCR0A |= (1 << COM0A1);  // Set COM0A1 to 1
 48c:	84 b5       	in	r24, 0x24	; 36
 48e:	80 68       	ori	r24, 0x80	; 128
 490:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1 << COM0A0); // Clear COM0A0 to 0
 492:	84 b5       	in	r24, 0x24	; 36
 494:	8f 7b       	andi	r24, 0xBF	; 191
 496:	84 bd       	out	0x24, r24	; 36
	
	//step 4
	// Set the prescaler
	TCCR0B |= (1 << CS01);// CS02:0 = 010 (clk/64 prescale)
 498:	85 b5       	in	r24, 0x25	; 37
 49a:	82 60       	ori	r24, 0x02	; 2
 49c:	85 bd       	out	0x25, r24	; 37
	
	//Step 5
	//For a duty cycle of 50%, ORCA should be 127, which is half of 255 rounded to nearest integer
	OCR0A = 127;
 49e:	8f e7       	ldi	r24, 0x7F	; 127
 4a0:	87 bd       	out	0x27, r24	; 39
	
	//Step 6
	DDRB |= (1 << DDB7);  // Configure PORTB7 as output (OC0A is on PB7)
 4a2:	27 9a       	sbi	0x04, 7	; 4
 4a4:	08 95       	ret

000004a6 <pwmSet>:
}

void pwmSet(unsigned char input){//sets PWM duty cycle
	OCR0A = input;
 4a6:	87 bd       	out	0x27, r24	; 39
 4a8:	08 95       	ret

000004aa <timer8MHz>:

//This file contains the timer subroutines from lab 2. They have been repurposed for use in future labs

void timer8MHz(){ //sets the timer to 8MHz

    CLKPR = 0x80; /* This will be discussed later. */
 4aa:	e1 e6       	ldi	r30, 0x61	; 97
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 e8       	ldi	r24, 0x80	; 128
 4b0:	80 83       	st	Z, r24
    CLKPR = 0x01; /* Required to set CPU Clock to 8MHz */
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	80 83       	st	Z, r24
    
    /* Timer instructions */
    /* Sets timer 1 to run at 1MHz, note: CPU clock is set to 8MHz.
       Disable all functions and use as pure timer */
    
    TCCR1B = _BV(CS11); /* _BV sets the bit to logic 1 */
 4b6:	82 e0       	ldi	r24, 0x02	; 2
 4b8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 4bc:	08 95       	ret

000004be <mTimer>:
    /* CS means clock select, has the pre-scaler set to 8 */

} /* close timer8MHz */

/* This is the driver for the timer. */
void mTimer(int count){
 4be:	ac 01       	movw	r20, r24
    int i; /* keeps track of loop number */

    i = 0; /* initializes loop counter */

    /* Set the Waveform Generation mode bit description to Clear Timer on Compare Match mode (CTC) only */
    TCCR1B |= _BV(WGM12); /* set WGM bits to 0100, see page 145 */
 4c0:	e1 e8       	ldi	r30, 0x81	; 129
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	90 81       	ld	r25, Z
 4c6:	98 60       	ori	r25, 0x08	; 8
 4c8:	90 83       	st	Z, r25
    /* Note WGM is spread over two registers. */

    OCR1A = 0x03E8; /* Set Output Compare Register for 1000 cycles = 1ms */
 4ca:	88 ee       	ldi	r24, 0xE8	; 232
 4cc:	93 e0       	ldi	r25, 0x03	; 3
 4ce:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 4d2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
    TCNT1 = 0x0000; /* Sets initial value of Timer Counter to 0x0000 */
 4d6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 4da:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
 4de:	b1 9a       	sbi	0x16, 1	; 22
    The system clock has been pre-scaled by 2. This means it's running at half speed, 8MHz. See Technical manual for
    ATmega2560 (i.e. full manual) and look up "16-bit Timer/Counter1." */

    int i; /* keeps track of loop number */

    i = 0; /* initializes loop counter */
 4e0:	20 e0       	ldi	r18, 0x00	; 0
 4e2:	30 e0       	ldi	r19, 0x00	; 0

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
    /* If the following statement is confusing, please ask for clarification! */

    /* Poll the timer to determine when the timer has reached 0x03E8 */
    while(i<count){
 4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <mTimer+0x32>
        if((TIFR1 & 0x02) == 0x02){
 4e6:	b1 9b       	sbis	0x16, 1	; 22
 4e8:	fe cf       	rjmp	.-4      	; 0x4e6 <mTimer+0x28>
            TIFR1 |= _BV(OCF1A); /* clear interrupt flag by writing a ONE to the bit */
 4ea:	b1 9a       	sbi	0x16, 1	; 22
            i++; /* increment loop number */
 4ec:	2f 5f       	subi	r18, 0xFF	; 255
 4ee:	3f 4f       	sbci	r19, 0xFF	; 255

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
    /* If the following statement is confusing, please ask for clarification! */

    /* Poll the timer to determine when the timer has reached 0x03E8 */
    while(i<count){
 4f0:	24 17       	cp	r18, r20
 4f2:	35 07       	cpc	r19, r21
 4f4:	1c f4       	brge	.+6      	; 0x4fc <mTimer+0x3e>
        if((TIFR1 & 0x02) == 0x02){
 4f6:	b1 9b       	sbis	0x16, 1	; 22
 4f8:	f6 cf       	rjmp	.-20     	; 0x4e6 <mTimer+0x28>
 4fa:	f7 cf       	rjmp	.-18     	; 0x4ea <mTimer+0x2c>
 4fc:	08 95       	ret

000004fe <_exit>:
 4fe:	f8 94       	cli

00000500 <__stop_program>:
 500:	ff cf       	rjmp	.-2      	; 0x500 <__stop_program>
