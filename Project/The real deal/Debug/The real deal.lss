
The real deal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800200  0000051c  000005b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000051c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800222  00800222  000005d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016c5  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f22  00000000  00000000  00001de1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a17  00000000  00000000  00002d03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  0000371c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000726  00000000  00000000  00003964  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ab3  00000000  00000000  0000408a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00004b3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c1       	rjmp	.+788    	; 0x322 <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	bc c1       	rjmp	.+888    	; 0x392 <__vector_6>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	bc c1       	rjmp	.+888    	; 0x3ee <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e1       	ldi	r30, 0x1C	; 28
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 32       	cpi	r26, 0x22	; 34
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e2       	ldi	r26, 0x22	; 34
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 32       	cpi	r26, 0x24	; 36
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	9b d0       	rcall	.+310    	; 0x256 <main>
 120:	fb c1       	rjmp	.+1014   	; 0x518 <_exit>

00000122 <__bad_interrupt>:
 122:	ac c1       	rjmp	.+856    	; 0x47c <__vector_default>

00000124 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 124:	87 b1       	in	r24, 0x07	; 7
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 12a:	45 9a       	sbi	0x08, 5	; 8
	CLEAR_RS();		//Read status
 12c:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	8a 95       	dec	r24
 132:	f1 f7       	brne	.-4      	; 0x130 <LCDBusyLoop+0xc>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCDBusyLoop+0x12>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
 136:	47 9a       	sbi	0x08, 7	; 8
 138:	92 e0       	ldi	r25, 0x02	; 2
 13a:	9a 95       	dec	r25
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCDBusyLoop+0x16>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCDBusyLoop+0x1c>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
 140:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 142:	82 95       	swap	r24
 144:	80 7f       	andi	r24, 0xF0	; 240
 146:	92 e0       	ldi	r25, 0x02	; 2
 148:	9a 95       	dec	r25
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCDBusyLoop+0x24>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCDBusyLoop+0x2a>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
 14e:	47 98       	cbi	0x08, 7	; 8
 150:	95 e0       	ldi	r25, 0x05	; 5
 152:	9a 95       	dec	r25
 154:	f1 f7       	brne	.-4      	; 0x152 <LCDBusyLoop+0x2e>
 156:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
 158:	47 9a       	sbi	0x08, 7	; 8
 15a:	92 e0       	ldi	r25, 0x02	; 2
 15c:	9a 95       	dec	r25
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCDBusyLoop+0x38>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCDBusyLoop+0x3e>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
 162:	96 b1       	in	r25, 0x06	; 6
 164:	92 e0       	ldi	r25, 0x02	; 2
 166:	9a 95       	dec	r25
 168:	f1 f7       	brne	.-4      	; 0x166 <LCDBusyLoop+0x42>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCDBusyLoop+0x48>

		busy=status & 0b10000000;

		_delay_us(0.5);
		
		CLEAR_E();
 16c:	47 98       	cbi	0x08, 7	; 8
 16e:	95 e0       	ldi	r25, 0x05	; 5
 170:	9a 95       	dec	r25
 172:	f1 f7       	brne	.-4      	; 0x170 <LCDBusyLoop+0x4c>
 174:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
 176:	88 23       	and	r24, r24
 178:	f4 f2       	brlt	.-68     	; 0x136 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 17a:	45 98       	cbi	0x08, 5	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 17c:	87 b1       	in	r24, 0x07	; 7
 17e:	8f 60       	ori	r24, 0x0F	; 15
 180:	87 b9       	out	0x07, r24	; 7
 182:	08 95       	ret

00000184 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 184:	28 2f       	mov	r18, r24
 186:	22 95       	swap	r18
 188:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 18a:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 18c:	61 11       	cpse	r22, r1
 18e:	02 c0       	rjmp	.+4      	; 0x194 <LCDByte+0x10>
	CLEAR_RS();
 190:	46 98       	cbi	0x08, 6	; 8
 192:	01 c0       	rjmp	.+2      	; 0x196 <LCDByte+0x12>
else
	SET_RS();
 194:	46 9a       	sbi	0x08, 6	; 8
 196:	92 e0       	ldi	r25, 0x02	; 2
 198:	9a 95       	dec	r25
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCDByte+0x14>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCDByte+0x1a>

_delay_us(0.500);		//tAS


SET_E();
 19e:	47 9a       	sbi	0x08, 7	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 1a0:	98 b1       	in	r25, 0x08	; 8
 1a2:	90 7f       	andi	r25, 0xF0	; 240
 1a4:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 1a6:	98 b9       	out	0x08, r25	; 8
 1a8:	95 e0       	ldi	r25, 0x05	; 5
 1aa:	9a 95       	dec	r25
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCDByte+0x26>
 1ae:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
 1b0:	47 98       	cbi	0x08, 7	; 8
 1b2:	95 e0       	ldi	r25, 0x05	; 5
 1b4:	9a 95       	dec	r25
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCDByte+0x30>
 1b8:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
 1ba:	47 9a       	sbi	0x08, 7	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 1bc:	98 b1       	in	r25, 0x08	; 8
 1be:	90 7f       	andi	r25, 0xF0	; 240
 1c0:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 1c2:	88 b9       	out	0x08, r24	; 8
 1c4:	85 e0       	ldi	r24, 0x05	; 5
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCDByte+0x42>
 1ca:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
 1cc:	47 98       	cbi	0x08, 7	; 8
 1ce:	95 e0       	ldi	r25, 0x05	; 5
 1d0:	9a 95       	dec	r25
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <LCDByte+0x4c>
 1d4:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
 1d6:	a6 cf       	rjmp	.-180    	; 0x124 <LCDBusyLoop>
 1d8:	08 95       	ret

000001da <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 1da:	cf 93       	push	r28
 1dc:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	86 e7       	ldi	r24, 0x76	; 118
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <InitLCD+0xa>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <InitLCD+0x14>
 1ee:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 1f0:	87 b1       	in	r24, 0x07	; 7
 1f2:	8f 60       	ori	r24, 0x0F	; 15
 1f4:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 1f6:	3f 9a       	sbi	0x07, 7	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 1f8:	3e 9a       	sbi	0x07, 6	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 1fa:	3d 9a       	sbi	0x07, 5	; 7

	LCD_DATA_PORT&=0XF0;
 1fc:	88 b1       	in	r24, 0x08	; 8
 1fe:	80 7f       	andi	r24, 0xF0	; 240
 200:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 202:	47 98       	cbi	0x08, 7	; 8
	CLEAR_RW();
 204:	45 98       	cbi	0x08, 5	; 8
	CLEAR_RS();
 206:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 208:	00 c0       	rjmp	.+0      	; 0x20a <InitLCD+0x30>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <InitLCD+0x32>
 20c:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
 20e:	47 9a       	sbi	0x08, 7	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 210:	41 9a       	sbi	0x08, 1	; 8
 212:	25 e0       	ldi	r18, 0x05	; 5
 214:	2a 95       	dec	r18
 216:	f1 f7       	brne	.-4      	; 0x214 <InitLCD+0x3a>
 218:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
 21a:	47 98       	cbi	0x08, 7	; 8
 21c:	85 e0       	ldi	r24, 0x05	; 5
 21e:	8a 95       	dec	r24
 220:	f1 f7       	brne	.-4      	; 0x21e <InitLCD+0x44>
 222:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 224:	7f df       	rcall	.-258    	; 0x124 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	8c 2f       	mov	r24, r28
 22a:	8c 60       	ori	r24, 0x0C	; 12
 22c:	ab df       	rcall	.-170    	; 0x184 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	88 e2       	ldi	r24, 0x28	; 40
 232:	a8 df       	rcall	.-176    	; 0x184 <LCDByte>
}
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 23e:	88 81       	ld	r24, Y
 240:	88 23       	and	r24, r24
 242:	31 f0       	breq	.+12     	; 0x250 <LCDWriteString+0x18>
 244:	21 96       	adiw	r28, 0x01	; 1
 {
	LCDData(*msg);
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	9d df       	rcall	.-198    	; 0x184 <LCDByte>
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 24a:	89 91       	ld	r24, Y+
 24c:	81 11       	cpse	r24, r1
 24e:	fb cf       	rjmp	.-10     	; 0x246 <LCDWriteString+0xe>
 {
	LCDData(*msg);
	msg++;
 }
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <main>:
volatile unsigned char motorState = 0x00;
volatile char STATE = 0;

int main()
{
	timer8MHz();//setup the chip clock to 8 MHz
 256:	36 d1       	rcall	.+620    	; 0x4c4 <timer8MHz>
	DDRL = 0xFF;//sets debug lights to output
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	DDRB = 0x03;//sets D0 and D1 to output
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	84 b9       	out	0x04, r24	; 4
	DDRE = 0x00;//all E pins on input
 262:	1d b8       	out	0x0d, r1	; 13
	PORTL = motorState << 6;
 264:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <motorState>
 268:	82 95       	swap	r24
 26a:	88 0f       	add	r24, r24
 26c:	88 0f       	add	r24, r24
 26e:	80 7c       	andi	r24, 0xC0	; 192
 270:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
	
	//Initialize LCD module
	InitLCD(LS_BLINK|LS_ULINE);
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	b1 df       	rcall	.-158    	; 0x1da <InitLCD>

	//Clear the screen
	LCDClear();
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	83 df       	rcall	.-250    	; 0x184 <LCDByte>
	LCDWriteString("Program Setup");
 27e:	84 e0       	ldi	r24, 0x04	; 4
 280:	92 e0       	ldi	r25, 0x02	; 2
 282:	da df       	rcall	.-76     	; 0x238 <LCDWriteString>
	mTimer(500);
 284:	84 ef       	ldi	r24, 0xF4	; 244
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	27 d1       	rcall	.+590    	; 0x4d8 <mTimer>
 28a:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <motorState>
	PORTB = motorState;
 28e:	85 b9       	out	0x05, r24	; 5
 290:	f8 94       	cli
	
	cli(); // disable all of the interrupt ==================================
 292:	8d b3       	in	r24, 0x1d	; 29

	// config the external interrupt ========================================
	EIMSK |= (1 << INT2) | (1 << INT5);        // enable INT2 and INT5
 294:	84 62       	ori	r24, 0x24	; 36
 296:	8d bb       	out	0x1d, r24	; 29
 298:	e9 e6       	ldi	r30, 0x69	; 105
	EICRA |= (1 << ISC21) | (1 << ISC20);					   // rising edge interrupt for INT2
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	80 63       	ori	r24, 0x30	; 48
 2a0:	80 83       	st	Z, r24
 2a2:	ea e6       	ldi	r30, 0x6A	; 106
	EICRB |= (1 << ISC50);					   // any edge interrupt for INT5
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	84 60       	ori	r24, 0x04	; 4
 2aa:	80 83       	st	Z, r24
 2ac:	ea e7       	ldi	r30, 0x7A	; 122

	// config ADC ===========================================================
	// by default, the ADC input (analog input) is set to ADC0 / PORTF0
	ADCSRA |= (1 << ADEN);                       // enable ADC
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	80 68       	ori	r24, 0x80	; 128
 2b4:	80 83       	st	Z, r24
 2b6:	80 81       	ld	r24, Z
	ADCSRA |= (1 << ADIE);                       // enable interrupt of ADC
 2b8:	88 60       	ori	r24, 0x08	; 8
 2ba:	80 83       	st	Z, r24
 2bc:	ec e7       	ldi	r30, 0x7C	; 124
	ADMUX  |= (1 << REFS0);						 //AVCC with external capacitor at AREF pin
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	80 64       	ori	r24, 0x40	; 64

	// sets the Global Enable for all interrupts ============================
	sei();
 2c4:	80 83       	st	Z, r24
	
	
	//pwm setup to 40% duty cycle
	pwm();
 2c6:	78 94       	sei
 2c8:	e8 d0       	rcall	.+464    	; 0x49a <pwm>
	pwmSet(102);
 2ca:	86 e6       	ldi	r24, 0x66	; 102
 2cc:	f9 d0       	rcall	.+498    	; 0x4c0 <pwmSet>
 2ce:	eb e0       	ldi	r30, 0x0B	; 11

	goto POLLING_STAGE;

	// POLLING STATE
	POLLING_STAGE:
	PORTL = (PINL5 < 1);	// Indicates this state is active
 2d0:	f1 e0       	ldi	r31, 0x01	; 1
 2d2:	28 e0       	ldi	r18, 0x08	; 8
	STATE = 0;
	goto POLLING_STAGE;

	BUCKET_STAGE:
	// Do whatever is necessary HERE
	PORTC = 0x08;
 2d4:	9c e0       	ldi	r25, 0x0C	; 12
		default :
		goto POLLING_STAGE;
	}//switch STATE

	REFLECTIVE_STAGE:
	PORTL = (PINL6 << 1);//debug light to show we're in the reflective stage
 2d6:	aa e7       	ldi	r26, 0x7A	; 122
	if(ADC_result_flag == 1){
	ADCSRA |= (1 << ADSC);//start a new ADC convert if last one is done
 2d8:	b0 e0       	ldi	r27, 0x00	; 0
 2da:	10 82       	st	Z, r1

	goto POLLING_STAGE;

	// POLLING STATE
	POLLING_STAGE:
	PORTL = (PINL5 < 1);	// Indicates this state is active
 2dc:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__data_end>
	switch(STATE){
 2e0:	82 30       	cpi	r24, 0x02	; 2
 2e2:	b1 f0       	breq	.+44     	; 0x310 <main+0xba>
 2e4:	83 30       	cpi	r24, 0x03	; 3
 2e6:	c1 f0       	breq	.+48     	; 0x318 <main+0xc2>
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	b9 f7       	brne	.-18     	; 0x2da <main+0x84>
 2ec:	90 83       	st	Z, r25
		default :
		goto POLLING_STAGE;
	}//switch STATE

	REFLECTIVE_STAGE:
	PORTL = (PINL6 << 1);//debug light to show we're in the reflective stage
 2ee:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
	if(ADC_result_flag == 1){
 2f2:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 2f6:	41 30       	cpi	r20, 0x01	; 1
 2f8:	51 05       	cpc	r21, r1
 2fa:	39 f4       	brne	.+14     	; 0x30a <main+0xb4>
 2fc:	8c 91       	ld	r24, X
	ADCSRA |= (1 << ADSC);//start a new ADC convert if last one is done
 2fe:	80 64       	ori	r24, 0x40	; 64
 300:	8c 93       	st	X, r24
 302:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
	ADC_result_flag = 0;
 306:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
 30a:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <__data_end>
	} //do nothing if an ADC convert is in progress
	STATE = 0;
 30e:	e5 cf       	rjmp	.-54     	; 0x2da <main+0x84>
	goto POLLING_STAGE;
 310:	28 b9       	out	0x08, r18	; 8

	BUCKET_STAGE:
	// Do whatever is necessary HERE
	PORTC = 0x08;
 312:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <__data_end>
	//Reset the state variable
	STATE = 0;
 316:	e1 cf       	rjmp	.-62     	; 0x2da <main+0x84>
	goto POLLING_STAGE;
 318:	80 ef       	ldi	r24, 0xF0	; 240

	END:
	// The closing STATE ... how would you get here?
	PORTC = 0xF0;	// Indicates this state is active
 31a:	88 b9       	out	0x08, r24	; 8
 31c:	80 e0       	ldi	r24, 0x00	; 0
	// Stop everything here...'MAKE SAFE'
	return(0);

} // end main
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	08 95       	ret

00000322 <__vector_3>:
 322:	1f 92       	push	r1

// sensor switch: Active HIGH starts AD conversion ==========================
ISR(INT2_vect)
{
 324:	0f 92       	push	r0
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	0f 92       	push	r0
 32a:	11 24       	eor	r1, r1
 32c:	0b b6       	in	r0, 0x3b	; 59
 32e:	0f 92       	push	r0
 330:	2f 93       	push	r18
 332:	3f 93       	push	r19
 334:	4f 93       	push	r20
 336:	5f 93       	push	r21
 338:	6f 93       	push	r22
 33a:	7f 93       	push	r23
 33c:	8f 93       	push	r24
 33e:	9f 93       	push	r25
 340:	af 93       	push	r26
 342:	bf 93       	push	r27
 344:	ef 93       	push	r30
 346:	ff 93       	push	r31
	LCDClear();
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	1b df       	rcall	.-458    	; 0x184 <LCDByte>
	LCDWriteString("Program Paused");
 34e:	82 e1       	ldi	r24, 0x12	; 18
 350:	92 e0       	ldi	r25, 0x02	; 2
 352:	72 df       	rcall	.-284    	; 0x238 <LCDWriteString>
	mTimer(500);
 354:	84 ef       	ldi	r24, 0xF4	; 244
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	bf d0       	rcall	.+382    	; 0x4d8 <mTimer>
	while (!(PIND & (1 << PIND2))){
 35a:	4a 9b       	sbis	0x09, 2	; 9
		};
	LCDClear();
 35c:	fe cf       	rjmp	.-4      	; 0x35a <__vector_3+0x38>
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	81 e0       	ldi	r24, 0x01	; 1
	mTimer(1000);
 362:	10 df       	rcall	.-480    	; 0x184 <LCDByte>
 364:	88 ee       	ldi	r24, 0xE8	; 232
 366:	93 e0       	ldi	r25, 0x03	; 3
 368:	b7 d0       	rcall	.+366    	; 0x4d8 <mTimer>
	EIFR |= (1 << INTF2);//for some reason the interrupt automatically re triggers unless I explicitly clear the flag at the end.
 36a:	e2 9a       	sbi	0x1c, 2	; 28
}
 36c:	ff 91       	pop	r31
 36e:	ef 91       	pop	r30
 370:	bf 91       	pop	r27
 372:	af 91       	pop	r26
 374:	9f 91       	pop	r25
 376:	8f 91       	pop	r24
 378:	7f 91       	pop	r23
 37a:	6f 91       	pop	r22
 37c:	5f 91       	pop	r21
 37e:	4f 91       	pop	r20
 380:	3f 91       	pop	r19
 382:	2f 91       	pop	r18
 384:	0f 90       	pop	r0
 386:	0b be       	out	0x3b, r0	; 59
 388:	0f 90       	pop	r0
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	0f 90       	pop	r0
 38e:	1f 90       	pop	r1
 390:	18 95       	reti

00000392 <__vector_6>:

ISR(INT5_vect)// Interrupt 5, Triggered by6 the optical sensor next to the reflectivity sensor
{
 392:	1f 92       	push	r1
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	0f 92       	push	r0
 39a:	11 24       	eor	r1, r1
 39c:	0b b6       	in	r0, 0x3b	; 59
 39e:	0f 92       	push	r0
 3a0:	2f 93       	push	r18
 3a2:	3f 93       	push	r19
 3a4:	4f 93       	push	r20
 3a6:	5f 93       	push	r21
 3a8:	6f 93       	push	r22
 3aa:	7f 93       	push	r23
 3ac:	8f 93       	push	r24
 3ae:	9f 93       	push	r25
 3b0:	af 93       	push	r26
 3b2:	bf 93       	push	r27
 3b4:	ef 93       	push	r30
 3b6:	ff 93       	push	r31
    mTimer(20);//de-bouncing
 3b8:	84 e1       	ldi	r24, 0x14	; 20
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	8d d0       	rcall	.+282    	; 0x4d8 <mTimer>
	if (PINE & (1 << PINE5)) {
 3be:	65 9b       	sbis	0x0c, 5	; 12
 3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <__vector_6+0x36>
	    //If pin is high, enter polling state
		STATE = 1;
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end>
	    } else {
	    // INT5 pin is low
	    
		//enque code
    }
}
 3c8:	ff 91       	pop	r31
 3ca:	ef 91       	pop	r30
 3cc:	bf 91       	pop	r27
 3ce:	af 91       	pop	r26
 3d0:	9f 91       	pop	r25
 3d2:	8f 91       	pop	r24
 3d4:	7f 91       	pop	r23
 3d6:	6f 91       	pop	r22
 3d8:	5f 91       	pop	r21
 3da:	4f 91       	pop	r20
 3dc:	3f 91       	pop	r19
 3de:	2f 91       	pop	r18
 3e0:	0f 90       	pop	r0
 3e2:	0b be       	out	0x3b, r0	; 59
 3e4:	0f 90       	pop	r0
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	0f 90       	pop	r0
 3ea:	1f 90       	pop	r1
 3ec:	18 95       	reti

000003ee <__vector_29>:

// the interrupt will be triggered if the ADC is done =======================
ISR(ADC_vect)
{
 3ee:	1f 92       	push	r1
 3f0:	0f 92       	push	r0
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	0f 92       	push	r0
 3f6:	11 24       	eor	r1, r1
 3f8:	2f 93       	push	r18
 3fa:	3f 93       	push	r19
 3fc:	4f 93       	push	r20
 3fe:	5f 93       	push	r21
 400:	6f 93       	push	r22
 402:	8f 93       	push	r24
 404:	9f 93       	push	r25
	uint16_t ADC_result_last = ADC_result;
 406:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <ADC_result>
 40a:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <ADC_result+0x1>
	ADC_result = ADCL;
 40e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <ADC_result+0x1>
 418:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <ADC_result>
	ADC_result |= (ADCH && 0x03) << 8;
 41c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 420:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <ADC_result>
 424:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <ADC_result+0x1>
 428:	61 e0       	ldi	r22, 0x01	; 1
 42a:	21 11       	cpse	r18, r1
 42c:	01 c0       	rjmp	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	20 e0       	ldi	r18, 0x00	; 0
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	36 2f       	mov	r19, r22
 436:	82 2b       	or	r24, r18
 438:	93 2b       	or	r25, r19
 43a:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <ADC_result+0x1>
 43e:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <ADC_result>
	if((ADC_result < ADC_result_last)){//gets us the lowest value read by the reflectivity sensor
 442:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <ADC_result>
 446:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <ADC_result+0x1>
 44a:	84 17       	cp	r24, r20
 44c:	95 07       	cpc	r25, r21
 44e:	20 f0       	brcs	.+8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		} else {
		ADC_result = ADC_result_last;
 450:	50 93 03 02 	sts	0x0203, r21	; 0x800203 <ADC_result+0x1>
 454:	40 93 02 02 	sts	0x0202, r20	; 0x800202 <ADC_result>
	}
	ADC_result_flag = 1;
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 460:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
}
 464:	9f 91       	pop	r25
 466:	8f 91       	pop	r24
 468:	6f 91       	pop	r22
 46a:	5f 91       	pop	r21
 46c:	4f 91       	pop	r20
 46e:	3f 91       	pop	r19
 470:	2f 91       	pop	r18
 472:	0f 90       	pop	r0
 474:	0f be       	out	0x3f, r0	; 63
 476:	0f 90       	pop	r0
 478:	1f 90       	pop	r1
 47a:	18 95       	reti

0000047c <__vector_default>:

ISR(BADISR_vect)
{
 47c:	1f 92       	push	r1
 47e:	0f 92       	push	r0
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	0f 92       	push	r0
 484:	11 24       	eor	r1, r1
 486:	8f 93       	push	r24
	PORTL = 0xF0;//light up everything to let us know it's screwed
 488:	80 ef       	ldi	r24, 0xF0	; 240
 48a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 48e:	8f 91       	pop	r24
 490:	0f 90       	pop	r0
 492:	0f be       	out	0x3f, r0	; 63
 494:	0f 90       	pop	r0
 496:	1f 90       	pop	r1
 498:	18 95       	reti

0000049a <pwm>:
#include <avr/interrupt.h> /* Needed for interrupt functionality */

void pwm(){
	//Step 1
	// Set Timer0 to Fast PWM mode (WGM02:0 = 011)
	TCCR0A |= (1 << WGM00) | (1 << WGM01);  // Set WGM01 and WGM00
 49a:	84 b5       	in	r24, 0x24	; 36
 49c:	83 60       	ori	r24, 0x03	; 3
 49e:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~(1 << WGM02);                // Clear WGM02 for Fast PWM, TOP=0xFF
 4a0:	85 b5       	in	r24, 0x25	; 37
 4a2:	87 7f       	andi	r24, 0xF7	; 247
 4a4:	85 bd       	out	0x25, r24	; 37
	// Enable the Output Compare Match A Interrupt for Timer 0
	//TIMSK0 |= (1 <<  (OCIE0A));// Enable overflow interrupt

	//step 3
	// Set Compare Match Output Mode to clear on compare match and set at TOP (non-inverting mode)
	TCCR0A |= (1 << COM0A1);  // Set COM0A1 to 1
 4a6:	84 b5       	in	r24, 0x24	; 36
 4a8:	80 68       	ori	r24, 0x80	; 128
 4aa:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1 << COM0A0); // Clear COM0A0 to 0
 4ac:	84 b5       	in	r24, 0x24	; 36
 4ae:	8f 7b       	andi	r24, 0xBF	; 191
 4b0:	84 bd       	out	0x24, r24	; 36
	
	//step 4
	// Set the prescaler
	TCCR0B |= (1 << CS01);// CS02:0 = 010 (clk/64 prescale)
 4b2:	85 b5       	in	r24, 0x25	; 37
 4b4:	82 60       	ori	r24, 0x02	; 2
 4b6:	85 bd       	out	0x25, r24	; 37
	
	//Step 5
	//For a duty cycle of 50%, ORCA should be 127, which is half of 255 rounded to nearest integer
	OCR0A = 127;
 4b8:	8f e7       	ldi	r24, 0x7F	; 127
 4ba:	87 bd       	out	0x27, r24	; 39
	
	//Step 6
	DDRB |= (1 << DDB7);  // Configure PORTB7 as output (OC0A is on PB7)
 4bc:	27 9a       	sbi	0x04, 7	; 4
 4be:	08 95       	ret

000004c0 <pwmSet>:
}

void pwmSet(unsigned char input){//sets PWM duty cycle
	OCR0A = input;
 4c0:	87 bd       	out	0x27, r24	; 39
 4c2:	08 95       	ret

000004c4 <timer8MHz>:

//This file contains the timer subroutines from lab 2. They have been repurposed for use in future labs

void timer8MHz(){ //sets the timer to 8MHz

    CLKPR = 0x80; /* This will be discussed later. */
 4c4:	e1 e6       	ldi	r30, 0x61	; 97
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	80 e8       	ldi	r24, 0x80	; 128
 4ca:	80 83       	st	Z, r24
    CLKPR = 0x01; /* Required to set CPU Clock to 8MHz */
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	80 83       	st	Z, r24
    
    /* Timer instructions */
    /* Sets timer 1 to run at 1MHz, note: CPU clock is set to 8MHz.
       Disable all functions and use as pure timer */
    
    TCCR1B = _BV(CS11); /* _BV sets the bit to logic 1 */
 4d0:	82 e0       	ldi	r24, 0x02	; 2
 4d2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 4d6:	08 95       	ret

000004d8 <mTimer>:
    /* CS means clock select, has the pre-scaler set to 8 */

} /* close timer8MHz */

/* This is the driver for the timer. */
void mTimer(int count){
 4d8:	ac 01       	movw	r20, r24
    int i; /* keeps track of loop number */

    i = 0; /* initializes loop counter */

    /* Set the Waveform Generation mode bit description to Clear Timer on Compare Match mode (CTC) only */
    TCCR1B |= _BV(WGM12); /* set WGM bits to 0100, see page 145 */
 4da:	e1 e8       	ldi	r30, 0x81	; 129
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	90 81       	ld	r25, Z
 4e0:	98 60       	ori	r25, 0x08	; 8
 4e2:	90 83       	st	Z, r25
    /* Note WGM is spread over two registers. */

    OCR1A = 0x03E8; /* Set Output Compare Register for 1000 cycles = 1ms */
 4e4:	88 ee       	ldi	r24, 0xE8	; 232
 4e6:	93 e0       	ldi	r25, 0x03	; 3
 4e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 4ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
    TCNT1 = 0x0000; /* Sets initial value of Timer Counter to 0x0000 */
 4f0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 4f4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
 4f8:	b1 9a       	sbi	0x16, 1	; 22
    The system clock has been pre-scaled by 2. This means it's running at half speed, 8MHz. See Technical manual for
    ATmega2560 (i.e. full manual) and look up "16-bit Timer/Counter1." */

    int i; /* keeps track of loop number */

    i = 0; /* initializes loop counter */
 4fa:	20 e0       	ldi	r18, 0x00	; 0
 4fc:	30 e0       	ldi	r19, 0x00	; 0

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
    /* If the following statement is confusing, please ask for clarification! */

    /* Poll the timer to determine when the timer has reached 0x03E8 */
    while(i<count){
 4fe:	05 c0       	rjmp	.+10     	; 0x50a <mTimer+0x32>
        if((TIFR1 & 0x02) == 0x02){
 500:	b1 9b       	sbis	0x16, 1	; 22
 502:	fe cf       	rjmp	.-4      	; 0x500 <mTimer+0x28>
            TIFR1 |= _BV(OCF1A); /* clear interrupt flag by writing a ONE to the bit */
 504:	b1 9a       	sbi	0x16, 1	; 22
            i++; /* increment loop number */
 506:	2f 5f       	subi	r18, 0xFF	; 255
 508:	3f 4f       	sbci	r19, 0xFF	; 255

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
    /* If the following statement is confusing, please ask for clarification! */

    /* Poll the timer to determine when the timer has reached 0x03E8 */
    while(i<count){
 50a:	24 17       	cp	r18, r20
 50c:	35 07       	cpc	r19, r21
 50e:	1c f4       	brge	.+6      	; 0x516 <mTimer+0x3e>
        if((TIFR1 & 0x02) == 0x02){
 510:	b1 9b       	sbis	0x16, 1	; 22
 512:	f6 cf       	rjmp	.-20     	; 0x500 <mTimer+0x28>
 514:	f7 cf       	rjmp	.-18     	; 0x504 <mTimer+0x2c>
 516:	08 95       	ret

00000518 <_exit>:
 518:	f8 94       	cli

0000051a <__stop_program>:
 51a:	ff cf       	rjmp	.-2      	; 0x51a <__stop_program>
