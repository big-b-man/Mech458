
The real deal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000184  00800200  00000eaa  00000f3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eaa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800384  00800384  000010c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002307  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012ad  00000000  00000000  000035ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001098  00000000  00000000  00004858  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000418  00000000  00000000  000058f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e1  00000000  00000000  00005d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010cb  00000000  00000000  000065e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  000076b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	7d c4       	rjmp	.+2298   	; 0x900 <__vector_1>
   6:	00 00       	nop
   8:	8a c4       	rjmp	.+2324   	; 0x91e <__vector_2>
   a:	00 00       	nop
   c:	b8 c4       	rjmp	.+2416   	; 0x97e <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	36 c5       	rjmp	.+2668   	; 0xa86 <__vector_6>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	3a c5       	rjmp	.+2676   	; 0xaea <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ea       	ldi	r30, 0xAA	; 170
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 38       	cpi	r26, 0x84	; 132
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a4 e8       	ldi	r26, 0x84	; 132
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 39       	cpi	r26, 0x92	; 146
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	13 d2       	rcall	.+1062   	; 0x546 <main>
 120:	c2 c6       	rjmp	.+3460   	; 0xea6 <_exit>

00000122 <__bad_interrupt>:
 122:	1c c5       	rjmp	.+2616   	; 0xb5c <__vector_default>

00000124 <homeMotor>:
	0b00101110,  // Step 2
	0b00101101   // Step 3
};
int delayTable90[] = {20000, 19828, 19345, 18596, 17630, 16492, 15230, 13890, 12520, 11166, 9876, 8696, 7673, 6854, 6286, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6057, 6326, 6791, 7427, 8209, 9109, 10104, 11166, 12271, 13393, 14506, 15583, 16601, 17533, 18352, 19035, 19554, 19884, 20000};
int delayTable180[] = {20000, 19948, 19796, 19552, 19224, 18820, 18347, 17813, 17224, 16591, 15918, 15216, 14490, 13749, 13000, 12251, 11510, 10784, 10082, 9409, 8776, 8188, 7653, 7180, 6776, 6448, 6204, 6052, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6023, 6092, 6204, 6357, 6548, 6776, 7037, 7330, 7653, 8003, 8378, 8776, 9193, 9630, 10082, 10547, 11024, 11510, 12003, 12500, 13000, 13500, 13997, 14490, 14976, 15453, 15918, 16370, 16807, 17224, 17622, 17997, 18347, 18670, 18963, 19224, 19452, 19643, 19796, 19908, 19977, 20000};
int homeMotor(void) {
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
	int stepIdx = 0;
	while (1) {
		// Check the hall effect sensor
		if (!(PIND & (1 << HALL_SENSOR_PIN))) {
 128:	4f 99       	sbic	0x09, 7	; 9
 12a:	03 c0       	rjmp	.+6      	; 0x132 <homeMotor+0xe>
	0b00101101   // Step 3
};
int delayTable90[] = {20000, 19828, 19345, 18596, 17630, 16492, 15230, 13890, 12520, 11166, 9876, 8696, 7673, 6854, 6286, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6057, 6326, 6791, 7427, 8209, 9109, 10104, 11166, 12271, 13393, 14506, 15583, 16601, 17533, 18352, 19035, 19554, 19884, 20000};
int delayTable180[] = {20000, 19948, 19796, 19552, 19224, 18820, 18347, 17813, 17224, 16591, 15918, 15216, 14490, 13749, 13000, 12251, 11510, 10784, 10082, 9409, 8776, 8188, 7653, 7180, 6776, 6448, 6204, 6052, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6023, 6092, 6204, 6357, 6548, 6776, 7037, 7330, 7653, 8003, 8378, 8776, 9193, 9630, 10082, 10547, 11024, 11510, 12003, 12500, 13000, 13500, 13997, 14490, 14976, 15453, 15918, 16370, 16807, 17224, 17622, 17997, 18347, 18670, 18963, 19224, 19452, 19643, 19796, 19908, 19977, 20000};
int homeMotor(void) {
	int stepIdx = 0;
 12c:	c0 e0       	ldi	r28, 0x00	; 0
 12e:	d0 e0       	ldi	r29, 0x00	; 0
 130:	17 c0       	rjmp	.+46     	; 0x160 <homeMotor+0x3c>
	while (1) {
		// Check the hall effect sensor
		if (!(PIND & (1 << HALL_SENSOR_PIN))) {
 132:	c0 e0       	ldi	r28, 0x00	; 0
 134:	d0 e0       	ldi	r29, 0x00	; 0
			return(stepIdx);
			} else {
			// Move one step
			stepIdx = (stepIdx + 1) % 4; // Cycle through steps
 136:	ce 01       	movw	r24, r28
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	83 70       	andi	r24, 0x03	; 3
 13c:	90 78       	andi	r25, 0x80	; 128
 13e:	99 23       	and	r25, r25
 140:	24 f4       	brge	.+8      	; 0x14a <homeMotor+0x26>
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	8c 6f       	ori	r24, 0xFC	; 252
 146:	9f 6f       	ori	r25, 0xFF	; 255
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	ec 01       	movw	r28, r24
			PORTA = motorSteps[stepIdx];
 14c:	fc 01       	movw	r30, r24
 14e:	ea 5b       	subi	r30, 0xBA	; 186
 150:	fc 4f       	sbci	r31, 0xFC	; 252
 152:	80 81       	ld	r24, Z
 154:	82 b9       	out	0x02, r24	; 2
			mTimer(20); // Delay for motor movement
 156:	84 e1       	ldi	r24, 0x14	; 20
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	2e d5       	rcall	.+2652   	; 0xbb8 <mTimer>
int delayTable180[] = {20000, 19948, 19796, 19552, 19224, 18820, 18347, 17813, 17224, 16591, 15918, 15216, 14490, 13749, 13000, 12251, 11510, 10784, 10082, 9409, 8776, 8188, 7653, 7180, 6776, 6448, 6204, 6052, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6023, 6092, 6204, 6357, 6548, 6776, 7037, 7330, 7653, 8003, 8378, 8776, 9193, 9630, 10082, 10547, 11024, 11510, 12003, 12500, 13000, 13500, 13997, 14490, 14976, 15453, 15918, 16370, 16807, 17224, 17622, 17997, 18347, 18670, 18963, 19224, 19452, 19643, 19796, 19908, 19977, 20000};
int homeMotor(void) {
	int stepIdx = 0;
	while (1) {
		// Check the hall effect sensor
		if (!(PIND & (1 << HALL_SENSOR_PIN))) {
 15c:	4f 99       	sbic	0x09, 7	; 9
 15e:	eb cf       	rjmp	.-42     	; 0x136 <homeMotor+0x12>
			stepIdx = (stepIdx + 1) % 4; // Cycle through steps
			PORTA = motorSteps[stepIdx];
			mTimer(20); // Delay for motor movement
		}
	}
}
 160:	ce 01       	movw	r24, r28
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <moveStepper>:

// Function to move the stepper motor with variable delay based on the lookup table
void moveStepper(int moveNum, int* stepNumInput){
 168:	6f 92       	push	r6
 16a:	7f 92       	push	r7
 16c:	8f 92       	push	r8
 16e:	9f 92       	push	r9
 170:	af 92       	push	r10
 172:	bf 92       	push	r11
 174:	cf 92       	push	r12
 176:	df 92       	push	r13
 178:	ef 92       	push	r14
 17a:	ff 92       	push	r15
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	7c 01       	movw	r14, r24
 186:	3b 01       	movw	r6, r22
	int stepNum = *stepNumInput;
 188:	db 01       	movw	r26, r22
 18a:	cd 91       	ld	r28, X+
 18c:	dc 91       	ld	r29, X
	int *ptr;
	if(moveNum >= 0){
 18e:	99 23       	and	r25, r25
 190:	54 f4       	brge	.+20     	; 0x1a6 <moveStepper+0x3e>
		static int forSteps[] = {0,1,2,3};
		ptr = forSteps;
		} else {
		static int backSteps[] = {2,3,0,1};
		ptr = backSteps;
		moveNum = -moveNum;
 192:	f1 94       	neg	r15
 194:	e1 94       	neg	r14
 196:	f1 08       	sbc	r15, r1
	if(moveNum >= 0){
		static int forSteps[] = {0,1,2,3};
		ptr = forSteps;
		} else {
		static int backSteps[] = {2,3,0,1};
		ptr = backSteps;
 198:	0f 2e       	mov	r0, r31
 19a:	f6 e0       	ldi	r31, 0x06	; 6
 19c:	cf 2e       	mov	r12, r31
 19e:	f2 e0       	ldi	r31, 0x02	; 2
 1a0:	df 2e       	mov	r13, r31
 1a2:	f0 2d       	mov	r31, r0
 1a4:	06 c0       	rjmp	.+12     	; 0x1b2 <moveStepper+0x4a>
void moveStepper(int moveNum, int* stepNumInput){
	int stepNum = *stepNumInput;
	int *ptr;
	if(moveNum >= 0){
		static int forSteps[] = {0,1,2,3};
		ptr = forSteps;
 1a6:	0f 2e       	mov	r0, r31
 1a8:	fe e0       	ldi	r31, 0x0E	; 14
 1aa:	cf 2e       	mov	r12, r31
 1ac:	f2 e0       	ldi	r31, 0x02	; 2
 1ae:	df 2e       	mov	r13, r31
 1b0:	f0 2d       	mov	r31, r0
		} else {
		static int backSteps[] = {2,3,0,1};
		ptr = backSteps;
		moveNum = -moveNum;
	}
	for(int i=0; i < moveNum; i++){
 1b2:	1e 14       	cp	r1, r14
 1b4:	1f 04       	cpc	r1, r15
 1b6:	0c f0       	brlt	.+2      	; 0x1ba <moveStepper+0x52>
 1b8:	6e c0       	rjmp	.+220    	; 0x296 <moveStepper+0x12e>
 1ba:	0f 2e       	mov	r0, r31
 1bc:	fe ed       	ldi	r31, 0xDE	; 222
 1be:	8f 2e       	mov	r8, r31
 1c0:	f2 e0       	ldi	r31, 0x02	; 2
 1c2:	9f 2e       	mov	r9, r31
 1c4:	f0 2d       	mov	r31, r0
 1c6:	06 e1       	ldi	r16, 0x16	; 22
 1c8:	12 e0       	ldi	r17, 0x02	; 2
 1ca:	c7 01       	movw	r24, r14
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	fc 01       	movw	r30, r24
 1d2:	e2 52       	subi	r30, 0x22	; 34
 1d4:	fd 4f       	sbci	r31, 0xFD	; 253
 1d6:	5f 01       	movw	r10, r30
		switch(stepNum){
 1d8:	c1 30       	cpi	r28, 0x01	; 1
 1da:	d1 05       	cpc	r29, r1
 1dc:	19 f1       	breq	.+70     	; 0x224 <moveStepper+0xbc>
 1de:	1c f4       	brge	.+6      	; 0x1e6 <moveStepper+0x7e>
 1e0:	20 97       	sbiw	r28, 0x00	; 0
 1e2:	91 f0       	breq	.+36     	; 0x208 <moveStepper+0xa0>
 1e4:	3a c0       	rjmp	.+116    	; 0x25a <moveStepper+0xf2>
 1e6:	c2 30       	cpi	r28, 0x02	; 2
 1e8:	d1 05       	cpc	r29, r1
 1ea:	51 f1       	breq	.+84     	; 0x240 <moveStepper+0xd8>
 1ec:	c3 30       	cpi	r28, 0x03	; 3
 1ee:	d1 05       	cpc	r29, r1
 1f0:	a1 f5       	brne	.+104    	; 0x25a <moveStepper+0xf2>
			case(3):
			PORTA = motorSteps[*ptr];
 1f2:	d6 01       	movw	r26, r12
 1f4:	ed 91       	ld	r30, X+
 1f6:	fc 91       	ld	r31, X
 1f8:	11 97       	sbiw	r26, 0x01	; 1
 1fa:	ea 5b       	subi	r30, 0xBA	; 186
 1fc:	fc 4f       	sbci	r31, 0xFC	; 252
 1fe:	80 81       	ld	r24, Z
 200:	82 b9       	out	0x02, r24	; 2
			stepNum = *ptr;
 202:	cd 91       	ld	r28, X+
 204:	dc 91       	ld	r29, X
			break;
 206:	29 c0       	rjmp	.+82     	; 0x25a <moveStepper+0xf2>
			case(0):
			PORTA = motorSteps[*(ptr+1)];
 208:	d6 01       	movw	r26, r12
 20a:	12 96       	adiw	r26, 0x02	; 2
 20c:	ed 91       	ld	r30, X+
 20e:	fc 91       	ld	r31, X
 210:	13 97       	sbiw	r26, 0x03	; 3
 212:	ea 5b       	subi	r30, 0xBA	; 186
 214:	fc 4f       	sbci	r31, 0xFC	; 252
 216:	80 81       	ld	r24, Z
 218:	82 b9       	out	0x02, r24	; 2
			stepNum = *(ptr+1);
 21a:	12 96       	adiw	r26, 0x02	; 2
 21c:	cd 91       	ld	r28, X+
 21e:	dc 91       	ld	r29, X
 220:	13 97       	sbiw	r26, 0x03	; 3
			break;
 222:	1b c0       	rjmp	.+54     	; 0x25a <moveStepper+0xf2>
			case(1):
			PORTA = motorSteps[*(ptr+2)];
 224:	d6 01       	movw	r26, r12
 226:	14 96       	adiw	r26, 0x04	; 4
 228:	ed 91       	ld	r30, X+
 22a:	fc 91       	ld	r31, X
 22c:	15 97       	sbiw	r26, 0x05	; 5
 22e:	ea 5b       	subi	r30, 0xBA	; 186
 230:	fc 4f       	sbci	r31, 0xFC	; 252
 232:	80 81       	ld	r24, Z
 234:	82 b9       	out	0x02, r24	; 2
			stepNum = *(ptr+2);
 236:	14 96       	adiw	r26, 0x04	; 4
 238:	cd 91       	ld	r28, X+
 23a:	dc 91       	ld	r29, X
 23c:	15 97       	sbiw	r26, 0x05	; 5
			break;
 23e:	0d c0       	rjmp	.+26     	; 0x25a <moveStepper+0xf2>
			case(2):
			PORTA = motorSteps[*(ptr+3)];
 240:	d6 01       	movw	r26, r12
 242:	16 96       	adiw	r26, 0x06	; 6
 244:	ed 91       	ld	r30, X+
 246:	fc 91       	ld	r31, X
 248:	17 97       	sbiw	r26, 0x07	; 7
 24a:	ea 5b       	subi	r30, 0xBA	; 186
 24c:	fc 4f       	sbci	r31, 0xFC	; 252
 24e:	80 81       	ld	r24, Z
 250:	82 b9       	out	0x02, r24	; 2
			stepNum = *(ptr+3);
 252:	16 96       	adiw	r26, 0x06	; 6
 254:	cd 91       	ld	r28, X+
 256:	dc 91       	ld	r29, X
 258:	17 97       	sbiw	r26, 0x07	; 7
			break;
			default:
			break;
		}
		if (moveNum == 50){
 25a:	b2 e3       	ldi	r27, 0x32	; 50
 25c:	eb 16       	cp	r14, r27
 25e:	f1 04       	cpc	r15, r1
 260:	29 f4       	brne	.+10     	; 0x26c <moveStepper+0x104>
			//mTimer(15);
			uTimer(delayTable90[i]);
 262:	f4 01       	movw	r30, r8
 264:	80 81       	ld	r24, Z
 266:	91 81       	ldd	r25, Z+1	; 0x01
 268:	c7 d4       	rcall	.+2446   	; 0xbf8 <uTimer>
 26a:	0c c0       	rjmp	.+24     	; 0x284 <moveStepper+0x11c>
			} else if (moveNum == 100){
 26c:	f4 e6       	ldi	r31, 0x64	; 100
 26e:	ef 16       	cp	r14, r31
 270:	f1 04       	cpc	r15, r1
 272:	29 f4       	brne	.+10     	; 0x27e <moveStepper+0x116>
			//mTimer(15);
			uTimer(delayTable180[i]);
 274:	d8 01       	movw	r26, r16
 276:	8d 91       	ld	r24, X+
 278:	9c 91       	ld	r25, X
 27a:	be d4       	rcall	.+2428   	; 0xbf8 <uTimer>
 27c:	03 c0       	rjmp	.+6      	; 0x284 <moveStepper+0x11c>
			} else {
			mTimer(20);
 27e:	84 e1       	ldi	r24, 0x14	; 20
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	9a d4       	rcall	.+2356   	; 0xbb8 <mTimer>
 284:	b2 e0       	ldi	r27, 0x02	; 2
 286:	8b 0e       	add	r8, r27
 288:	91 1c       	adc	r9, r1
 28a:	0e 5f       	subi	r16, 0xFE	; 254
 28c:	1f 4f       	sbci	r17, 0xFF	; 255
		} else {
		static int backSteps[] = {2,3,0,1};
		ptr = backSteps;
		moveNum = -moveNum;
	}
	for(int i=0; i < moveNum; i++){
 28e:	8a 14       	cp	r8, r10
 290:	9b 04       	cpc	r9, r11
 292:	09 f0       	breq	.+2      	; 0x296 <moveStepper+0x12e>
 294:	a1 cf       	rjmp	.-190    	; 0x1d8 <moveStepper+0x70>
			uTimer(delayTable180[i]);
			} else {
			mTimer(20);
		}
	}
	*stepNumInput = stepNum;
 296:	f3 01       	movw	r30, r6
 298:	d1 83       	std	Z+1, r29	; 0x01
 29a:	c0 83       	st	Z, r28
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	0f 91       	pop	r16
 2a4:	ff 90       	pop	r15
 2a6:	ef 90       	pop	r14
 2a8:	df 90       	pop	r13
 2aa:	cf 90       	pop	r12
 2ac:	bf 90       	pop	r11
 2ae:	af 90       	pop	r10
 2b0:	9f 90       	pop	r9
 2b2:	8f 90       	pop	r8
 2b4:	7f 90       	pop	r7
 2b6:	6f 90       	pop	r6
 2b8:	08 95       	ret

000002ba <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 2ba:	87 b1       	in	r24, 0x07	; 7
 2bc:	80 7f       	andi	r24, 0xF0	; 240
 2be:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 2c0:	45 9a       	sbi	0x08, 5	; 8
	CLEAR_RS();		//Read status
 2c2:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	8a 95       	dec	r24
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <LCDBusyLoop+0xc>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <LCDBusyLoop+0x12>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
 2cc:	47 9a       	sbi	0x08, 7	; 8
 2ce:	92 e0       	ldi	r25, 0x02	; 2
 2d0:	9a 95       	dec	r25
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <LCDBusyLoop+0x16>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <LCDBusyLoop+0x1c>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
 2d6:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 2d8:	82 95       	swap	r24
 2da:	80 7f       	andi	r24, 0xF0	; 240
 2dc:	92 e0       	ldi	r25, 0x02	; 2
 2de:	9a 95       	dec	r25
 2e0:	f1 f7       	brne	.-4      	; 0x2de <LCDBusyLoop+0x24>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <LCDBusyLoop+0x2a>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
 2e4:	47 98       	cbi	0x08, 7	; 8
 2e6:	95 e0       	ldi	r25, 0x05	; 5
 2e8:	9a 95       	dec	r25
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <LCDBusyLoop+0x2e>
 2ec:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
 2ee:	47 9a       	sbi	0x08, 7	; 8
 2f0:	92 e0       	ldi	r25, 0x02	; 2
 2f2:	9a 95       	dec	r25
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <LCDBusyLoop+0x38>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <LCDBusyLoop+0x3e>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
 2f8:	96 b1       	in	r25, 0x06	; 6
 2fa:	92 e0       	ldi	r25, 0x02	; 2
 2fc:	9a 95       	dec	r25
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <LCDBusyLoop+0x42>
 300:	00 c0       	rjmp	.+0      	; 0x302 <LCDBusyLoop+0x48>

		busy=status & 0b10000000;

		_delay_us(0.5);
		
		CLEAR_E();
 302:	47 98       	cbi	0x08, 7	; 8
 304:	95 e0       	ldi	r25, 0x05	; 5
 306:	9a 95       	dec	r25
 308:	f1 f7       	brne	.-4      	; 0x306 <LCDBusyLoop+0x4c>
 30a:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
 30c:	88 23       	and	r24, r24
 30e:	f4 f2       	brlt	.-68     	; 0x2cc <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 310:	45 98       	cbi	0x08, 5	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 312:	87 b1       	in	r24, 0x07	; 7
 314:	8f 60       	ori	r24, 0x0F	; 15
 316:	87 b9       	out	0x07, r24	; 7
 318:	08 95       	ret

0000031a <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 31a:	28 2f       	mov	r18, r24
 31c:	22 95       	swap	r18
 31e:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 320:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 322:	61 11       	cpse	r22, r1
 324:	02 c0       	rjmp	.+4      	; 0x32a <LCDByte+0x10>
	CLEAR_RS();
 326:	46 98       	cbi	0x08, 6	; 8
 328:	01 c0       	rjmp	.+2      	; 0x32c <LCDByte+0x12>
else
	SET_RS();
 32a:	46 9a       	sbi	0x08, 6	; 8
 32c:	92 e0       	ldi	r25, 0x02	; 2
 32e:	9a 95       	dec	r25
 330:	f1 f7       	brne	.-4      	; 0x32e <LCDByte+0x14>
 332:	00 c0       	rjmp	.+0      	; 0x334 <LCDByte+0x1a>

_delay_us(0.500);		//tAS


SET_E();
 334:	47 9a       	sbi	0x08, 7	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 336:	98 b1       	in	r25, 0x08	; 8
 338:	90 7f       	andi	r25, 0xF0	; 240
 33a:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 33c:	98 b9       	out	0x08, r25	; 8
 33e:	95 e0       	ldi	r25, 0x05	; 5
 340:	9a 95       	dec	r25
 342:	f1 f7       	brne	.-4      	; 0x340 <LCDByte+0x26>
 344:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
 346:	47 98       	cbi	0x08, 7	; 8
 348:	95 e0       	ldi	r25, 0x05	; 5
 34a:	9a 95       	dec	r25
 34c:	f1 f7       	brne	.-4      	; 0x34a <LCDByte+0x30>
 34e:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
 350:	47 9a       	sbi	0x08, 7	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 352:	98 b1       	in	r25, 0x08	; 8
 354:	90 7f       	andi	r25, 0xF0	; 240
 356:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 358:	88 b9       	out	0x08, r24	; 8
 35a:	85 e0       	ldi	r24, 0x05	; 5
 35c:	8a 95       	dec	r24
 35e:	f1 f7       	brne	.-4      	; 0x35c <LCDByte+0x42>
 360:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
 362:	47 98       	cbi	0x08, 7	; 8
 364:	95 e0       	ldi	r25, 0x05	; 5
 366:	9a 95       	dec	r25
 368:	f1 f7       	brne	.-4      	; 0x366 <LCDByte+0x4c>
 36a:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
 36c:	a6 cf       	rjmp	.-180    	; 0x2ba <LCDBusyLoop>
 36e:	08 95       	ret

00000370 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 370:	cf 93       	push	r28
 372:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 374:	2f ef       	ldi	r18, 0xFF	; 255
 376:	86 e7       	ldi	r24, 0x76	; 118
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	21 50       	subi	r18, 0x01	; 1
 37c:	80 40       	sbci	r24, 0x00	; 0
 37e:	90 40       	sbci	r25, 0x00	; 0
 380:	e1 f7       	brne	.-8      	; 0x37a <InitLCD+0xa>
 382:	00 c0       	rjmp	.+0      	; 0x384 <InitLCD+0x14>
 384:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 386:	87 b1       	in	r24, 0x07	; 7
 388:	8f 60       	ori	r24, 0x0F	; 15
 38a:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 38c:	3f 9a       	sbi	0x07, 7	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 38e:	3e 9a       	sbi	0x07, 6	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 390:	3d 9a       	sbi	0x07, 5	; 7

	LCD_DATA_PORT&=0XF0;
 392:	88 b1       	in	r24, 0x08	; 8
 394:	80 7f       	andi	r24, 0xF0	; 240
 396:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 398:	47 98       	cbi	0x08, 7	; 8
	CLEAR_RW();
 39a:	45 98       	cbi	0x08, 5	; 8
	CLEAR_RS();
 39c:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <InitLCD+0x30>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <InitLCD+0x32>
 3a2:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
 3a4:	47 9a       	sbi	0x08, 7	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 3a6:	41 9a       	sbi	0x08, 1	; 8
 3a8:	25 e0       	ldi	r18, 0x05	; 5
 3aa:	2a 95       	dec	r18
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <InitLCD+0x3a>
 3ae:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
 3b0:	47 98       	cbi	0x08, 7	; 8
 3b2:	85 e0       	ldi	r24, 0x05	; 5
 3b4:	8a 95       	dec	r24
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <InitLCD+0x44>
 3b8:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 3ba:	7f df       	rcall	.-258    	; 0x2ba <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	8c 2f       	mov	r24, r28
 3c0:	8c 60       	ori	r24, 0x0C	; 12
 3c2:	ab df       	rcall	.-170    	; 0x31a <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	88 e2       	ldi	r24, 0x28	; 40
 3c8:	a8 df       	rcall	.-176    	; 0x31a <LCDByte>
}
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 3d4:	88 81       	ld	r24, Y
 3d6:	88 23       	and	r24, r24
 3d8:	31 f0       	breq	.+12     	; 0x3e6 <LCDWriteString+0x18>
 3da:	21 96       	adiw	r28, 0x01	; 1
 {
	LCDData(*msg);
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	9d df       	rcall	.-198    	; 0x31a <LCDByte>
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 3e0:	89 91       	ld	r24, Y+
 3e2:	81 11       	cpse	r24, r1
 3e4:	fb cf       	rjmp	.-10     	; 0x3dc <LCDWriteString+0xe>
 {
	LCDData(*msg);
	msg++;
 }
}
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 3ec:	ef 92       	push	r14
 3ee:	ff 92       	push	r15
 3f0:	0f 93       	push	r16
 3f2:	1f 93       	push	r17
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	00 d0       	rcall	.+0      	; 0x3fa <LCDWriteInt+0xe>
 3fa:	1f 92       	push	r1
 3fc:	1f 92       	push	r1
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
 402:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 404:	fe 01       	movw	r30, r28
 406:	31 96       	adiw	r30, 0x01	; 1
 408:	25 e0       	ldi	r18, 0x05	; 5
 40a:	df 01       	movw	r26, r30
 40c:	1d 92       	st	X+, r1
 40e:	2a 95       	dec	r18
 410:	e9 f7       	brne	.-6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	int i=4,j=0;
	while(val)
 412:	00 97       	sbiw	r24, 0x00	; 0
 414:	51 f0       	breq	.+20     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 416:	35 96       	adiw	r30, 0x05	; 5
	{
	str[i]=val%10;
 418:	2a e0       	ldi	r18, 0x0A	; 10
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	b9 01       	movw	r22, r18
 41e:	fb d3       	rcall	.+2038   	; 0xc16 <__divmodhi4>
 420:	82 93       	st	-Z, r24
	val=val/10;
 422:	86 2f       	mov	r24, r22
 424:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 426:	00 97       	sbiw	r24, 0x00	; 0
 428:	c9 f7       	brne	.-14     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 42a:	bf ef       	ldi	r27, 0xFF	; 255
 42c:	eb 16       	cp	r14, r27
 42e:	fb 06       	cpc	r15, r27
 430:	69 f4       	brne	.+26     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		while(str[j]==0) j++;
 432:	89 81       	ldd	r24, Y+1	; 0x01
 434:	81 11       	cpse	r24, r1
 436:	1d c0       	rjmp	.+58     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 438:	fe 01       	movw	r30, r28
 43a:	32 96       	adiw	r30, 0x02	; 2
 43c:	00 e0       	ldi	r16, 0x00	; 0
 43e:	10 e0       	ldi	r17, 0x00	; 0
 440:	0f 5f       	subi	r16, 0xFF	; 255
 442:	1f 4f       	sbci	r17, 0xFF	; 255
 444:	81 91       	ld	r24, Z+
 446:	88 23       	and	r24, r24
 448:	d9 f3       	breq	.-10     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 44a:	0f c0       	rjmp	.+30     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	else
		j=5-field_length;
 44c:	05 e0       	ldi	r16, 0x05	; 5
 44e:	10 e0       	ldi	r17, 0x00	; 0
 450:	0e 19       	sub	r16, r14
 452:	1f 09       	sbc	r17, r15
 454:	0a c0       	rjmp	.+20     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 456:	f8 01       	movw	r30, r16
 458:	81 91       	ld	r24, Z+
 45a:	8f 01       	movw	r16, r30
 45c:	61 e0       	ldi	r22, 0x01	; 1
 45e:	80 5d       	subi	r24, 0xD0	; 208
 460:	5c df       	rcall	.-328    	; 0x31a <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 462:	0e 15       	cp	r16, r14
 464:	1f 05       	cpc	r17, r15
 466:	b9 f7       	brne	.-18     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 468:	11 c0       	rjmp	.+34     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 46a:	05 30       	cpi	r16, 0x05	; 5
 46c:	11 05       	cpc	r17, r1
 46e:	1c f0       	brlt	.+6      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 470:	0d c0       	rjmp	.+26     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
 472:	00 e0       	ldi	r16, 0x00	; 0
 474:	10 e0       	ldi	r17, 0x00	; 0
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	8c 0f       	add	r24, r28
 47c:	9d 1f       	adc	r25, r29
 47e:	08 0f       	add	r16, r24
 480:	19 1f       	adc	r17, r25
 482:	7e 01       	movw	r14, r28
 484:	96 e0       	ldi	r25, 0x06	; 6
 486:	e9 0e       	add	r14, r25
 488:	f1 1c       	adc	r15, r1
 48a:	e5 cf       	rjmp	.-54     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
 48c:	0f 90       	pop	r0
 48e:	0f 90       	pop	r0
 490:	0f 90       	pop	r0
 492:	0f 90       	pop	r0
 494:	0f 90       	pop	r0
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	1f 91       	pop	r17
 49c:	0f 91       	pop	r16
 49e:	ff 90       	pop	r15
 4a0:	ef 90       	pop	r14
 4a2:	08 95       	ret

000004a4 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 4a4:	88 32       	cpi	r24, 0x28	; 40
 4a6:	28 f4       	brcc	.+10     	; 0x4b2 <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
 4a8:	61 11       	cpse	r22, r1
 4aa:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 4ac:	60 e0       	ldi	r22, 0x00	; 0
 4ae:	80 68       	ori	r24, 0x80	; 128
 4b0:	34 cf       	rjmp	.-408    	; 0x31a <LCDByte>
 4b2:	08 95       	ret

000004b4 <setup>:
* DESC: initializes the linked queue to 'NULL' status
* INPUT: the head and tail pointers by reference
*/

void setup(link **h,link **t){
	*h = NULL;		/* Point the head to NOTHING (NULL) */
 4b4:	fc 01       	movw	r30, r24
 4b6:	11 82       	std	Z+1, r1	; 0x01
 4b8:	10 82       	st	Z, r1
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
 4ba:	fb 01       	movw	r30, r22
 4bc:	11 82       	std	Z+1, r1	; 0x01
 4be:	10 82       	st	Z, r1
 4c0:	08 95       	ret

000004c2 <initLink>:

	/**************************************************************************************
	* DESC: This initializes a link and returns the pointer to the new link or NULL if error
	* INPUT: the head and tail pointers by reference
	*/
	void initLink(link **newLink){
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	ec 01       	movw	r28, r24
		//link *l;
		*newLink = malloc(sizeof(link));
 4c8:	83 e0       	ldi	r24, 0x03	; 3
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	cb d3       	rcall	.+1942   	; 0xc64 <malloc>
 4ce:	99 83       	std	Y+1, r25	; 0x01
 4d0:	88 83       	st	Y, r24
		(*newLink)->next = NULL;
 4d2:	fc 01       	movw	r30, r24
 4d4:	12 82       	std	Z+2, r1	; 0x02
 4d6:	11 82       	std	Z+1, r1	; 0x01
		return;
		}/*initLink*/
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <enqueue>:
*  of the queue accordingly
*  INPUT: the head and tail pointers, and a pointer to the new link that was created
*/
/* will put an item at the tail of the queue */
void enqueue(link **h, link **t, link **nL){
	if (*t != NULL){
 4de:	db 01       	movw	r26, r22
 4e0:	ed 91       	ld	r30, X+
 4e2:	fc 91       	ld	r31, X
 4e4:	30 97       	sbiw	r30, 0x00	; 0
 4e6:	61 f0       	breq	.+24     	; 0x500 <enqueue+0x22>
		/* Not an empty queue */
		(*t)->next = *nL;
 4e8:	da 01       	movw	r26, r20
 4ea:	8d 91       	ld	r24, X+
 4ec:	9c 91       	ld	r25, X
 4ee:	11 97       	sbiw	r26, 0x01	; 1
 4f0:	92 83       	std	Z+2, r25	; 0x02
 4f2:	81 83       	std	Z+1, r24	; 0x01
		*t = *nL; //(*t)->next;
 4f4:	8d 91       	ld	r24, X+
 4f6:	9c 91       	ld	r25, X
 4f8:	fb 01       	movw	r30, r22
 4fa:	91 83       	std	Z+1, r25	; 0x01
 4fc:	80 83       	st	Z, r24
 4fe:	08 95       	ret
		}/*if*/
	else{
		/* It's an empty Queue */
		//(*h)->next = *nL;
		//should be this
		*h = *nL;
 500:	da 01       	movw	r26, r20
 502:	2d 91       	ld	r18, X+
 504:	3c 91       	ld	r19, X
 506:	11 97       	sbiw	r26, 0x01	; 1
 508:	fc 01       	movw	r30, r24
 50a:	31 83       	std	Z+1, r19	; 0x01
 50c:	20 83       	st	Z, r18
		*t = *nL;
 50e:	8d 91       	ld	r24, X+
 510:	9c 91       	ld	r25, X
 512:	db 01       	movw	r26, r22
 514:	8d 93       	st	X+, r24
 516:	9c 93       	st	X, r25
 518:	08 95       	ret

0000051a <dequeue>:
* DESC : Removes the link from the head of the list and assigns it to deQueuedLink
* INPUT: The head and tail pointers, and a ptr 'deQueuedLink'
* 		 which the removed link will be assigned to
*/
/* This will remove the link and element within the link from the head of the queue */
void dequeue(link **h, link **t, link **deQueuedLink) {
 51a:	fc 01       	movw	r30, r24
	*deQueuedLink = *h;  // Assign the head to deQueuedLink
 51c:	80 81       	ld	r24, Z
 51e:	91 81       	ldd	r25, Z+1	; 0x01
 520:	da 01       	movw	r26, r20
 522:	8d 93       	st	X+, r24
 524:	9c 93       	st	X, r25
	if (*h != NULL) {    // Ensure it's not an empty queue
 526:	a0 81       	ld	r26, Z
 528:	b1 81       	ldd	r27, Z+1	; 0x01
 52a:	10 97       	sbiw	r26, 0x00	; 0
 52c:	59 f0       	breq	.+22     	; 0x544 <dequeue+0x2a>
		*h = (*h)->next; // Move the head to the next link
 52e:	11 96       	adiw	r26, 0x01	; 1
 530:	8d 91       	ld	r24, X+
 532:	9c 91       	ld	r25, X
 534:	12 97       	sbiw	r26, 0x02	; 2
 536:	91 83       	std	Z+1, r25	; 0x01
 538:	80 83       	st	Z, r24
		if (*h == NULL) { // If the queue is now empty
 53a:	89 2b       	or	r24, r25
 53c:	19 f4       	brne	.+6      	; 0x544 <dequeue+0x2a>
			*t = NULL;    // Update the tail to NULL
 53e:	fb 01       	movw	r30, r22
 540:	11 82       	std	Z+1, r1	; 0x01
 542:	10 82       	st	Z, r1
 544:	08 95       	ret

00000546 <main>:
	FE = 3
};

volatile char rampDown = 0;//rampDown flag

int main() {
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
 54a:	cd b7       	in	r28, 0x3d	; 61
 54c:	de b7       	in	r29, 0x3e	; 62
 54e:	2a 97       	sbiw	r28, 0x0a	; 10
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	f8 94       	cli
 554:	de bf       	out	0x3e, r29	; 62
 556:	0f be       	out	0x3f, r0	; 63
 558:	cd bf       	out	0x3d, r28	; 61
	int stepNum;//stores the current position of the stepper motor
	timer8MHz();//setup the chip clock to 8 MHz
 55a:	24 d3       	rcall	.+1608   	; 0xba4 <timer8MHz>
	DDRL = 0xFF;//sets debug lights to output
 55c:	8f ef       	ldi	r24, 0xFF	; 255
 55e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	DDRA = 0xFF;//stepper output
 562:	81 b9       	out	0x01, r24	; 1
	DDRB = 0x03;//sets B0-B1 to output for belt control
 564:	83 e0       	ldi	r24, 0x03	; 3
 566:	84 b9       	out	0x04, r24	; 4
	DDRE = 0x00;//all E pins on input for sensors
	
	//Initialize LCD module
	InitLCD(LS_BLINK|LS_ULINE);
 568:	1d b8       	out	0x0d, r1	; 13
 56a:	02 df       	rcall	.-508    	; 0x370 <InitLCD>
	LCDClear();
 56c:	60 e0       	ldi	r22, 0x00	; 0
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	d4 de       	rcall	.-600    	; 0x31a <LCDByte>
	LCDWriteString("Program Setup");
 572:	8a e4       	ldi	r24, 0x4A	; 74
 574:	93 e0       	ldi	r25, 0x03	; 3
 576:	2b df       	rcall	.-426    	; 0x3ce <LCDWriteString>
	mTimer(500);
 578:	84 ef       	ldi	r24, 0xF4	; 244
 57a:	91 e0       	ldi	r25, 0x01	; 1
 57c:	1d d3       	rcall	.+1594   	; 0xbb8 <mTimer>
 57e:	f8 94       	cli
	
	cli(); // disable all of the interrupt ==================================
 580:	8d b3       	in	r24, 0x1d	; 29

	// config the external interrupt ========================================
	EIMSK |= (1 << INT0) | (1 << INT1) | (1 << INT2) | (1 << INT5);                                     // enable INT0-INT2 and INT5
 582:	87 62       	ori	r24, 0x27	; 39
 584:	8d bb       	out	0x1d, r24	; 29
 586:	e9 e6       	ldi	r30, 0x69	; 105
	EICRA |= (1 << ISC21) | (1 << ISC20) | (1 << ISC11) | (1 << ISC10) | (1 << ISC01);                  // rising edge interrupt for INT1-INT2, falling edge for INT0
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	80 81       	ld	r24, Z
 58c:	8e 63       	ori	r24, 0x3E	; 62
 58e:	80 83       	st	Z, r24
 590:	ea e6       	ldi	r30, 0x6A	; 106
	EICRB |= (1 << ISC50);			     					                                            // any edge interrupt on INT5
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	80 81       	ld	r24, Z
 596:	84 60       	ori	r24, 0x04	; 4
 598:	80 83       	st	Z, r24
 59a:	ea e7       	ldi	r30, 0x7A	; 122

	// config ADC ===========================================================
	// by default, the ADC input (analog input) is set to ADC0 / PORTF0
	ADCSRA |= (1 << ADEN);                       //enable ADC
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	80 81       	ld	r24, Z
 5a0:	80 68       	ori	r24, 0x80	; 128
 5a2:	80 83       	st	Z, r24
 5a4:	80 81       	ld	r24, Z
	ADCSRA |= (1 << ADIE);                       //enable interrupt of ADC
 5a6:	88 60       	ori	r24, 0x08	; 8
 5a8:	80 83       	st	Z, r24
 5aa:	ec e7       	ldi	r30, 0x7C	; 124
	ADMUX  |= (1 << REFS0);						 //AVCC with external capacitor at AREF pin
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	80 81       	ld	r24, Z
 5b0:	80 64       	ori	r24, 0x40	; 64
 5b2:	80 83       	st	Z, r24
 5b4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
	
	//Setup Timer 3 for belt delay
	//These two registers should already be 0 but I'm doing a sanity check
	TCCR3A = 0x00;
 5b8:	e1 e9       	ldi	r30, 0x91	; 145
	TCCR3B &= ~(0xDF);//zeros everything except bit 5 which is read only.
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	80 81       	ld	r24, Z
 5be:	80 72       	andi	r24, 0x20	; 32
 5c0:	80 83       	st	Z, r24
	//Prescaler to 256, page 157 of ATMega2560 manual for details
	TCCR3B |= (1 << CS32);
 5c2:	80 81       	ld	r24, Z
 5c4:	84 60       	ori	r24, 0x04	; 4
 5c6:	80 83       	st	Z, r24
	
	// sets the Global Enable for all interrupts ============================
	sei();
 5c8:	78 94       	sei
	
	//stepper initialization.
	stepNum = homeMotor();
 5ca:	ac dd       	rcall	.-1192   	; 0x124 <homeMotor>
 5cc:	9a 83       	std	Y+2, r25	; 0x02
 5ce:	89 83       	std	Y+1, r24	; 0x01
	link *head;			/* The ptr to the head of the queue */
	link *tail;			/* The ptr to the tail of the queue */
	link *newLink;		/* A ptr to a link aggregate data type (struct) */
	link *rtnLink;		/* same as the above */
	
	setup(&head,&tail);//sets up linked list
 5d0:	be 01       	movw	r22, r28
 5d2:	6b 5f       	subi	r22, 0xFB	; 251
 5d4:	7f 4f       	sbci	r23, 0xFF	; 255
 5d6:	ce 01       	movw	r24, r28
 5d8:	03 96       	adiw	r24, 0x03	; 3
 5da:	6c df       	rcall	.-296    	; 0x4b4 <setup>

	rtnLink = NULL;
 5dc:	1a 86       	std	Y+10, r1	; 0x0a
 5de:	19 86       	std	Y+9, r1	; 0x09
	newLink = NULL;
 5e0:	18 86       	std	Y+8, r1	; 0x08
 5e2:	1f 82       	std	Y+7, r1	; 0x07
	
	//pwm setup to 50% duty cycle
	pwm();// initializes the pwm
 5e4:	ca d2       	rcall	.+1428   	; 0xb7a <pwm>
 5e6:	8f e7       	ldi	r24, 0x7F	; 127
	pwmSet(127);//sets the pwm percentage
 5e8:	db d2       	rcall	.+1462   	; 0xba0 <pwmSet>
 5ea:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <motorState>
	
	//start belt
	PORTB |= motorState;
 5ee:	85 b1       	in	r24, 0x05	; 5
 5f0:	89 2b       	or	r24, r25
 5f2:	85 b9       	out	0x05, r24	; 5
 5f4:	0f 2e       	mov	r0, r31
 5f6:	fb e0       	ldi	r31, 0x0B	; 11
		goto POLLING_STAGE;
	}
	END:
	{
		//triggered when ramp down button is pressed
		PORTL = (1 << PINL7) | (1 << PINL5);//debug lights
 5f8:	ef 2e       	mov	r14, r31
 5fa:	ff 24       	eor	r15, r15
 5fc:	f3 94       	inc	r15
 5fe:	f0 2d       	mov	r31, r0
 600:	0f 2e       	mov	r0, r31
 602:	f5 e9       	ldi	r31, 0x95	; 149
		//delay to make sure belt is clear. for loop goes through five iterations.
		//The delay timer in each iteration counts up for roughly one second before toping out.
		//This creates a five second delay.
		for(int i = 0; i < 5; i++){
			TCNT3H = 0x80;
 604:	af 2e       	mov	r10, r31
 606:	b1 2c       	mov	r11, r1
 608:	f0 2d       	mov	r31, r0
 60a:	68 94       	set
 60c:	99 24       	eor	r9, r9
 60e:	97 f8       	bld	r9, 7
 610:	89 2c       	mov	r8, r9
 612:	0f 2e       	mov	r0, r31
 614:	f4 e9       	ldi	r31, 0x94	; 148
			TCNT3L = 0x00;
 616:	cf 2e       	mov	r12, r31
 618:	d1 2c       	mov	r13, r1
 61a:	f0 2d       	mov	r31, r0
 61c:	09 e8       	ldi	r16, 0x89	; 137
 61e:	13 e0       	ldi	r17, 0x03	; 3
		newLink->e.number = material;
		enqueue(&head, &tail, &newLink);
		LCDGotoXY(0,0);//displays current sorted items
		LCDWriteString("BL AL WI FE");
		LCDGotoXY(0,1);
		LCDWriteInt(sorted_items[0],2);
 620:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <STATE>
	//enter polling loop
	goto POLLING_STAGE;

	// POLLING STATE
	POLLING_STAGE:
	switch(STATE){
 624:	82 30       	cpi	r24, 0x02	; 2
 626:	f9 f0       	breq	.+62     	; 0x666 <main+0x120>
 628:	28 f4       	brcc	.+10     	; 0x634 <main+0xee>
 62a:	88 23       	and	r24, r24
 62c:	51 f0       	breq	.+20     	; 0x642 <main+0xfc>
 62e:	81 30       	cpi	r24, 0x01	; 1
 630:	59 f0       	breq	.+22     	; 0x648 <main+0x102>
 632:	f6 cf       	rjmp	.-20     	; 0x620 <main+0xda>
 634:	83 30       	cpi	r24, 0x03	; 3
 636:	09 f4       	brne	.+2      	; 0x63a <main+0xf4>
 638:	c1 c0       	rjmp	.+386    	; 0x7bc <main+0x276>
 63a:	84 30       	cpi	r24, 0x04	; 4
 63c:	09 f4       	brne	.+2      	; 0x640 <main+0xfa>
 63e:	e3 c0       	rjmp	.+454    	; 0x806 <main+0x2c0>
 640:	ef cf       	rjmp	.-34     	; 0x620 <main+0xda>
 642:	f7 01       	movw	r30, r14
 644:	90 82       	st	Z, r9
		case (0) :
		PORTL = (1 << PINL7);//debug light to show we're in polling stage
 646:	ec cf       	rjmp	.-40     	; 0x620 <main+0xda>
 648:	80 e4       	ldi	r24, 0x40	; 64
		goto POLLING_STAGE;
 64a:	f7 01       	movw	r30, r14
		goto POLLING_STAGE;
	}//switch STATE

	REFLECTIVE_STAGE:
	{
		PORTL = (1 << PINL6);//debug light to show we're in the reflective stage
 64c:	80 83       	st	Z, r24
 64e:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <ADC_result_flag>
		//Checks if ADC conversion has finished
		if(ADC_result_flag == 1){
 652:	81 30       	cpi	r24, 0x01	; 1
 654:	29 f7       	brne	.-54     	; 0x620 <main+0xda>
 656:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <ADC_result_flag>
			//reset flag and start new conversion if conversion is finished
			ADC_result_flag = 0;
 65a:	ea e7       	ldi	r30, 0x7A	; 122
 65c:	f0 e0       	ldi	r31, 0x00	; 0
			ADCSRA |= (1 << ADSC);
 65e:	80 81       	ld	r24, Z
 660:	80 64       	ori	r24, 0x40	; 64
 662:	80 83       	st	Z, r24
 664:	dd cf       	rjmp	.-70     	; 0x620 <main+0xda>
 666:	80 e2       	ldi	r24, 0x20	; 32
 668:	f7 01       	movw	r30, r14
		} //do nothing if an ADC convert is in progress
		goto POLLING_STAGE;
	}
	BUCKET_STAGE:
	{
		PORTL = (1 << PINL5);//debug light to show we're in the bucket stage
 66a:	80 83       	st	Z, r24
 66c:	ae 01       	movw	r20, r28
		dequeue(&head,&tail,&rtnLink);//dequeue first item from linked list
 66e:	47 5f       	subi	r20, 0xF7	; 247
 670:	5f 4f       	sbci	r21, 0xFF	; 255
 672:	be 01       	movw	r22, r28
 674:	6b 5f       	subi	r22, 0xFB	; 251
 676:	7f 4f       	sbci	r23, 0xFF	; 255
 678:	ce 01       	movw	r24, r28
 67a:	03 96       	adiw	r24, 0x03	; 3
 67c:	4e df       	rcall	.-356    	; 0x51a <dequeue>
 67e:	e0 91 87 03 	lds	r30, 0x0387	; 0x800387 <sorterbin>
		//check if item is the same as last sorted item, skip bin movement if item is the same
		if((binMovements[sorterbin][rtnLink->e.number])){
 682:	f0 91 88 03 	lds	r31, 0x0388	; 0x800388 <sorterbin+0x1>
 686:	a9 85       	ldd	r26, Y+9	; 0x09
 688:	ba 85       	ldd	r27, Y+10	; 0x0a
 68a:	8c 91       	ld	r24, X
 68c:	ee 0f       	add	r30, r30
 68e:	ff 1f       	adc	r31, r31
 690:	ee 0f       	add	r30, r30
 692:	ff 1f       	adc	r31, r31
 694:	ed 58       	subi	r30, 0x8D	; 141
 696:	fc 4f       	sbci	r31, 0xFC	; 252
 698:	e8 0f       	add	r30, r24
 69a:	f1 1d       	adc	r31, r1
 69c:	80 81       	ld	r24, Z
 69e:	88 23       	and	r24, r24
 6a0:	41 f1       	breq	.+80     	; 0x6f2 <main+0x1ac>
 6a2:	83 e0       	ldi	r24, 0x03	; 3
 6a4:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <motorState>
			motorState = 0x03;//stop motor
 6a8:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <motorState>
			PORTB = (motorState & 0x03);
 6ac:	83 70       	andi	r24, 0x03	; 3
 6ae:	85 b9       	out	0x05, r24	; 5
 6b0:	c0 9b       	sbis	0x18, 0	; 24
 6b2:	fe cf       	rjmp	.-4      	; 0x6b0 <main+0x16a>
			while (!(TIFR3 & (1 << TOV3))){}//delay to make sure that if an item was directly in front of this item,
 6b4:	e0 91 87 03 	lds	r30, 0x0387	; 0x800387 <sorterbin>
											//it has enough time to fall into the bin
			moveStepper(binMovements[sorterbin][rtnLink->e.number],&stepNum);//move stepper according to lookup table
 6b8:	f0 91 88 03 	lds	r31, 0x0388	; 0x800388 <sorterbin+0x1>
 6bc:	a9 85       	ldd	r26, Y+9	; 0x09
 6be:	ba 85       	ldd	r27, Y+10	; 0x0a
 6c0:	8c 91       	ld	r24, X
 6c2:	ee 0f       	add	r30, r30
 6c4:	ff 1f       	adc	r31, r31
 6c6:	ee 0f       	add	r30, r30
 6c8:	ff 1f       	adc	r31, r31
 6ca:	ed 58       	subi	r30, 0x8D	; 141
 6cc:	fc 4f       	sbci	r31, 0xFC	; 252
 6ce:	e8 0f       	add	r30, r24
 6d0:	f1 1d       	adc	r31, r1
 6d2:	80 81       	ld	r24, Z
 6d4:	be 01       	movw	r22, r28
 6d6:	6f 5f       	subi	r22, 0xFF	; 255
 6d8:	7f 4f       	sbci	r23, 0xFF	; 255
 6da:	08 2e       	mov	r0, r24
 6dc:	00 0c       	add	r0, r0
 6de:	99 0b       	sbc	r25, r25
 6e0:	43 dd       	rcall	.-1402   	; 0x168 <moveStepper>
 6e2:	e9 85       	ldd	r30, Y+9	; 0x09
 6e4:	fa 85       	ldd	r31, Y+10	; 0x0a
			sorterbin = rtnLink->e.number;//Set current bin number for next sort
 6e6:	80 81       	ld	r24, Z
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <sorterbin+0x1>
 6ee:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <sorterbin>
 6f2:	e9 85       	ldd	r30, Y+9	; 0x09
 6f4:	fa 85       	ldd	r31, Y+10	; 0x0a
		}
		sorted_items[rtnLink->e.number]++;//increment sorted item list
 6f6:	e0 81       	ld	r30, Z
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	e7 57       	subi	r30, 0x77	; 119
 6fc:	fc 4f       	sbci	r31, 0xFC	; 252
 6fe:	80 81       	ld	r24, Z
 700:	8f 5f       	subi	r24, 0xFF	; 255
 702:	80 83       	st	Z, r24
 704:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <unsorted_items>
		unsorted_items--;//decrement unsorted item list
 708:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <unsorted_items+0x1>
 70c:	01 97       	sbiw	r24, 0x01	; 1
 70e:	90 93 86 03 	sts	0x0386, r25	; 0x800386 <unsorted_items+0x1>
 712:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <unsorted_items>
		
		//Write current sorted items to display
		LCDClear();
 716:	60 e0       	ldi	r22, 0x00	; 0
 718:	81 e0       	ldi	r24, 0x01	; 1
		LCDGotoXY(0,0);
 71a:	ff dd       	rcall	.-1026   	; 0x31a <LCDByte>
 71c:	60 e0       	ldi	r22, 0x00	; 0
 71e:	80 e0       	ldi	r24, 0x00	; 0
		LCDWriteString("BL AL WI FE UN");
 720:	c1 de       	rcall	.-638    	; 0x4a4 <LCDGotoXY>
 722:	88 e5       	ldi	r24, 0x58	; 88
 724:	93 e0       	ldi	r25, 0x03	; 3
		LCDGotoXY(0,1);
 726:	53 de       	rcall	.-858    	; 0x3ce <LCDWriteString>
 728:	61 e0       	ldi	r22, 0x01	; 1
 72a:	80 e0       	ldi	r24, 0x00	; 0
		LCDWriteInt(sorted_items[0],2);
 72c:	bb de       	rcall	.-650    	; 0x4a4 <LCDGotoXY>
 72e:	f8 01       	movw	r30, r16
 730:	80 81       	ld	r24, Z
 732:	62 e0       	ldi	r22, 0x02	; 2
 734:	70 e0       	ldi	r23, 0x00	; 0
 736:	90 e0       	ldi	r25, 0x00	; 0
		LCDGotoXY(3,1);
 738:	59 de       	rcall	.-846    	; 0x3ec <LCDWriteInt>
 73a:	61 e0       	ldi	r22, 0x01	; 1
 73c:	83 e0       	ldi	r24, 0x03	; 3
		LCDWriteInt(sorted_items[1],2);
 73e:	b2 de       	rcall	.-668    	; 0x4a4 <LCDGotoXY>
 740:	f8 01       	movw	r30, r16
 742:	81 81       	ldd	r24, Z+1	; 0x01
 744:	62 e0       	ldi	r22, 0x02	; 2
 746:	70 e0       	ldi	r23, 0x00	; 0
 748:	90 e0       	ldi	r25, 0x00	; 0
		LCDGotoXY(6,1);
 74a:	50 de       	rcall	.-864    	; 0x3ec <LCDWriteInt>
 74c:	61 e0       	ldi	r22, 0x01	; 1
 74e:	86 e0       	ldi	r24, 0x06	; 6
		LCDWriteInt(sorted_items[2],2);
 750:	a9 de       	rcall	.-686    	; 0x4a4 <LCDGotoXY>
 752:	f8 01       	movw	r30, r16
 754:	82 81       	ldd	r24, Z+2	; 0x02
 756:	62 e0       	ldi	r22, 0x02	; 2
 758:	70 e0       	ldi	r23, 0x00	; 0
 75a:	90 e0       	ldi	r25, 0x00	; 0
		LCDGotoXY(9,1);
 75c:	47 de       	rcall	.-882    	; 0x3ec <LCDWriteInt>
 75e:	61 e0       	ldi	r22, 0x01	; 1
 760:	89 e0       	ldi	r24, 0x09	; 9
		LCDWriteInt(sorted_items[3],2);
 762:	a0 de       	rcall	.-704    	; 0x4a4 <LCDGotoXY>
 764:	f8 01       	movw	r30, r16
 766:	83 81       	ldd	r24, Z+3	; 0x03
 768:	62 e0       	ldi	r22, 0x02	; 2
 76a:	70 e0       	ldi	r23, 0x00	; 0
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	3e de       	rcall	.-900    	; 0x3ec <LCDWriteInt>
		LCDGotoXY(12,1);
 770:	61 e0       	ldi	r22, 0x01	; 1
 772:	8c e0       	ldi	r24, 0x0C	; 12
 774:	97 de       	rcall	.-722    	; 0x4a4 <LCDGotoXY>
 776:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <unsorted_items>
		LCDWriteInt(unsorted_items,2);
 77a:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <unsorted_items+0x1>
 77e:	62 e0       	ldi	r22, 0x02	; 2
 780:	70 e0       	ldi	r23, 0x00	; 0
 782:	34 de       	rcall	.-920    	; 0x3ec <LCDWriteInt>
 784:	89 85       	ldd	r24, Y+9	; 0x09
 786:	9a 85       	ldd	r25, Y+10	; 0x0a
		free(rtnLink);
 788:	05 d3       	rcall	.+1546   	; 0xd94 <free>
 78a:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <__data_end>
 78e:	81 30       	cpi	r24, 0x01	; 1
		//Reset the state variable
		if(rampDown == 1){
 790:	21 f4       	brne	.+8      	; 0x79a <main+0x254>
 792:	83 e0       	ldi	r24, 0x03	; 3
 794:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <STATE>
			STATE = 3;//goto end stage if ramp down button has been pressed
 798:	02 c0       	rjmp	.+4      	; 0x79e <main+0x258>
 79a:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <STATE>
 79e:	82 e0       	ldi	r24, 0x02	; 2
			} else {
			STATE = 0;//goto polling stage otherwise
 7a0:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <motorState>
		};
		motorState = 0x02;//restart belt
 7a4:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <motorState>
 7a8:	83 70       	andi	r24, 0x03	; 3
		PORTB = motorState & 0x03;
 7aa:	85 b9       	out	0x05, r24	; 5
 7ac:	80 ed       	ldi	r24, 0xD0	; 208
 7ae:	f5 01       	movw	r30, r10
 7b0:	80 83       	st	Z, r24

		//reset timer
		//time to count to max value: 256 *(2^16-1) =16,776,960 cycles ~= 2 seconds
		//((2^16-1)-(56000))*256/(8*10^6) =~ 0.23s, 56000 = D098
		TCNT3H = 0xD0;
 7b2:	88 e9       	ldi	r24, 0x98	; 152
 7b4:	f6 01       	movw	r30, r12
 7b6:	80 83       	st	Z, r24
		TCNT3L = 0x98;
 7b8:	c0 9a       	sbi	0x18, 0	; 24
 7ba:	32 cf       	rjmp	.-412    	; 0x620 <main+0xda>
 7bc:	80 ea       	ldi	r24, 0xA0	; 160
		TIFR3 |= (1 << TOV3);
 7be:	f7 01       	movw	r30, r14
		goto POLLING_STAGE;
 7c0:	80 83       	st	Z, r24
	}
	END:
	{
		//triggered when ramp down button is pressed
		PORTL = (1 << PINL7) | (1 << PINL5);//debug lights
 7c2:	25 e0       	ldi	r18, 0x05	; 5
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	f5 01       	movw	r30, r10
 7c8:	80 82       	st	Z, r8
 7ca:	f6 01       	movw	r30, r12
		//delay to make sure belt is clear. for loop goes through five iterations.
		//The delay timer in each iteration counts up for roughly one second before toping out.
		//This creates a five second delay.
		for(int i = 0; i < 5; i++){
			TCNT3H = 0x80;
 7cc:	10 82       	st	Z, r1
 7ce:	c0 9a       	sbi	0x18, 0	; 24
			TCNT3L = 0x00;
 7d0:	0c c0       	rjmp	.+24     	; 0x7ea <main+0x2a4>
 7d2:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <STATE>
			TIFR3 |= (1 << TOV3);
			while(!(TIFR3 & (1 << TOV3))){
 7d6:	83 30       	cpi	r24, 0x03	; 3
				if(STATE != 3){//if an interrupt switches the state while waiting, 
 7d8:	41 f0       	breq	.+16     	; 0x7ea <main+0x2a4>
 7da:	87 ee       	ldi	r24, 0xE7	; 231
 7dc:	f5 01       	movw	r30, r10
 7de:	80 83       	st	Z, r24
							   //reset timer 3 and goto polling stage
					TCNT3H = 0xE7;
 7e0:	85 e9       	ldi	r24, 0x95	; 149
 7e2:	f6 01       	movw	r30, r12
 7e4:	80 83       	st	Z, r24
					TCNT3L = 0x95;
 7e6:	c0 9a       	sbi	0x18, 0	; 24
 7e8:	1b cf       	rjmp	.-458    	; 0x620 <main+0xda>
 7ea:	c0 9b       	sbis	0x18, 0	; 24
					TIFR3 |= (1 << TOV3);
 7ec:	f2 cf       	rjmp	.-28     	; 0x7d2 <main+0x28c>
					goto POLLING_STAGE;
 7ee:	21 50       	subi	r18, 0x01	; 1
		//This creates a five second delay.
		for(int i = 0; i < 5; i++){
			TCNT3H = 0x80;
			TCNT3L = 0x00;
			TIFR3 |= (1 << TOV3);
			while(!(TIFR3 & (1 << TOV3))){
 7f0:	31 09       	sbc	r19, r1
 7f2:	49 f7       	brne	.-46     	; 0x7c6 <main+0x280>
 7f4:	83 e0       	ldi	r24, 0x03	; 3
		//triggered when ramp down button is pressed
		PORTL = (1 << PINL7) | (1 << PINL5);//debug lights
		//delay to make sure belt is clear. for loop goes through five iterations.
		//The delay timer in each iteration counts up for roughly one second before toping out.
		//This creates a five second delay.
		for(int i = 0; i < 5; i++){
 7f6:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <motorState>
					TIFR3 |= (1 << TOV3);
					goto POLLING_STAGE;
				}
			}
		}
		motorState = 0x03;//stop the motor
 7fa:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <motorState>
		PORTB = (motorState & 0x03);
 7fe:	83 70       	andi	r24, 0x03	; 3
 800:	85 b9       	out	0x05, r24	; 5
 802:	f8 94       	cli
		cli();//infinite idle loop
 804:	ff cf       	rjmp	.-2      	; 0x804 <main+0x2be>
	}
	
	ENQUEUE:
	{
		//Enqueue item on falling edge of OR
		unsorted_items++;//increment unsorted item list
 806:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <unsorted_items>
 80a:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <unsorted_items+0x1>
 80e:	01 96       	adiw	r24, 0x01	; 1
 810:	90 93 86 03 	sts	0x0386, r25	; 0x800386 <unsorted_items+0x1>
 814:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <unsorted_items>
		PORTL = (1 << PINL5);//debug light
 818:	80 e2       	ldi	r24, 0x20	; 32
 81a:	f7 01       	movw	r30, r14
 81c:	80 83       	st	Z, r24
		LCDClear();
 81e:	60 e0       	ldi	r22, 0x00	; 0
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	7b dd       	rcall	.-1290   	; 0x31a <LCDByte>
 824:	60 e0       	ldi	r22, 0x00	; 0
		//Following array holds Highest ADC Values for white, FE and AL for sorting
		//Values are changed during the calibration procedure
		uint16_t material_types[] = {920, /*Black derlin low limit*/
			800, //white delrin/steel boundary
		150 /*steel/aluminum boundary*/};
		LCDGotoXY(12,0);
 826:	8c e0       	ldi	r24, 0x0C	; 12
 828:	3d de       	rcall	.-902    	; 0x4a4 <LCDGotoXY>
 82a:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <ADC_result>
		LCDWriteInt(ADC_result,3);//write ADC value to display for debug and calibration purposes
 82e:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <ADC_result+0x1>
 832:	63 e0       	ldi	r22, 0x03	; 3
 834:	70 e0       	ldi	r23, 0x00	; 0
 836:	da dd       	rcall	.-1100   	; 0x3ec <LCDWriteInt>
 838:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <ADC_result>
 83c:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <ADC_result+0x1>
		uint8_t material;// variable used for storing material type according to ENUM defined at program start
		if(ADC_result > material_types[0]){
 840:	89 39       	cpi	r24, 0x99	; 153
 842:	93 40       	sbci	r25, 0x03	; 3
 844:	88 f4       	brcc	.+34     	; 0x868 <main+0x322>
 846:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <ADC_result>
 84a:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <ADC_result+0x1>
			material = BLACK;
			} else if (ADC_result > material_types[1]) {
 84e:	81 32       	cpi	r24, 0x21	; 33
 850:	93 40       	sbci	r25, 0x03	; 3
 852:	60 f4       	brcc	.+24     	; 0x86c <main+0x326>
 854:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <ADC_result>
			material = WHITE;
			} else if (ADC_result > material_types[2]) {
 858:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <ADC_result+0x1>
 85c:	87 39       	cpi	r24, 0x97	; 151
 85e:	91 05       	cpc	r25, r1
 860:	48 f4       	brcc	.+18     	; 0x874 <main+0x32e>
 862:	77 24       	eor	r7, r7
			material = FE;
			} else {
			material = AL;
 864:	73 94       	inc	r7
 866:	0a c0       	rjmp	.+20     	; 0x87c <main+0x336>
		150 /*steel/aluminum boundary*/};
		LCDGotoXY(12,0);
		LCDWriteInt(ADC_result,3);//write ADC value to display for debug and calibration purposes
		uint8_t material;// variable used for storing material type according to ENUM defined at program start
		if(ADC_result > material_types[0]){
			material = BLACK;
 868:	71 2c       	mov	r7, r1
 86a:	08 c0       	rjmp	.+16     	; 0x87c <main+0x336>
			} else if (ADC_result > material_types[1]) {
			material = WHITE;
 86c:	68 94       	set
 86e:	77 24       	eor	r7, r7
 870:	71 f8       	bld	r7, 1
			} else if (ADC_result > material_types[2]) {
			material = FE;
 872:	04 c0       	rjmp	.+8      	; 0x87c <main+0x336>
 874:	0f 2e       	mov	r0, r31
 876:	f3 e0       	ldi	r31, 0x03	; 3
 878:	7f 2e       	mov	r7, r31
			} else {
			material = AL;
		}
		initLink(&newLink); //creates new link and stores input to linked lsit.
 87a:	f0 2d       	mov	r31, r0
 87c:	ce 01       	movw	r24, r28
 87e:	07 96       	adiw	r24, 0x07	; 7
		newLink->e.number = material;
 880:	20 de       	rcall	.-960    	; 0x4c2 <initLink>
 882:	ef 81       	ldd	r30, Y+7	; 0x07
		enqueue(&head, &tail, &newLink);
 884:	f8 85       	ldd	r31, Y+8	; 0x08
 886:	70 82       	st	Z, r7
 888:	ae 01       	movw	r20, r28
 88a:	49 5f       	subi	r20, 0xF9	; 249
 88c:	5f 4f       	sbci	r21, 0xFF	; 255
 88e:	be 01       	movw	r22, r28
 890:	6b 5f       	subi	r22, 0xFB	; 251
 892:	7f 4f       	sbci	r23, 0xFF	; 255
		LCDGotoXY(0,0);//displays current sorted items
 894:	ce 01       	movw	r24, r28
 896:	03 96       	adiw	r24, 0x03	; 3
 898:	22 de       	rcall	.-956    	; 0x4de <enqueue>
		LCDWriteString("BL AL WI FE");
 89a:	60 e0       	ldi	r22, 0x00	; 0
 89c:	80 e0       	ldi	r24, 0x00	; 0
 89e:	02 de       	rcall	.-1020   	; 0x4a4 <LCDGotoXY>
		LCDGotoXY(0,1);
 8a0:	87 e6       	ldi	r24, 0x67	; 103
 8a2:	93 e0       	ldi	r25, 0x03	; 3
 8a4:	94 dd       	rcall	.-1240   	; 0x3ce <LCDWriteString>
		LCDWriteInt(sorted_items[0],2);
 8a6:	61 e0       	ldi	r22, 0x01	; 1
 8a8:	80 e0       	ldi	r24, 0x00	; 0
 8aa:	fc dd       	rcall	.-1032   	; 0x4a4 <LCDGotoXY>
 8ac:	f8 01       	movw	r30, r16
 8ae:	80 81       	ld	r24, Z
 8b0:	62 e0       	ldi	r22, 0x02	; 2
 8b2:	70 e0       	ldi	r23, 0x00	; 0
		LCDGotoXY(3,1);
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	9a dd       	rcall	.-1228   	; 0x3ec <LCDWriteInt>
 8b8:	61 e0       	ldi	r22, 0x01	; 1
 8ba:	83 e0       	ldi	r24, 0x03	; 3
		LCDWriteInt(sorted_items[1],2);
 8bc:	f3 dd       	rcall	.-1050   	; 0x4a4 <LCDGotoXY>
 8be:	f8 01       	movw	r30, r16
 8c0:	81 81       	ldd	r24, Z+1	; 0x01
 8c2:	62 e0       	ldi	r22, 0x02	; 2
 8c4:	70 e0       	ldi	r23, 0x00	; 0
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	91 dd       	rcall	.-1246   	; 0x3ec <LCDWriteInt>
		LCDGotoXY(6,1);
 8ca:	61 e0       	ldi	r22, 0x01	; 1
 8cc:	86 e0       	ldi	r24, 0x06	; 6
 8ce:	ea dd       	rcall	.-1068   	; 0x4a4 <LCDGotoXY>
 8d0:	f8 01       	movw	r30, r16
		LCDWriteInt(sorted_items[2],2);
 8d2:	82 81       	ldd	r24, Z+2	; 0x02
 8d4:	62 e0       	ldi	r22, 0x02	; 2
 8d6:	70 e0       	ldi	r23, 0x00	; 0
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	88 dd       	rcall	.-1264   	; 0x3ec <LCDWriteInt>
 8dc:	61 e0       	ldi	r22, 0x01	; 1
 8de:	89 e0       	ldi	r24, 0x09	; 9
		LCDGotoXY(9,1);
 8e0:	e1 dd       	rcall	.-1086   	; 0x4a4 <LCDGotoXY>
 8e2:	f8 01       	movw	r30, r16
 8e4:	83 81       	ldd	r24, Z+3	; 0x03
 8e6:	62 e0       	ldi	r22, 0x02	; 2
		LCDWriteInt(sorted_items[3],2);
 8e8:	70 e0       	ldi	r23, 0x00	; 0
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	7f dd       	rcall	.-1282   	; 0x3ec <LCDWriteInt>
 8ee:	8f ef       	ldi	r24, 0xFF	; 255
 8f0:	93 e0       	ldi	r25, 0x03	; 3
 8f2:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <ADC_result+0x1>
		ADC_result = 1023;//reset ADC
 8f6:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <ADC_result>
 8fa:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <STATE>
 8fe:	90 ce       	rjmp	.-736    	; 0x620 <main+0xda>

00000900 <__vector_1>:
 900:	1f 92       	push	r1
		STATE = 0;
 902:	0f 92       	push	r0
 904:	0f b6       	in	r0, 0x3f	; 63
 906:	0f 92       	push	r0
	}
} // end main

// EX interrupt to enter bucket stage
ISR(INT0_vect)
{
 908:	11 24       	eor	r1, r1
 90a:	8f 93       	push	r24
	STATE = 2;//set state to bucket stage
 90c:	82 e0       	ldi	r24, 0x02	; 2
 90e:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <STATE>
}
 912:	8f 91       	pop	r24
 914:	0f 90       	pop	r0
 916:	0f be       	out	0x3f, r0	; 63
 918:	0f 90       	pop	r0
 91a:	1f 90       	pop	r1
 91c:	18 95       	reti

0000091e <__vector_2>:

//Interrupt for ramp down button
ISR(INT1_vect){
 91e:	1f 92       	push	r1
 920:	0f 92       	push	r0
 922:	0f b6       	in	r0, 0x3f	; 63
 924:	0f 92       	push	r0
 926:	11 24       	eor	r1, r1
 928:	0b b6       	in	r0, 0x3b	; 59
 92a:	0f 92       	push	r0
 92c:	2f 93       	push	r18
 92e:	3f 93       	push	r19
 930:	4f 93       	push	r20
 932:	5f 93       	push	r21
 934:	6f 93       	push	r22
 936:	7f 93       	push	r23
 938:	8f 93       	push	r24
 93a:	9f 93       	push	r25
 93c:	af 93       	push	r26
 93e:	bf 93       	push	r27
 940:	ef 93       	push	r30
 942:	ff 93       	push	r31
	mTimer(20);//button de-bouncing
 944:	84 e1       	ldi	r24, 0x14	; 20
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	37 d1       	rcall	.+622    	; 0xbb8 <mTimer>
	rampDown = 1;//set ramp down flag
 94a:	81 e0       	ldi	r24, 0x01	; 1
 94c:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <__data_end>
	STATE = 3;//set STATE to END
 950:	83 e0       	ldi	r24, 0x03	; 3
 952:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <STATE>
	EIFR |= (1 << INTF1);//interrupt flag will be re triggered while waiting for the button de-bouncing.
 956:	e1 9a       	sbi	0x1c, 1	; 28
						 //Need to clear it or else it will infinitely loop through this interrupt
}
 958:	ff 91       	pop	r31
 95a:	ef 91       	pop	r30
 95c:	bf 91       	pop	r27
 95e:	af 91       	pop	r26
 960:	9f 91       	pop	r25
 962:	8f 91       	pop	r24
 964:	7f 91       	pop	r23
 966:	6f 91       	pop	r22
 968:	5f 91       	pop	r21
 96a:	4f 91       	pop	r20
 96c:	3f 91       	pop	r19
 96e:	2f 91       	pop	r18
 970:	0f 90       	pop	r0
 972:	0b be       	out	0x3b, r0	; 59
 974:	0f 90       	pop	r0
 976:	0f be       	out	0x3f, r0	; 63
 978:	0f 90       	pop	r0
 97a:	1f 90       	pop	r1
 97c:	18 95       	reti

0000097e <__vector_3>:

//Controls program pause button. Holds the program in the interrupt until pause is pressed again.
ISR(INT2_vect)
{
 97e:	1f 92       	push	r1
 980:	0f 92       	push	r0
 982:	0f b6       	in	r0, 0x3f	; 63
 984:	0f 92       	push	r0
 986:	11 24       	eor	r1, r1
 988:	0b b6       	in	r0, 0x3b	; 59
 98a:	0f 92       	push	r0
 98c:	2f 93       	push	r18
 98e:	3f 93       	push	r19
 990:	4f 93       	push	r20
 992:	5f 93       	push	r21
 994:	6f 93       	push	r22
 996:	7f 93       	push	r23
 998:	8f 93       	push	r24
 99a:	9f 93       	push	r25
 99c:	af 93       	push	r26
 99e:	bf 93       	push	r27
 9a0:	cf 93       	push	r28
 9a2:	df 93       	push	r29
 9a4:	ef 93       	push	r30
 9a6:	ff 93       	push	r31
	LCDClear();
 9a8:	60 e0       	ldi	r22, 0x00	; 0
 9aa:	81 e0       	ldi	r24, 0x01	; 1
 9ac:	b6 dc       	rcall	.-1684   	; 0x31a <LCDByte>
	LCDGotoXY(0,0);
 9ae:	60 e0       	ldi	r22, 0x00	; 0
 9b0:	80 e0       	ldi	r24, 0x00	; 0
 9b2:	78 dd       	rcall	.-1296   	; 0x4a4 <LCDGotoXY>
	LCDWriteString("BL AL WI FE UN");
 9b4:	88 e5       	ldi	r24, 0x58	; 88
 9b6:	93 e0       	ldi	r25, 0x03	; 3
 9b8:	0a dd       	rcall	.-1516   	; 0x3ce <LCDWriteString>
	LCDGotoXY(0,1);
 9ba:	61 e0       	ldi	r22, 0x01	; 1
 9bc:	80 e0       	ldi	r24, 0x00	; 0
 9be:	72 dd       	rcall	.-1308   	; 0x4a4 <LCDGotoXY>
 9c0:	c9 e8       	ldi	r28, 0x89	; 137
	LCDWriteInt(sorted_items[0],2);
 9c2:	d3 e0       	ldi	r29, 0x03	; 3
 9c4:	88 81       	ld	r24, Y
 9c6:	62 e0       	ldi	r22, 0x02	; 2
 9c8:	70 e0       	ldi	r23, 0x00	; 0
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	0f dd       	rcall	.-1506   	; 0x3ec <LCDWriteInt>
	LCDGotoXY(3,1);
 9ce:	61 e0       	ldi	r22, 0x01	; 1
 9d0:	83 e0       	ldi	r24, 0x03	; 3
 9d2:	68 dd       	rcall	.-1328   	; 0x4a4 <LCDGotoXY>
	LCDWriteInt(sorted_items[1],2);
 9d4:	89 81       	ldd	r24, Y+1	; 0x01
 9d6:	62 e0       	ldi	r22, 0x02	; 2
 9d8:	70 e0       	ldi	r23, 0x00	; 0
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	07 dd       	rcall	.-1522   	; 0x3ec <LCDWriteInt>
	LCDGotoXY(6,1);
 9de:	61 e0       	ldi	r22, 0x01	; 1
 9e0:	86 e0       	ldi	r24, 0x06	; 6
 9e2:	60 dd       	rcall	.-1344   	; 0x4a4 <LCDGotoXY>
	LCDWriteInt(sorted_items[2],2);
 9e4:	8a 81       	ldd	r24, Y+2	; 0x02
 9e6:	62 e0       	ldi	r22, 0x02	; 2
 9e8:	70 e0       	ldi	r23, 0x00	; 0
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	ff dc       	rcall	.-1538   	; 0x3ec <LCDWriteInt>
	LCDGotoXY(9,1);
 9ee:	61 e0       	ldi	r22, 0x01	; 1
 9f0:	89 e0       	ldi	r24, 0x09	; 9
 9f2:	58 dd       	rcall	.-1360   	; 0x4a4 <LCDGotoXY>
	LCDWriteInt(sorted_items[3],2);
 9f4:	8b 81       	ldd	r24, Y+3	; 0x03
 9f6:	62 e0       	ldi	r22, 0x02	; 2
 9f8:	70 e0       	ldi	r23, 0x00	; 0
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	f7 dc       	rcall	.-1554   	; 0x3ec <LCDWriteInt>
	LCDGotoXY(12,1);
 9fe:	61 e0       	ldi	r22, 0x01	; 1
 a00:	8c e0       	ldi	r24, 0x0C	; 12
 a02:	50 dd       	rcall	.-1376   	; 0x4a4 <LCDGotoXY>
 a04:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <unsorted_items>
	LCDWriteInt(unsorted_items,2);
 a08:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <unsorted_items+0x1>
 a0c:	62 e0       	ldi	r22, 0x02	; 2
 a0e:	70 e0       	ldi	r23, 0x00	; 0
 a10:	ed dc       	rcall	.-1574   	; 0x3ec <LCDWriteInt>
 a12:	83 e0       	ldi	r24, 0x03	; 3
	motorState = 0x03;//stop motor
 a14:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <motorState>
 a18:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <motorState>
	PORTB = (motorState & 0x03);
 a1c:	83 70       	andi	r24, 0x03	; 3
 a1e:	85 b9       	out	0x05, r24	; 5
	while(PIND & (1 << PIND2)){};//wait for button to be released
 a20:	4a 99       	sbic	0x09, 2	; 9
 a22:	fe cf       	rjmp	.-4      	; 0xa20 <__vector_3+0xa2>
	mTimer(20);
 a24:	84 e1       	ldi	r24, 0x14	; 20
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	c7 d0       	rcall	.+398    	; 0xbb8 <mTimer>
	while (!(PIND & (1 << PIND2))){};//wait for button to be pressed again
 a2a:	4a 9b       	sbis	0x09, 2	; 9
 a2c:	fe cf       	rjmp	.-4      	; 0xa2a <__vector_3+0xac>
	LCDClear();
 a2e:	60 e0       	ldi	r22, 0x00	; 0
 a30:	81 e0       	ldi	r24, 0x01	; 1
 a32:	73 dc       	rcall	.-1818   	; 0x31a <LCDByte>
 a34:	84 e1       	ldi	r24, 0x14	; 20
	mTimer(20);
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	bf d0       	rcall	.+382    	; 0xbb8 <mTimer>
 a3a:	4a 99       	sbic	0x09, 2	; 9
 a3c:	fe cf       	rjmp	.-4      	; 0xa3a <__vector_3+0xbc>
	while(PIND & (1 << PIND2)){};//wait for button to be released
 a3e:	84 e1       	ldi	r24, 0x14	; 20
 a40:	90 e0       	ldi	r25, 0x00	; 0
	mTimer(20);
 a42:	ba d0       	rcall	.+372    	; 0xbb8 <mTimer>
 a44:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <STATE>
 a48:	82 30       	cpi	r24, 0x02	; 2
	if(STATE == 2) {//if in bucket stage
 a4a:	39 f0       	breq	.+14     	; 0xa5a <__vector_3+0xdc>
 a4c:	82 e0       	ldi	r24, 0x02	; 2
 a4e:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <motorState>
		//do nothing
		} else { //restart the motor otherwise
		motorState = 0x02;
 a52:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <motorState>
 a56:	83 70       	andi	r24, 0x03	; 3
		PORTB = (motorState & 0x03);
 a58:	85 b9       	out	0x05, r24	; 5
 a5a:	e2 9a       	sbi	0x1c, 2	; 28
 a5c:	ff 91       	pop	r31
 a5e:	ef 91       	pop	r30
	}
	EIFR |= (1 << INTF2);//interrupt flag will be re triggered while waiting for the button de-bouncing.
 a60:	df 91       	pop	r29
						 //need to clear it or else it will infinitely loop through this interrupt
}
 a62:	cf 91       	pop	r28
 a64:	bf 91       	pop	r27
 a66:	af 91       	pop	r26
 a68:	9f 91       	pop	r25
 a6a:	8f 91       	pop	r24
 a6c:	7f 91       	pop	r23
 a6e:	6f 91       	pop	r22
 a70:	5f 91       	pop	r21
 a72:	4f 91       	pop	r20
 a74:	3f 91       	pop	r19
 a76:	2f 91       	pop	r18
 a78:	0f 90       	pop	r0
 a7a:	0b be       	out	0x3b, r0	; 59
 a7c:	0f 90       	pop	r0
 a7e:	0f be       	out	0x3f, r0	; 63
 a80:	0f 90       	pop	r0
 a82:	1f 90       	pop	r1
 a84:	18 95       	reti

00000a86 <__vector_6>:
 a86:	1f 92       	push	r1
 a88:	0f 92       	push	r0
 a8a:	0f b6       	in	r0, 0x3f	; 63

// OR Sensor Interupt
ISR(INT5_vect)
{
 a8c:	0f 92       	push	r0
 a8e:	11 24       	eor	r1, r1
 a90:	0b b6       	in	r0, 0x3b	; 59
 a92:	0f 92       	push	r0
 a94:	2f 93       	push	r18
 a96:	3f 93       	push	r19
 a98:	4f 93       	push	r20
 a9a:	5f 93       	push	r21
 a9c:	6f 93       	push	r22
 a9e:	7f 93       	push	r23
 aa0:	8f 93       	push	r24
 aa2:	9f 93       	push	r25
 aa4:	af 93       	push	r26
 aa6:	bf 93       	push	r27
 aa8:	ef 93       	push	r30
 aaa:	ff 93       	push	r31
	mTimer(3);//de-bouncing
 aac:	83 e0       	ldi	r24, 0x03	; 3
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	83 d0       	rcall	.+262    	; 0xbb8 <mTimer>
	if (PINE & (1 << PINE5)) {
 ab2:	65 9b       	sbis	0x0c, 5	; 12
 ab4:	04 c0       	rjmp	.+8      	; 0xabe <__vector_6+0x38>
		//If pin is high, enter reflective stage
		STATE = 1;
 ab6:	81 e0       	ldi	r24, 0x01	; 1
 ab8:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <STATE>
 abc:	03 c0       	rjmp	.+6      	; 0xac4 <__vector_6+0x3e>
		} else {
		//if pin is low, enter ENQUEUE Stage
		STATE = 4;
 abe:	84 e0       	ldi	r24, 0x04	; 4
 ac0:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <STATE>
	}
}
 ac4:	ff 91       	pop	r31
 ac6:	ef 91       	pop	r30
 ac8:	bf 91       	pop	r27
 aca:	af 91       	pop	r26
 acc:	9f 91       	pop	r25
 ace:	8f 91       	pop	r24
 ad0:	7f 91       	pop	r23
 ad2:	6f 91       	pop	r22
 ad4:	5f 91       	pop	r21
 ad6:	4f 91       	pop	r20
 ad8:	3f 91       	pop	r19
 ada:	2f 91       	pop	r18
 adc:	0f 90       	pop	r0
 ade:	0b be       	out	0x3b, r0	; 59
 ae0:	0f 90       	pop	r0
 ae2:	0f be       	out	0x3f, r0	; 63
 ae4:	0f 90       	pop	r0
 ae6:	1f 90       	pop	r1
 ae8:	18 95       	reti

00000aea <__vector_29>:

// The interrupt will be triggered if the ADC is done =======================
ISR(ADC_vect)
{
 aea:	1f 92       	push	r1
 aec:	0f 92       	push	r0
 aee:	0f b6       	in	r0, 0x3f	; 63
 af0:	0f 92       	push	r0
 af2:	11 24       	eor	r1, r1
 af4:	2f 93       	push	r18
 af6:	4f 93       	push	r20
 af8:	5f 93       	push	r21
 afa:	8f 93       	push	r24
 afc:	9f 93       	push	r25
	uint16_t ADC_result_last = ADC_result;
 afe:	40 91 44 03 	lds	r20, 0x0344	; 0x800344 <ADC_result>
 b02:	50 91 45 03 	lds	r21, 0x0345	; 0x800345 <ADC_result+0x1>
	ADC_result = ADCL;
 b06:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <ADC_result+0x1>
 b10:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <ADC_result>
	ADC_result |= (ADCH & 0x03) << 8;
 b14:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 b18:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <ADC_result>
 b1c:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <ADC_result+0x1>
 b20:	23 70       	andi	r18, 0x03	; 3
 b22:	92 2b       	or	r25, r18
 b24:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <ADC_result+0x1>
 b28:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <ADC_result>
	if((ADC_result < ADC_result_last)){//gets us the lowest value read by the reflectivity sensor
 b2c:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <ADC_result>
 b30:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <ADC_result+0x1>
 b34:	84 17       	cp	r24, r20
 b36:	95 07       	cpc	r25, r21
 b38:	20 f0       	brcs	.+8      	; 0xb42 <__vector_29+0x58>
		} else {
		ADC_result = ADC_result_last;
 b3a:	50 93 45 03 	sts	0x0345, r21	; 0x800345 <ADC_result+0x1>
 b3e:	40 93 44 03 	sts	0x0344, r20	; 0x800344 <ADC_result>
	}
	ADC_result_flag = 1;
 b42:	81 e0       	ldi	r24, 0x01	; 1
 b44:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <ADC_result_flag>
}
 b48:	9f 91       	pop	r25
 b4a:	8f 91       	pop	r24
 b4c:	5f 91       	pop	r21
 b4e:	4f 91       	pop	r20
 b50:	2f 91       	pop	r18
 b52:	0f 90       	pop	r0
 b54:	0f be       	out	0x3f, r0	; 63
 b56:	0f 90       	pop	r0
 b58:	1f 90       	pop	r1
 b5a:	18 95       	reti

00000b5c <__vector_default>:

ISR(BADISR_vect)
{
 b5c:	1f 92       	push	r1
 b5e:	0f 92       	push	r0
 b60:	0f b6       	in	r0, 0x3f	; 63
 b62:	0f 92       	push	r0
 b64:	11 24       	eor	r1, r1
 b66:	8f 93       	push	r24
	PORTL = 0xF0;//light up everything to let us know something is bad
 b68:	80 ef       	ldi	r24, 0xF0	; 240
 b6a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 b6e:	8f 91       	pop	r24
 b70:	0f 90       	pop	r0
 b72:	0f be       	out	0x3f, r0	; 63
 b74:	0f 90       	pop	r0
 b76:	1f 90       	pop	r1
 b78:	18 95       	reti

00000b7a <pwm>:
#include <avr/interrupt.h> /* Needed for interrupt functionality */

void pwm(){
	//Step 1
	// Set Timer0 to Fast PWM mode (WGM02:0 = 011)
	TCCR0A |= (1 << WGM00) | (1 << WGM01);  // Set WGM01 and WGM00
 b7a:	84 b5       	in	r24, 0x24	; 36
 b7c:	83 60       	ori	r24, 0x03	; 3
 b7e:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~(1 << WGM02);                // Clear WGM02 for Fast PWM, TOP=0xFF
 b80:	85 b5       	in	r24, 0x25	; 37
 b82:	87 7f       	andi	r24, 0xF7	; 247
 b84:	85 bd       	out	0x25, r24	; 37
	// Enable the Output Compare Match A Interrupt for Timer 0
	//TIMSK0 |= (1 <<  (OCIE0A));// Enable overflow interrupt

	//step 3
	// Set Compare Match Output Mode to clear on compare match and set at TOP (non-inverting mode)
	TCCR0A |= (1 << COM0A1);  // Set COM0A1 to 1
 b86:	84 b5       	in	r24, 0x24	; 36
 b88:	80 68       	ori	r24, 0x80	; 128
 b8a:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1 << COM0A0); // Clear COM0A0 to 0
 b8c:	84 b5       	in	r24, 0x24	; 36
 b8e:	8f 7b       	andi	r24, 0xBF	; 191
 b90:	84 bd       	out	0x24, r24	; 36
	
	//step 4
	// Set the prescaler
	TCCR0B |= (1 << CS01);// CS02:0 = 010 (clk/64 prescale)
 b92:	85 b5       	in	r24, 0x25	; 37
 b94:	82 60       	ori	r24, 0x02	; 2
 b96:	85 bd       	out	0x25, r24	; 37
	
	//Step 5
	//For a duty cycle of 50%, ORCA should be 127, which is half of 255 rounded to nearest integer
	OCR0A = 127;
 b98:	8f e7       	ldi	r24, 0x7F	; 127
 b9a:	87 bd       	out	0x27, r24	; 39
	
	//Step 6
	DDRB |= (1 << DDB7);  // Configure PORTB7 as output (OC0A is on PB7)
 b9c:	27 9a       	sbi	0x04, 7	; 4
 b9e:	08 95       	ret

00000ba0 <pwmSet>:
}

void pwmSet(unsigned char input){//sets PWM duty cycle
	OCR0A = input;
 ba0:	87 bd       	out	0x27, r24	; 39
 ba2:	08 95       	ret

00000ba4 <timer8MHz>:
 ba4:	e1 e6       	ldi	r30, 0x61	; 97
 ba6:	f0 e0       	ldi	r31, 0x00	; 0
 ba8:	80 e8       	ldi	r24, 0x80	; 128
 baa:	80 83       	st	Z, r24
 bac:	81 e0       	ldi	r24, 0x01	; 1
 bae:	80 83       	st	Z, r24
 bb0:	82 e0       	ldi	r24, 0x02	; 2
 bb2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 bb6:	08 95       	ret

00000bb8 <mTimer>:
 bb8:	ac 01       	movw	r20, r24
 bba:	e1 e8       	ldi	r30, 0x81	; 129
 bbc:	f0 e0       	ldi	r31, 0x00	; 0
 bbe:	90 81       	ld	r25, Z
 bc0:	98 60       	ori	r25, 0x08	; 8
 bc2:	90 83       	st	Z, r25
 bc4:	88 ee       	ldi	r24, 0xE8	; 232
 bc6:	93 e0       	ldi	r25, 0x03	; 3
 bc8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 bcc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 bd0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 bd4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
 bd8:	b1 9a       	sbi	0x16, 1	; 22
 bda:	20 e0       	ldi	r18, 0x00	; 0
 bdc:	30 e0       	ldi	r19, 0x00	; 0
 bde:	05 c0       	rjmp	.+10     	; 0xbea <mTimer+0x32>
 be0:	b1 9b       	sbis	0x16, 1	; 22
 be2:	fe cf       	rjmp	.-4      	; 0xbe0 <mTimer+0x28>
 be4:	b1 9a       	sbi	0x16, 1	; 22
 be6:	2f 5f       	subi	r18, 0xFF	; 255
 be8:	3f 4f       	sbci	r19, 0xFF	; 255
 bea:	24 17       	cp	r18, r20
 bec:	35 07       	cpc	r19, r21
 bee:	1c f4       	brge	.+6      	; 0xbf6 <mTimer+0x3e>
 bf0:	b1 9b       	sbis	0x16, 1	; 22
 bf2:	f6 cf       	rjmp	.-20     	; 0xbe0 <mTimer+0x28>
 bf4:	f7 cf       	rjmp	.-18     	; 0xbe4 <mTimer+0x2c>
 bf6:	08 95       	ret

00000bf8 <uTimer>:
 bf8:	9c 01       	movw	r18, r24
 bfa:	e1 e8       	ldi	r30, 0x81	; 129
 bfc:	f0 e0       	ldi	r31, 0x00	; 0
 bfe:	90 81       	ld	r25, Z
 c00:	98 60       	ori	r25, 0x08	; 8
 c02:	90 83       	st	Z, r25
 c04:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 c08:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 c0c:	b1 9a       	sbi	0x16, 1	; 22
 c0e:	b1 9b       	sbis	0x16, 1	; 22
 c10:	fe cf       	rjmp	.-4      	; 0xc0e <uTimer+0x16>
 c12:	b1 9a       	sbi	0x16, 1	; 22
 c14:	08 95       	ret

00000c16 <__divmodhi4>:
 c16:	97 fb       	bst	r25, 7
 c18:	07 2e       	mov	r0, r23
 c1a:	16 f4       	brtc	.+4      	; 0xc20 <__divmodhi4+0xa>
 c1c:	00 94       	com	r0
 c1e:	06 d0       	rcall	.+12     	; 0xc2c <__divmodhi4_neg1>
 c20:	77 fd       	sbrc	r23, 7
 c22:	08 d0       	rcall	.+16     	; 0xc34 <__divmodhi4_neg2>
 c24:	0b d0       	rcall	.+22     	; 0xc3c <__udivmodhi4>
 c26:	07 fc       	sbrc	r0, 7
 c28:	05 d0       	rcall	.+10     	; 0xc34 <__divmodhi4_neg2>
 c2a:	3e f4       	brtc	.+14     	; 0xc3a <__divmodhi4_exit>

00000c2c <__divmodhi4_neg1>:
 c2c:	90 95       	com	r25
 c2e:	81 95       	neg	r24
 c30:	9f 4f       	sbci	r25, 0xFF	; 255
 c32:	08 95       	ret

00000c34 <__divmodhi4_neg2>:
 c34:	70 95       	com	r23
 c36:	61 95       	neg	r22
 c38:	7f 4f       	sbci	r23, 0xFF	; 255

00000c3a <__divmodhi4_exit>:
 c3a:	08 95       	ret

00000c3c <__udivmodhi4>:
 c3c:	aa 1b       	sub	r26, r26
 c3e:	bb 1b       	sub	r27, r27
 c40:	51 e1       	ldi	r21, 0x11	; 17
 c42:	07 c0       	rjmp	.+14     	; 0xc52 <__udivmodhi4_ep>

00000c44 <__udivmodhi4_loop>:
 c44:	aa 1f       	adc	r26, r26
 c46:	bb 1f       	adc	r27, r27
 c48:	a6 17       	cp	r26, r22
 c4a:	b7 07       	cpc	r27, r23
 c4c:	10 f0       	brcs	.+4      	; 0xc52 <__udivmodhi4_ep>
 c4e:	a6 1b       	sub	r26, r22
 c50:	b7 0b       	sbc	r27, r23

00000c52 <__udivmodhi4_ep>:
 c52:	88 1f       	adc	r24, r24
 c54:	99 1f       	adc	r25, r25
 c56:	5a 95       	dec	r21
 c58:	a9 f7       	brne	.-22     	; 0xc44 <__udivmodhi4_loop>
 c5a:	80 95       	com	r24
 c5c:	90 95       	com	r25
 c5e:	bc 01       	movw	r22, r24
 c60:	cd 01       	movw	r24, r26
 c62:	08 95       	ret

00000c64 <malloc>:
 c64:	0f 93       	push	r16
 c66:	1f 93       	push	r17
 c68:	cf 93       	push	r28
 c6a:	df 93       	push	r29
 c6c:	82 30       	cpi	r24, 0x02	; 2
 c6e:	91 05       	cpc	r25, r1
 c70:	10 f4       	brcc	.+4      	; 0xc76 <malloc+0x12>
 c72:	82 e0       	ldi	r24, 0x02	; 2
 c74:	90 e0       	ldi	r25, 0x00	; 0
 c76:	e0 91 90 03 	lds	r30, 0x0390	; 0x800390 <__flp>
 c7a:	f0 91 91 03 	lds	r31, 0x0391	; 0x800391 <__flp+0x1>
 c7e:	20 e0       	ldi	r18, 0x00	; 0
 c80:	30 e0       	ldi	r19, 0x00	; 0
 c82:	a0 e0       	ldi	r26, 0x00	; 0
 c84:	b0 e0       	ldi	r27, 0x00	; 0
 c86:	30 97       	sbiw	r30, 0x00	; 0
 c88:	19 f1       	breq	.+70     	; 0xcd0 <malloc+0x6c>
 c8a:	40 81       	ld	r20, Z
 c8c:	51 81       	ldd	r21, Z+1	; 0x01
 c8e:	02 81       	ldd	r16, Z+2	; 0x02
 c90:	13 81       	ldd	r17, Z+3	; 0x03
 c92:	48 17       	cp	r20, r24
 c94:	59 07       	cpc	r21, r25
 c96:	c8 f0       	brcs	.+50     	; 0xcca <malloc+0x66>
 c98:	84 17       	cp	r24, r20
 c9a:	95 07       	cpc	r25, r21
 c9c:	69 f4       	brne	.+26     	; 0xcb8 <malloc+0x54>
 c9e:	10 97       	sbiw	r26, 0x00	; 0
 ca0:	31 f0       	breq	.+12     	; 0xcae <malloc+0x4a>
 ca2:	12 96       	adiw	r26, 0x02	; 2
 ca4:	0c 93       	st	X, r16
 ca6:	12 97       	sbiw	r26, 0x02	; 2
 ca8:	13 96       	adiw	r26, 0x03	; 3
 caa:	1c 93       	st	X, r17
 cac:	27 c0       	rjmp	.+78     	; 0xcfc <malloc+0x98>
 cae:	00 93 90 03 	sts	0x0390, r16	; 0x800390 <__flp>
 cb2:	10 93 91 03 	sts	0x0391, r17	; 0x800391 <__flp+0x1>
 cb6:	22 c0       	rjmp	.+68     	; 0xcfc <malloc+0x98>
 cb8:	21 15       	cp	r18, r1
 cba:	31 05       	cpc	r19, r1
 cbc:	19 f0       	breq	.+6      	; 0xcc4 <malloc+0x60>
 cbe:	42 17       	cp	r20, r18
 cc0:	53 07       	cpc	r21, r19
 cc2:	18 f4       	brcc	.+6      	; 0xcca <malloc+0x66>
 cc4:	9a 01       	movw	r18, r20
 cc6:	bd 01       	movw	r22, r26
 cc8:	ef 01       	movw	r28, r30
 cca:	df 01       	movw	r26, r30
 ccc:	f8 01       	movw	r30, r16
 cce:	db cf       	rjmp	.-74     	; 0xc86 <malloc+0x22>
 cd0:	21 15       	cp	r18, r1
 cd2:	31 05       	cpc	r19, r1
 cd4:	f9 f0       	breq	.+62     	; 0xd14 <malloc+0xb0>
 cd6:	28 1b       	sub	r18, r24
 cd8:	39 0b       	sbc	r19, r25
 cda:	24 30       	cpi	r18, 0x04	; 4
 cdc:	31 05       	cpc	r19, r1
 cde:	80 f4       	brcc	.+32     	; 0xd00 <malloc+0x9c>
 ce0:	8a 81       	ldd	r24, Y+2	; 0x02
 ce2:	9b 81       	ldd	r25, Y+3	; 0x03
 ce4:	61 15       	cp	r22, r1
 ce6:	71 05       	cpc	r23, r1
 ce8:	21 f0       	breq	.+8      	; 0xcf2 <malloc+0x8e>
 cea:	fb 01       	movw	r30, r22
 cec:	93 83       	std	Z+3, r25	; 0x03
 cee:	82 83       	std	Z+2, r24	; 0x02
 cf0:	04 c0       	rjmp	.+8      	; 0xcfa <malloc+0x96>
 cf2:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <__flp+0x1>
 cf6:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <__flp>
 cfa:	fe 01       	movw	r30, r28
 cfc:	32 96       	adiw	r30, 0x02	; 2
 cfe:	44 c0       	rjmp	.+136    	; 0xd88 <malloc+0x124>
 d00:	fe 01       	movw	r30, r28
 d02:	e2 0f       	add	r30, r18
 d04:	f3 1f       	adc	r31, r19
 d06:	81 93       	st	Z+, r24
 d08:	91 93       	st	Z+, r25
 d0a:	22 50       	subi	r18, 0x02	; 2
 d0c:	31 09       	sbc	r19, r1
 d0e:	39 83       	std	Y+1, r19	; 0x01
 d10:	28 83       	st	Y, r18
 d12:	3a c0       	rjmp	.+116    	; 0xd88 <malloc+0x124>
 d14:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <__brkval>
 d18:	30 91 8f 03 	lds	r19, 0x038F	; 0x80038f <__brkval+0x1>
 d1c:	23 2b       	or	r18, r19
 d1e:	41 f4       	brne	.+16     	; 0xd30 <malloc+0xcc>
 d20:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 d24:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 d28:	30 93 8f 03 	sts	0x038F, r19	; 0x80038f <__brkval+0x1>
 d2c:	20 93 8e 03 	sts	0x038E, r18	; 0x80038e <__brkval>
 d30:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 d34:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 d38:	21 15       	cp	r18, r1
 d3a:	31 05       	cpc	r19, r1
 d3c:	41 f4       	brne	.+16     	; 0xd4e <malloc+0xea>
 d3e:	2d b7       	in	r18, 0x3d	; 61
 d40:	3e b7       	in	r19, 0x3e	; 62
 d42:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 d46:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 d4a:	24 1b       	sub	r18, r20
 d4c:	35 0b       	sbc	r19, r21
 d4e:	e0 91 8e 03 	lds	r30, 0x038E	; 0x80038e <__brkval>
 d52:	f0 91 8f 03 	lds	r31, 0x038F	; 0x80038f <__brkval+0x1>
 d56:	e2 17       	cp	r30, r18
 d58:	f3 07       	cpc	r31, r19
 d5a:	a0 f4       	brcc	.+40     	; 0xd84 <malloc+0x120>
 d5c:	2e 1b       	sub	r18, r30
 d5e:	3f 0b       	sbc	r19, r31
 d60:	28 17       	cp	r18, r24
 d62:	39 07       	cpc	r19, r25
 d64:	78 f0       	brcs	.+30     	; 0xd84 <malloc+0x120>
 d66:	ac 01       	movw	r20, r24
 d68:	4e 5f       	subi	r20, 0xFE	; 254
 d6a:	5f 4f       	sbci	r21, 0xFF	; 255
 d6c:	24 17       	cp	r18, r20
 d6e:	35 07       	cpc	r19, r21
 d70:	48 f0       	brcs	.+18     	; 0xd84 <malloc+0x120>
 d72:	4e 0f       	add	r20, r30
 d74:	5f 1f       	adc	r21, r31
 d76:	50 93 8f 03 	sts	0x038F, r21	; 0x80038f <__brkval+0x1>
 d7a:	40 93 8e 03 	sts	0x038E, r20	; 0x80038e <__brkval>
 d7e:	81 93       	st	Z+, r24
 d80:	91 93       	st	Z+, r25
 d82:	02 c0       	rjmp	.+4      	; 0xd88 <malloc+0x124>
 d84:	e0 e0       	ldi	r30, 0x00	; 0
 d86:	f0 e0       	ldi	r31, 0x00	; 0
 d88:	cf 01       	movw	r24, r30
 d8a:	df 91       	pop	r29
 d8c:	cf 91       	pop	r28
 d8e:	1f 91       	pop	r17
 d90:	0f 91       	pop	r16
 d92:	08 95       	ret

00000d94 <free>:
 d94:	cf 93       	push	r28
 d96:	df 93       	push	r29
 d98:	00 97       	sbiw	r24, 0x00	; 0
 d9a:	09 f4       	brne	.+2      	; 0xd9e <free+0xa>
 d9c:	81 c0       	rjmp	.+258    	; 0xea0 <free+0x10c>
 d9e:	fc 01       	movw	r30, r24
 da0:	32 97       	sbiw	r30, 0x02	; 2
 da2:	13 82       	std	Z+3, r1	; 0x03
 da4:	12 82       	std	Z+2, r1	; 0x02
 da6:	a0 91 90 03 	lds	r26, 0x0390	; 0x800390 <__flp>
 daa:	b0 91 91 03 	lds	r27, 0x0391	; 0x800391 <__flp+0x1>
 dae:	10 97       	sbiw	r26, 0x00	; 0
 db0:	81 f4       	brne	.+32     	; 0xdd2 <free+0x3e>
 db2:	20 81       	ld	r18, Z
 db4:	31 81       	ldd	r19, Z+1	; 0x01
 db6:	82 0f       	add	r24, r18
 db8:	93 1f       	adc	r25, r19
 dba:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <__brkval>
 dbe:	30 91 8f 03 	lds	r19, 0x038F	; 0x80038f <__brkval+0x1>
 dc2:	28 17       	cp	r18, r24
 dc4:	39 07       	cpc	r19, r25
 dc6:	51 f5       	brne	.+84     	; 0xe1c <free+0x88>
 dc8:	f0 93 8f 03 	sts	0x038F, r31	; 0x80038f <__brkval+0x1>
 dcc:	e0 93 8e 03 	sts	0x038E, r30	; 0x80038e <__brkval>
 dd0:	67 c0       	rjmp	.+206    	; 0xea0 <free+0x10c>
 dd2:	ed 01       	movw	r28, r26
 dd4:	20 e0       	ldi	r18, 0x00	; 0
 dd6:	30 e0       	ldi	r19, 0x00	; 0
 dd8:	ce 17       	cp	r28, r30
 dda:	df 07       	cpc	r29, r31
 ddc:	40 f4       	brcc	.+16     	; 0xdee <free+0x5a>
 dde:	4a 81       	ldd	r20, Y+2	; 0x02
 de0:	5b 81       	ldd	r21, Y+3	; 0x03
 de2:	9e 01       	movw	r18, r28
 de4:	41 15       	cp	r20, r1
 de6:	51 05       	cpc	r21, r1
 de8:	f1 f0       	breq	.+60     	; 0xe26 <free+0x92>
 dea:	ea 01       	movw	r28, r20
 dec:	f5 cf       	rjmp	.-22     	; 0xdd8 <free+0x44>
 dee:	d3 83       	std	Z+3, r29	; 0x03
 df0:	c2 83       	std	Z+2, r28	; 0x02
 df2:	40 81       	ld	r20, Z
 df4:	51 81       	ldd	r21, Z+1	; 0x01
 df6:	84 0f       	add	r24, r20
 df8:	95 1f       	adc	r25, r21
 dfa:	c8 17       	cp	r28, r24
 dfc:	d9 07       	cpc	r29, r25
 dfe:	59 f4       	brne	.+22     	; 0xe16 <free+0x82>
 e00:	88 81       	ld	r24, Y
 e02:	99 81       	ldd	r25, Y+1	; 0x01
 e04:	84 0f       	add	r24, r20
 e06:	95 1f       	adc	r25, r21
 e08:	02 96       	adiw	r24, 0x02	; 2
 e0a:	91 83       	std	Z+1, r25	; 0x01
 e0c:	80 83       	st	Z, r24
 e0e:	8a 81       	ldd	r24, Y+2	; 0x02
 e10:	9b 81       	ldd	r25, Y+3	; 0x03
 e12:	93 83       	std	Z+3, r25	; 0x03
 e14:	82 83       	std	Z+2, r24	; 0x02
 e16:	21 15       	cp	r18, r1
 e18:	31 05       	cpc	r19, r1
 e1a:	29 f4       	brne	.+10     	; 0xe26 <free+0x92>
 e1c:	f0 93 91 03 	sts	0x0391, r31	; 0x800391 <__flp+0x1>
 e20:	e0 93 90 03 	sts	0x0390, r30	; 0x800390 <__flp>
 e24:	3d c0       	rjmp	.+122    	; 0xea0 <free+0x10c>
 e26:	e9 01       	movw	r28, r18
 e28:	fb 83       	std	Y+3, r31	; 0x03
 e2a:	ea 83       	std	Y+2, r30	; 0x02
 e2c:	49 91       	ld	r20, Y+
 e2e:	59 91       	ld	r21, Y+
 e30:	c4 0f       	add	r28, r20
 e32:	d5 1f       	adc	r29, r21
 e34:	ec 17       	cp	r30, r28
 e36:	fd 07       	cpc	r31, r29
 e38:	61 f4       	brne	.+24     	; 0xe52 <free+0xbe>
 e3a:	80 81       	ld	r24, Z
 e3c:	91 81       	ldd	r25, Z+1	; 0x01
 e3e:	84 0f       	add	r24, r20
 e40:	95 1f       	adc	r25, r21
 e42:	02 96       	adiw	r24, 0x02	; 2
 e44:	e9 01       	movw	r28, r18
 e46:	99 83       	std	Y+1, r25	; 0x01
 e48:	88 83       	st	Y, r24
 e4a:	82 81       	ldd	r24, Z+2	; 0x02
 e4c:	93 81       	ldd	r25, Z+3	; 0x03
 e4e:	9b 83       	std	Y+3, r25	; 0x03
 e50:	8a 83       	std	Y+2, r24	; 0x02
 e52:	e0 e0       	ldi	r30, 0x00	; 0
 e54:	f0 e0       	ldi	r31, 0x00	; 0
 e56:	12 96       	adiw	r26, 0x02	; 2
 e58:	8d 91       	ld	r24, X+
 e5a:	9c 91       	ld	r25, X
 e5c:	13 97       	sbiw	r26, 0x03	; 3
 e5e:	00 97       	sbiw	r24, 0x00	; 0
 e60:	19 f0       	breq	.+6      	; 0xe68 <free+0xd4>
 e62:	fd 01       	movw	r30, r26
 e64:	dc 01       	movw	r26, r24
 e66:	f7 cf       	rjmp	.-18     	; 0xe56 <free+0xc2>
 e68:	8d 91       	ld	r24, X+
 e6a:	9c 91       	ld	r25, X
 e6c:	11 97       	sbiw	r26, 0x01	; 1
 e6e:	9d 01       	movw	r18, r26
 e70:	2e 5f       	subi	r18, 0xFE	; 254
 e72:	3f 4f       	sbci	r19, 0xFF	; 255
 e74:	82 0f       	add	r24, r18
 e76:	93 1f       	adc	r25, r19
 e78:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <__brkval>
 e7c:	30 91 8f 03 	lds	r19, 0x038F	; 0x80038f <__brkval+0x1>
 e80:	28 17       	cp	r18, r24
 e82:	39 07       	cpc	r19, r25
 e84:	69 f4       	brne	.+26     	; 0xea0 <free+0x10c>
 e86:	30 97       	sbiw	r30, 0x00	; 0
 e88:	29 f4       	brne	.+10     	; 0xe94 <free+0x100>
 e8a:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <__flp+0x1>
 e8e:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <__flp>
 e92:	02 c0       	rjmp	.+4      	; 0xe98 <free+0x104>
 e94:	13 82       	std	Z+3, r1	; 0x03
 e96:	12 82       	std	Z+2, r1	; 0x02
 e98:	b0 93 8f 03 	sts	0x038F, r27	; 0x80038f <__brkval+0x1>
 e9c:	a0 93 8e 03 	sts	0x038E, r26	; 0x80038e <__brkval>
 ea0:	df 91       	pop	r29
 ea2:	cf 91       	pop	r28
 ea4:	08 95       	ret

00000ea6 <_exit>:
 ea6:	f8 94       	cli

00000ea8 <__stop_program>:
 ea8:	ff cf       	rjmp	.-2      	; 0xea8 <__stop_program>
