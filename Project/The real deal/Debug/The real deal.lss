
The real deal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800200  000007e2  00000876  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080022e  0080022e  000008a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018d4  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f3d  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b2c  00000000  00000000  00003205  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  00003d34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000075e  00000000  00000000  00003fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c22  00000000  00000000  0000474a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000536c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	9a c2       	rjmp	.+1332   	; 0x53a <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	ab c2       	rjmp	.+1366   	; 0x564 <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	f4 c2       	rjmp	.+1512   	; 0x602 <__vector_6>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	f8 c2       	rjmp	.+1520   	; 0x666 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ee       	ldi	r30, 0xE2	; 226
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 32       	cpi	r26, 0x2E	; 46
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ae e2       	ldi	r26, 0x2E	; 46
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 33       	cpi	r26, 0x33	; 51
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	ff d0       	rcall	.+510    	; 0x31e <main>
 120:	5e c3       	rjmp	.+1724   	; 0x7de <_exit>

00000122 <__bad_interrupt>:
 122:	e8 c2       	rjmp	.+1488   	; 0x6f4 <__vector_default>

00000124 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 124:	87 b1       	in	r24, 0x07	; 7
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 12a:	45 9a       	sbi	0x08, 5	; 8
	CLEAR_RS();		//Read status
 12c:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	8a 95       	dec	r24
 132:	f1 f7       	brne	.-4      	; 0x130 <LCDBusyLoop+0xc>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCDBusyLoop+0x12>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
 136:	47 9a       	sbi	0x08, 7	; 8
 138:	92 e0       	ldi	r25, 0x02	; 2
 13a:	9a 95       	dec	r25
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCDBusyLoop+0x16>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCDBusyLoop+0x1c>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
 140:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 142:	82 95       	swap	r24
 144:	80 7f       	andi	r24, 0xF0	; 240
 146:	92 e0       	ldi	r25, 0x02	; 2
 148:	9a 95       	dec	r25
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCDBusyLoop+0x24>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCDBusyLoop+0x2a>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
 14e:	47 98       	cbi	0x08, 7	; 8
 150:	95 e0       	ldi	r25, 0x05	; 5
 152:	9a 95       	dec	r25
 154:	f1 f7       	brne	.-4      	; 0x152 <LCDBusyLoop+0x2e>
 156:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
 158:	47 9a       	sbi	0x08, 7	; 8
 15a:	92 e0       	ldi	r25, 0x02	; 2
 15c:	9a 95       	dec	r25
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCDBusyLoop+0x38>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCDBusyLoop+0x3e>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
 162:	96 b1       	in	r25, 0x06	; 6
 164:	92 e0       	ldi	r25, 0x02	; 2
 166:	9a 95       	dec	r25
 168:	f1 f7       	brne	.-4      	; 0x166 <LCDBusyLoop+0x42>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCDBusyLoop+0x48>

		busy=status & 0b10000000;

		_delay_us(0.5);
		
		CLEAR_E();
 16c:	47 98       	cbi	0x08, 7	; 8
 16e:	95 e0       	ldi	r25, 0x05	; 5
 170:	9a 95       	dec	r25
 172:	f1 f7       	brne	.-4      	; 0x170 <LCDBusyLoop+0x4c>
 174:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
 176:	88 23       	and	r24, r24
 178:	f4 f2       	brlt	.-68     	; 0x136 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 17a:	45 98       	cbi	0x08, 5	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 17c:	87 b1       	in	r24, 0x07	; 7
 17e:	8f 60       	ori	r24, 0x0F	; 15
 180:	87 b9       	out	0x07, r24	; 7
 182:	08 95       	ret

00000184 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 184:	28 2f       	mov	r18, r24
 186:	22 95       	swap	r18
 188:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 18a:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 18c:	61 11       	cpse	r22, r1
 18e:	02 c0       	rjmp	.+4      	; 0x194 <LCDByte+0x10>
	CLEAR_RS();
 190:	46 98       	cbi	0x08, 6	; 8
 192:	01 c0       	rjmp	.+2      	; 0x196 <LCDByte+0x12>
else
	SET_RS();
 194:	46 9a       	sbi	0x08, 6	; 8
 196:	92 e0       	ldi	r25, 0x02	; 2
 198:	9a 95       	dec	r25
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCDByte+0x14>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCDByte+0x1a>

_delay_us(0.500);		//tAS


SET_E();
 19e:	47 9a       	sbi	0x08, 7	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 1a0:	98 b1       	in	r25, 0x08	; 8
 1a2:	90 7f       	andi	r25, 0xF0	; 240
 1a4:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 1a6:	98 b9       	out	0x08, r25	; 8
 1a8:	95 e0       	ldi	r25, 0x05	; 5
 1aa:	9a 95       	dec	r25
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCDByte+0x26>
 1ae:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
 1b0:	47 98       	cbi	0x08, 7	; 8
 1b2:	95 e0       	ldi	r25, 0x05	; 5
 1b4:	9a 95       	dec	r25
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCDByte+0x30>
 1b8:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
 1ba:	47 9a       	sbi	0x08, 7	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 1bc:	98 b1       	in	r25, 0x08	; 8
 1be:	90 7f       	andi	r25, 0xF0	; 240
 1c0:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 1c2:	88 b9       	out	0x08, r24	; 8
 1c4:	85 e0       	ldi	r24, 0x05	; 5
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCDByte+0x42>
 1ca:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
 1cc:	47 98       	cbi	0x08, 7	; 8
 1ce:	95 e0       	ldi	r25, 0x05	; 5
 1d0:	9a 95       	dec	r25
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <LCDByte+0x4c>
 1d4:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
 1d6:	a6 cf       	rjmp	.-180    	; 0x124 <LCDBusyLoop>
 1d8:	08 95       	ret

000001da <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 1da:	cf 93       	push	r28
 1dc:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	86 e7       	ldi	r24, 0x76	; 118
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <InitLCD+0xa>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <InitLCD+0x14>
 1ee:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 1f0:	87 b1       	in	r24, 0x07	; 7
 1f2:	8f 60       	ori	r24, 0x0F	; 15
 1f4:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 1f6:	3f 9a       	sbi	0x07, 7	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 1f8:	3e 9a       	sbi	0x07, 6	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 1fa:	3d 9a       	sbi	0x07, 5	; 7

	LCD_DATA_PORT&=0XF0;
 1fc:	88 b1       	in	r24, 0x08	; 8
 1fe:	80 7f       	andi	r24, 0xF0	; 240
 200:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 202:	47 98       	cbi	0x08, 7	; 8
	CLEAR_RW();
 204:	45 98       	cbi	0x08, 5	; 8
	CLEAR_RS();
 206:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 208:	00 c0       	rjmp	.+0      	; 0x20a <InitLCD+0x30>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <InitLCD+0x32>
 20c:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
 20e:	47 9a       	sbi	0x08, 7	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 210:	41 9a       	sbi	0x08, 1	; 8
 212:	25 e0       	ldi	r18, 0x05	; 5
 214:	2a 95       	dec	r18
 216:	f1 f7       	brne	.-4      	; 0x214 <InitLCD+0x3a>
 218:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
 21a:	47 98       	cbi	0x08, 7	; 8
 21c:	85 e0       	ldi	r24, 0x05	; 5
 21e:	8a 95       	dec	r24
 220:	f1 f7       	brne	.-4      	; 0x21e <InitLCD+0x44>
 222:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 224:	7f df       	rcall	.-258    	; 0x124 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	8c 2f       	mov	r24, r28
 22a:	8c 60       	ori	r24, 0x0C	; 12
 22c:	ab df       	rcall	.-170    	; 0x184 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	88 e2       	ldi	r24, 0x28	; 40
 232:	a8 df       	rcall	.-176    	; 0x184 <LCDByte>
}
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 23e:	88 81       	ld	r24, Y
 240:	88 23       	and	r24, r24
 242:	31 f0       	breq	.+12     	; 0x250 <LCDWriteString+0x18>
 244:	21 96       	adiw	r28, 0x01	; 1
 {
	LCDData(*msg);
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	9d df       	rcall	.-198    	; 0x184 <LCDByte>
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 24a:	89 91       	ld	r24, Y+
 24c:	81 11       	cpse	r24, r1
 24e:	fb cf       	rjmp	.-10     	; 0x246 <LCDWriteString+0xe>
 {
	LCDData(*msg);
	msg++;
 }
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 256:	ef 92       	push	r14
 258:	ff 92       	push	r15
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	00 d0       	rcall	.+0      	; 0x264 <LCDWriteInt+0xe>
 264:	1f 92       	push	r1
 266:	1f 92       	push	r1
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
 26c:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 26e:	fe 01       	movw	r30, r28
 270:	31 96       	adiw	r30, 0x01	; 1
 272:	25 e0       	ldi	r18, 0x05	; 5
 274:	df 01       	movw	r26, r30
 276:	1d 92       	st	X+, r1
 278:	2a 95       	dec	r18
 27a:	e9 f7       	brne	.-6      	; 0x276 <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
 27c:	00 97       	sbiw	r24, 0x00	; 0
 27e:	51 f0       	breq	.+20     	; 0x294 <LCDWriteInt+0x3e>
 280:	35 96       	adiw	r30, 0x05	; 5
	{
	str[i]=val%10;
 282:	2a e0       	ldi	r18, 0x0A	; 10
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	b9 01       	movw	r22, r18
 288:	83 d2       	rcall	.+1286   	; 0x790 <__divmodhi4>
 28a:	82 93       	st	-Z, r24
	val=val/10;
 28c:	86 2f       	mov	r24, r22
 28e:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 290:	00 97       	sbiw	r24, 0x00	; 0
 292:	c9 f7       	brne	.-14     	; 0x286 <LCDWriteInt+0x30>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 294:	bf ef       	ldi	r27, 0xFF	; 255
 296:	eb 16       	cp	r14, r27
 298:	fb 06       	cpc	r15, r27
 29a:	69 f4       	brne	.+26     	; 0x2b6 <LCDWriteInt+0x60>
		while(str[j]==0) j++;
 29c:	89 81       	ldd	r24, Y+1	; 0x01
 29e:	81 11       	cpse	r24, r1
 2a0:	1d c0       	rjmp	.+58     	; 0x2dc <LCDWriteInt+0x86>
 2a2:	fe 01       	movw	r30, r28
 2a4:	32 96       	adiw	r30, 0x02	; 2
 2a6:	00 e0       	ldi	r16, 0x00	; 0
 2a8:	10 e0       	ldi	r17, 0x00	; 0
 2aa:	0f 5f       	subi	r16, 0xFF	; 255
 2ac:	1f 4f       	sbci	r17, 0xFF	; 255
 2ae:	81 91       	ld	r24, Z+
 2b0:	88 23       	and	r24, r24
 2b2:	d9 f3       	breq	.-10     	; 0x2aa <LCDWriteInt+0x54>
 2b4:	0f c0       	rjmp	.+30     	; 0x2d4 <LCDWriteInt+0x7e>
	else
		j=5-field_length;
 2b6:	05 e0       	ldi	r16, 0x05	; 5
 2b8:	10 e0       	ldi	r17, 0x00	; 0
 2ba:	0e 19       	sub	r16, r14
 2bc:	1f 09       	sbc	r17, r15
 2be:	0a c0       	rjmp	.+20     	; 0x2d4 <LCDWriteInt+0x7e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 2c0:	f8 01       	movw	r30, r16
 2c2:	81 91       	ld	r24, Z+
 2c4:	8f 01       	movw	r16, r30
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	80 5d       	subi	r24, 0xD0	; 208
 2ca:	5c df       	rcall	.-328    	; 0x184 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 2cc:	0e 15       	cp	r16, r14
 2ce:	1f 05       	cpc	r17, r15
 2d0:	b9 f7       	brne	.-18     	; 0x2c0 <LCDWriteInt+0x6a>
 2d2:	11 c0       	rjmp	.+34     	; 0x2f6 <LCDWriteInt+0xa0>
 2d4:	05 30       	cpi	r16, 0x05	; 5
 2d6:	11 05       	cpc	r17, r1
 2d8:	1c f0       	brlt	.+6      	; 0x2e0 <LCDWriteInt+0x8a>
 2da:	0d c0       	rjmp	.+26     	; 0x2f6 <LCDWriteInt+0xa0>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
 2dc:	00 e0       	ldi	r16, 0x00	; 0
 2de:	10 e0       	ldi	r17, 0x00	; 0
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	8c 0f       	add	r24, r28
 2e6:	9d 1f       	adc	r25, r29
 2e8:	08 0f       	add	r16, r24
 2ea:	19 1f       	adc	r17, r25
 2ec:	7e 01       	movw	r14, r28
 2ee:	96 e0       	ldi	r25, 0x06	; 6
 2f0:	e9 0e       	add	r14, r25
 2f2:	f1 1c       	adc	r15, r1
 2f4:	e5 cf       	rjmp	.-54     	; 0x2c0 <LCDWriteInt+0x6a>
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	0f 90       	pop	r0
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	1f 91       	pop	r17
 306:	0f 91       	pop	r16
 308:	ff 90       	pop	r15
 30a:	ef 90       	pop	r14
 30c:	08 95       	ret

0000030e <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 30e:	88 32       	cpi	r24, 0x28	; 40
 310:	28 f4       	brcc	.+10     	; 0x31c <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
 312:	61 11       	cpse	r22, r1
 314:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	80 68       	ori	r24, 0x80	; 128
 31a:	34 cf       	rjmp	.-408    	; 0x184 <LCDByte>
 31c:	08 95       	ret

0000031e <main>:
volatile unsigned int ADC_result_flag = 1;
volatile unsigned char motorState = 0x02;
volatile char STATE = 0;
volatile char sorted_items[4] = {0,0,0,0};

int main() {
 31e:	4f 92       	push	r4
 320:	5f 92       	push	r5
 322:	6f 92       	push	r6
 324:	7f 92       	push	r7
 326:	8f 92       	push	r8
 328:	9f 92       	push	r9
 32a:	af 92       	push	r10
 32c:	bf 92       	push	r11
 32e:	cf 92       	push	r12
 330:	df 92       	push	r13
 332:	ef 92       	push	r14
 334:	ff 92       	push	r15
 336:	0f 93       	push	r16
 338:	1f 93       	push	r17
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
	timer8MHz();//setup the chip clock to 8 MHz
 33e:	fe d1       	rcall	.+1020   	; 0x73c <timer8MHz>
	DDRL = 0xFF;//sets debug lights to output
 340:	8f ef       	ldi	r24, 0xFF	; 255
 342:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	DDRB = 0x03;//sets D0 and D1 to output
 346:	83 e0       	ldi	r24, 0x03	; 3
 348:	84 b9       	out	0x04, r24	; 4
	DDRE = 0x00;//all E pins on input
 34a:	1d b8       	out	0x0d, r1	; 13
	PORTL = motorState << 6;
 34c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 350:	82 95       	swap	r24
 352:	88 0f       	add	r24, r24
 354:	88 0f       	add	r24, r24
 356:	80 7c       	andi	r24, 0xC0	; 192
 358:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
	
	//Initialize LCD module
	InitLCD(LS_BLINK|LS_ULINE);
 35c:	83 e0       	ldi	r24, 0x03	; 3
 35e:	3d df       	rcall	.-390    	; 0x1da <InitLCD>

	//Clear the screen
	LCDClear();
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	0f df       	rcall	.-482    	; 0x184 <LCDByte>
	LCDWriteString("Program Setup");
 366:	85 e0       	ldi	r24, 0x05	; 5
 368:	92 e0       	ldi	r25, 0x02	; 2
 36a:	66 df       	rcall	.-308    	; 0x238 <LCDWriteString>
	mTimer(500);
 36c:	84 ef       	ldi	r24, 0xF4	; 244
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	ef d1       	rcall	.+990    	; 0x750 <mTimer>
 372:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
	PORTB = motorState;
 376:	85 b9       	out	0x05, r24	; 5
 378:	f8 94       	cli
	
	cli(); // disable all of the interrupt ==================================
 37a:	8d b3       	in	r24, 0x1d	; 29

	// config the external interrupt ========================================
	EIMSK |= (1 << INT0) | (1 << INT1) | (1 << INT2) | (1 << INT5);                                     // enable INT0-INT2 and INT5
 37c:	87 62       	ori	r24, 0x27	; 39
 37e:	8d bb       	out	0x1d, r24	; 29
 380:	e9 e6       	ldi	r30, 0x69	; 105
	EICRA |= (1 << ISC21) | (1 << ISC20) | (1 << ISC11) | (1 << ISC10) | (1 << ISC01);                  // rising edge interrupt for INT1-INT2, falling edge for INT0
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	8e 63       	ori	r24, 0x3E	; 62
 388:	80 83       	st	Z, r24
 38a:	ea e6       	ldi	r30, 0x6A	; 106
	EICRB |= (1 << ISC50);					                                                            // any edge interrupt for INT5
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	84 60       	ori	r24, 0x04	; 4
 392:	80 83       	st	Z, r24
 394:	ea e7       	ldi	r30, 0x7A	; 122

	// config ADC ===========================================================
	// by default, the ADC input (analog input) is set to ADC0 / PORTF0
	ADCSRA |= (1 << ADEN);                       // enable ADC
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	80 68       	ori	r24, 0x80	; 128
 39c:	80 83       	st	Z, r24
 39e:	80 81       	ld	r24, Z
	ADCSRA |= (1 << ADIE);                       // enable interrupt of ADC
 3a0:	88 60       	ori	r24, 0x08	; 8
 3a2:	80 83       	st	Z, r24
 3a4:	ec e7       	ldi	r30, 0x7C	; 124
	ADMUX  |= (1 << REFS0);						 //AVCC with external capacitor at AREF pin
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	80 64       	ori	r24, 0x40	; 64

	// sets the Global Enable for all interrupts ============================
	sei();
 3ac:	80 83       	st	Z, r24
	
	
	//pwm setup to 40% duty cycle
	pwm();
 3ae:	78 94       	sei
 3b0:	b0 d1       	rcall	.+864    	; 0x712 <pwm>
	pwmSet(102);
 3b2:	86 e6       	ldi	r24, 0x66	; 102
 3b4:	c1 d1       	rcall	.+898    	; 0x738 <pwmSet>
 3b6:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
	PORTB |= motorState;
 3ba:	85 b1       	in	r24, 0x05	; 5
 3bc:	89 2b       	or	r24, r25
 3be:	85 b9       	out	0x05, r24	; 5
 3c0:	0b e0       	ldi	r16, 0x0B	; 11
		return(0);
	}
	
	ENQUEUE:
	{
		PORTL = (1 << PINL5);
 3c2:	11 e0       	ldi	r17, 0x01	; 1
 3c4:	68 94       	set
 3c6:	66 24       	eor	r6, r6
 3c8:	65 f8       	bld	r6, 5
 3ca:	ce e2       	ldi	r28, 0x2E	; 46
			} else if (ADC_result > material_types[2]) {
			material = 2; //Steel
			} else {
			material = 3;//aluminum
		}
		sorted_items[material]++;
 3cc:	d2 e0       	ldi	r29, 0x02	; 2
 3ce:	0f 2e       	mov	r0, r31
		LCDWriteInt(sorted_items[1],2);
		LCDGotoXY(6,1);
		LCDWriteInt(sorted_items[2],2);
		LCDGotoXY(9,1);
		LCDWriteInt(sorted_items[3],2);
		ADC_result = 999;//reset ADC
 3d0:	f7 ee       	ldi	r31, 0xE7	; 231
 3d2:	ef 2e       	mov	r14, r31
 3d4:	f3 e0       	ldi	r31, 0x03	; 3
 3d6:	ff 2e       	mov	r15, r31
 3d8:	f0 2d       	mov	r31, r0
 3da:	c1 2c       	mov	r12, r1
		uint16_t material_types[] = {440, /*white derlin*/
			380, /*steel*/
		250 /*aluminum*/};
		int material;
		if(ADC_result > material_types[0]){
			material = 0;//black delrin
 3dc:	d1 2c       	mov	r13, r1
 3de:	44 24       	eor	r4, r4
			} else if (ADC_result > material_types[1]) {
			material = 1;//white delrin
 3e0:	43 94       	inc	r4
 3e2:	51 2c       	mov	r5, r1
 3e4:	68 94       	set

	// POLLING STATE
	POLLING_STAGE:
	switch(STATE){
		case (0) :
		PORTL = (1 << PINL7);   //shows what stage we are in
 3e6:	77 24       	eor	r7, r7
 3e8:	77 f8       	bld	r7, 7
 3ea:	68 94       	set
		goto POLLING_STAGE;
	}//switch STATE

	REFLECTIVE_STAGE:
	{
		PORTL = (1 << PINL6);//debug light to show we're in the reflective stage
 3ec:	88 24       	eor	r8, r8
 3ee:	86 f8       	bld	r8, 6
 3f0:	0f 2e       	mov	r0, r31
		if(ADC_result_flag == 1){
			ADC_result_flag = 0;
			ADCSRA |= (1 << ADSC);//start a new ADC convert if last one is done
 3f2:	fa e7       	ldi	r31, 0x7A	; 122
 3f4:	af 2e       	mov	r10, r31
 3f6:	b1 2c       	mov	r11, r1
 3f8:	f0 2d       	mov	r31, r0
 3fa:	68 94       	set
		goto POLLING_STAGE;
	}
	BUCKET_STAGE:
	{
		// Do whatever is necessary HERE
		PORTC = 0x08;
 3fc:	99 24       	eor	r9, r9
 3fe:	93 f8       	bld	r9, 3
 400:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <STATE>

	goto POLLING_STAGE;

	// POLLING STATE
	POLLING_STAGE:
	switch(STATE){
 404:	82 30       	cpi	r24, 0x02	; 2
 406:	01 f1       	breq	.+64     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 408:	28 f4       	brcc	.+10     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 40a:	88 23       	and	r24, r24
 40c:	49 f0       	breq	.+18     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	51 f0       	breq	.+20     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 412:	f6 cf       	rjmp	.-20     	; 0x400 <__LOCK_REGION_LENGTH__>
 414:	83 30       	cpi	r24, 0x03	; 3
 416:	09 f4       	brne	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 418:	7b c0       	rjmp	.+246    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 41a:	84 30       	cpi	r24, 0x04	; 4
 41c:	c9 f0       	breq	.+50     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 41e:	f0 cf       	rjmp	.-32     	; 0x400 <__LOCK_REGION_LENGTH__>
 420:	f8 01       	movw	r30, r16
		case (0) :
		PORTL = (1 << PINL7);   //shows what stage we are in
 422:	70 82       	st	Z, r7
 424:	ed cf       	rjmp	.-38     	; 0x400 <__LOCK_REGION_LENGTH__>
		goto POLLING_STAGE;
 426:	f8 01       	movw	r30, r16
		goto POLLING_STAGE;
	}//switch STATE

	REFLECTIVE_STAGE:
	{
		PORTL = (1 << PINL6);//debug light to show we're in the reflective stage
 428:	80 82       	st	Z, r8
 42a:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <ADC_result_flag>
		if(ADC_result_flag == 1){
 42e:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <ADC_result_flag+0x1>
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	29 f7       	brne	.-54     	; 0x400 <__LOCK_REGION_LENGTH__>
 436:	d0 92 02 02 	sts	0x0202, r13	; 0x800202 <ADC_result_flag+0x1>
			ADC_result_flag = 0;
 43a:	c0 92 01 02 	sts	0x0201, r12	; 0x800201 <ADC_result_flag>
 43e:	f5 01       	movw	r30, r10
			ADCSRA |= (1 << ADSC);//start a new ADC convert if last one is done
 440:	80 81       	ld	r24, Z
 442:	80 64       	ori	r24, 0x40	; 64
 444:	80 83       	st	Z, r24
 446:	dc cf       	rjmp	.-72     	; 0x400 <__LOCK_REGION_LENGTH__>
 448:	98 b8       	out	0x08, r9	; 8
		goto POLLING_STAGE;
	}
	BUCKET_STAGE:
	{
		// Do whatever is necessary HERE
		PORTC = 0x08;
 44a:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <STATE>
		//Reset the state variable
		STATE = 0;
		goto POLLING_STAGE;
 44e:	d8 cf       	rjmp	.-80     	; 0x400 <__LOCK_REGION_LENGTH__>
		return(0);
	}
	
	ENQUEUE:
	{
		PORTL = (1 << PINL5);
 450:	f8 01       	movw	r30, r16
 452:	60 82       	st	Z, r6
		LCDClear();
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	95 de       	rcall	.-726    	; 0x184 <LCDByte>
 45a:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <ADC_result>
		uint16_t material_types[] = {440, /*white derlin*/
			380, /*steel*/
		250 /*aluminum*/};
		int material;
		if(ADC_result > material_types[0]){
 45e:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <ADC_result+0x1>
 462:	89 3b       	cpi	r24, 0xB9	; 185
 464:	91 40       	sbci	r25, 0x01	; 1
 466:	88 f4       	brcc	.+34     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 468:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <ADC_result>
			material = 0;//black delrin
			} else if (ADC_result > material_types[1]) {
 46c:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <ADC_result+0x1>
 470:	8d 37       	cpi	r24, 0x7D	; 125
 472:	91 40       	sbci	r25, 0x01	; 1
 474:	60 f4       	brcc	.+24     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 476:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <ADC_result>
			material = 1;//white delrin
			} else if (ADC_result > material_types[2]) {
 47a:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <ADC_result+0x1>
 47e:	8b 3f       	cpi	r24, 0xFB	; 251
 480:	91 05       	cpc	r25, r1
 482:	40 f4       	brcc	.+16     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 484:	e3 e0       	ldi	r30, 0x03	; 3
			material = 2; //Steel
			} else {
			material = 3;//aluminum
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	07 c0       	rjmp	.+14     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 48a:	f6 01       	movw	r30, r12
		uint16_t material_types[] = {440, /*white derlin*/
			380, /*steel*/
		250 /*aluminum*/};
		int material;
		if(ADC_result > material_types[0]){
			material = 0;//black delrin
 48c:	05 c0       	rjmp	.+10     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 48e:	e4 2d       	mov	r30, r4
			} else if (ADC_result > material_types[1]) {
			material = 1;//white delrin
 490:	f5 2d       	mov	r31, r5
 492:	02 c0       	rjmp	.+4      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 494:	e2 e0       	ldi	r30, 0x02	; 2
			} else if (ADC_result > material_types[2]) {
			material = 2; //Steel
 496:	f0 e0       	ldi	r31, 0x00	; 0
			} else {
			material = 3;//aluminum
		}
		sorted_items[material]++;
 498:	e2 5d       	subi	r30, 0xD2	; 210
 49a:	fd 4f       	sbci	r31, 0xFD	; 253
 49c:	80 81       	ld	r24, Z
 49e:	8f 5f       	subi	r24, 0xFF	; 255
		LCDGotoXY(0,0);
 4a0:	80 83       	st	Z, r24
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	80 e0       	ldi	r24, 0x00	; 0
		LCDWriteString("BL WI ST AL");
 4a6:	33 df       	rcall	.-410    	; 0x30e <LCDGotoXY>
 4a8:	83 e1       	ldi	r24, 0x13	; 19
 4aa:	92 e0       	ldi	r25, 0x02	; 2
		LCDGotoXY(12,0);
 4ac:	c5 de       	rcall	.-630    	; 0x238 <LCDWriteString>
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	8c e0       	ldi	r24, 0x0C	; 12
		LCDWriteInt(ADC_result,3);
 4b2:	2d df       	rcall	.-422    	; 0x30e <LCDGotoXY>
 4b4:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <ADC_result>
 4b8:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <ADC_result+0x1>
 4bc:	63 e0       	ldi	r22, 0x03	; 3
		LCDGotoXY(0,1);
 4be:	70 e0       	ldi	r23, 0x00	; 0
 4c0:	ca de       	rcall	.-620    	; 0x256 <LCDWriteInt>
 4c2:	61 e0       	ldi	r22, 0x01	; 1
		LCDWriteInt(sorted_items[0],2);
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	23 df       	rcall	.-442    	; 0x30e <LCDGotoXY>
 4c8:	88 81       	ld	r24, Y
 4ca:	62 e0       	ldi	r22, 0x02	; 2
 4cc:	70 e0       	ldi	r23, 0x00	; 0
		LCDGotoXY(3,1);
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	c2 de       	rcall	.-636    	; 0x256 <LCDWriteInt>
 4d2:	61 e0       	ldi	r22, 0x01	; 1
		LCDWriteInt(sorted_items[1],2);
 4d4:	83 e0       	ldi	r24, 0x03	; 3
 4d6:	1b df       	rcall	.-458    	; 0x30e <LCDGotoXY>
 4d8:	89 81       	ldd	r24, Y+1	; 0x01
 4da:	62 e0       	ldi	r22, 0x02	; 2
 4dc:	70 e0       	ldi	r23, 0x00	; 0
		LCDGotoXY(6,1);
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	ba de       	rcall	.-652    	; 0x256 <LCDWriteInt>
 4e2:	61 e0       	ldi	r22, 0x01	; 1
 4e4:	86 e0       	ldi	r24, 0x06	; 6
		LCDWriteInt(sorted_items[2],2);
 4e6:	13 df       	rcall	.-474    	; 0x30e <LCDGotoXY>
 4e8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ea:	62 e0       	ldi	r22, 0x02	; 2
 4ec:	70 e0       	ldi	r23, 0x00	; 0
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	b2 de       	rcall	.-668    	; 0x256 <LCDWriteInt>
		LCDGotoXY(9,1);
 4f2:	61 e0       	ldi	r22, 0x01	; 1
 4f4:	89 e0       	ldi	r24, 0x09	; 9
 4f6:	0b df       	rcall	.-490    	; 0x30e <LCDGotoXY>
 4f8:	8b 81       	ldd	r24, Y+3	; 0x03
		LCDWriteInt(sorted_items[3],2);
 4fa:	62 e0       	ldi	r22, 0x02	; 2
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	aa de       	rcall	.-684    	; 0x256 <LCDWriteInt>
 502:	f0 92 04 02 	sts	0x0204, r15	; 0x800204 <ADC_result+0x1>
		ADC_result = 999;//reset ADC
 506:	e0 92 03 02 	sts	0x0203, r14	; 0x800203 <ADC_result>
 50a:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <STATE>
		STATE = 0;
 50e:	78 cf       	rjmp	.-272    	; 0x400 <__LOCK_REGION_LENGTH__>
 510:	80 ef       	ldi	r24, 0xF0	; 240
 512:	88 b9       	out	0x08, r24	; 8
		goto POLLING_STAGE;
	}
	END:
	{
		// The closing STATE ... how would you get here?
		PORTC = 0xF0;	// Indicates this state is active
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	90 e0       	ldi	r25, 0x00	; 0
		LCDWriteInt(sorted_items[3],2);
		ADC_result = 999;//reset ADC
		STATE = 0;
		goto POLLING_STAGE;
	}
} // end main
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	1f 91       	pop	r17
 51e:	0f 91       	pop	r16
 520:	ff 90       	pop	r15
 522:	ef 90       	pop	r14
 524:	df 90       	pop	r13
 526:	cf 90       	pop	r12
 528:	bf 90       	pop	r11
 52a:	af 90       	pop	r10
 52c:	9f 90       	pop	r9
 52e:	8f 90       	pop	r8
 530:	7f 90       	pop	r7
 532:	6f 90       	pop	r6
 534:	5f 90       	pop	r5
 536:	4f 90       	pop	r4
 538:	08 95       	ret

0000053a <__vector_1>:
 53a:	1f 92       	push	r1
 53c:	0f 92       	push	r0

// sensor switch: Active HIGH starts AD conversion ==========================
ISR(INT0_vect)
{
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	0f 92       	push	r0
 542:	11 24       	eor	r1, r1
 544:	8f 93       	push	r24
	motorState = 0x00;//stop motor
 546:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
	PORTB = motorState & 0x03;
 54a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 54e:	83 70       	andi	r24, 0x03	; 3
 550:	85 b9       	out	0x05, r24	; 5
	STATE = 2;
 552:	82 e0       	ldi	r24, 0x02	; 2
 554:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <STATE>
}
 558:	8f 91       	pop	r24
 55a:	0f 90       	pop	r0
 55c:	0f be       	out	0x3f, r0	; 63
 55e:	0f 90       	pop	r0
 560:	1f 90       	pop	r1
 562:	18 95       	reti

00000564 <__vector_3>:

ISR(INT2_vect) //Controls program pause button. Holds the program in the interupt until pause it pressed again.
{
 564:	1f 92       	push	r1
 566:	0f 92       	push	r0
 568:	0f b6       	in	r0, 0x3f	; 63
 56a:	0f 92       	push	r0
 56c:	11 24       	eor	r1, r1
 56e:	0b b6       	in	r0, 0x3b	; 59
 570:	0f 92       	push	r0
 572:	2f 93       	push	r18
 574:	3f 93       	push	r19
 576:	4f 93       	push	r20
 578:	5f 93       	push	r21
 57a:	6f 93       	push	r22
 57c:	7f 93       	push	r23
 57e:	8f 93       	push	r24
 580:	9f 93       	push	r25
 582:	af 93       	push	r26
 584:	bf 93       	push	r27
 586:	ef 93       	push	r30
 588:	ff 93       	push	r31
	LCDClear();
 58a:	60 e0       	ldi	r22, 0x00	; 0
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	fa dd       	rcall	.-1036   	; 0x184 <LCDByte>
	LCDWriteString("Program Paused");
 590:	8f e1       	ldi	r24, 0x1F	; 31
 592:	92 e0       	ldi	r25, 0x02	; 2
 594:	51 de       	rcall	.-862    	; 0x238 <LCDWriteString>
	mTimer(20);
 596:	84 e1       	ldi	r24, 0x14	; 20
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	da d0       	rcall	.+436    	; 0x750 <mTimer>
	motorState = 0x00;//stop motor
 59c:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
	PORTB = (motorState & 0x03);
 5a0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 5a4:	83 70       	andi	r24, 0x03	; 3
 5a6:	85 b9       	out	0x05, r24	; 5
	while(PIND & (1 << PIND2)){};//wait for button to be released
 5a8:	4a 99       	sbic	0x09, 2	; 9
	mTimer(20);
 5aa:	fe cf       	rjmp	.-4      	; 0x5a8 <__vector_3+0x44>
 5ac:	84 e1       	ldi	r24, 0x14	; 20
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	cf d0       	rcall	.+414    	; 0x750 <mTimer>
	while (!(PIND & (1 << PIND2))){};//wait for button to be pressed again
 5b2:	4a 9b       	sbis	0x09, 2	; 9
	LCDClear();
 5b4:	fe cf       	rjmp	.-4      	; 0x5b2 <__vector_3+0x4e>
 5b6:	60 e0       	ldi	r22, 0x00	; 0
 5b8:	81 e0       	ldi	r24, 0x01	; 1
	mTimer(20);
 5ba:	e4 dd       	rcall	.-1080   	; 0x184 <LCDByte>
 5bc:	84 e1       	ldi	r24, 0x14	; 20
 5be:	90 e0       	ldi	r25, 0x00	; 0
	while(PIND & (1 << PIND2)){};//wait for button to be released
 5c0:	c7 d0       	rcall	.+398    	; 0x750 <mTimer>
 5c2:	4a 99       	sbic	0x09, 2	; 9
	mTimer(20);
 5c4:	fe cf       	rjmp	.-4      	; 0x5c2 <__vector_3+0x5e>
 5c6:	84 e1       	ldi	r24, 0x14	; 20
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	c2 d0       	rcall	.+388    	; 0x750 <mTimer>
	motorState = 0x02;//start motor
 5cc:	82 e0       	ldi	r24, 0x02	; 2
 5ce:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	PORTB = (motorState & 0x03);
 5d2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 5d6:	83 70       	andi	r24, 0x03	; 3
 5d8:	85 b9       	out	0x05, r24	; 5
	EIFR |= (1 << INTF2);//for some reason the interrupt automatically re triggers unless I explicitly clear the flag at the end.
 5da:	e2 9a       	sbi	0x1c, 2	; 28
}
 5dc:	ff 91       	pop	r31
 5de:	ef 91       	pop	r30
 5e0:	bf 91       	pop	r27
 5e2:	af 91       	pop	r26
 5e4:	9f 91       	pop	r25
 5e6:	8f 91       	pop	r24
 5e8:	7f 91       	pop	r23
 5ea:	6f 91       	pop	r22
 5ec:	5f 91       	pop	r21
 5ee:	4f 91       	pop	r20
 5f0:	3f 91       	pop	r19
 5f2:	2f 91       	pop	r18
 5f4:	0f 90       	pop	r0
 5f6:	0b be       	out	0x3b, r0	; 59
 5f8:	0f 90       	pop	r0
 5fa:	0f be       	out	0x3f, r0	; 63
 5fc:	0f 90       	pop	r0
 5fe:	1f 90       	pop	r1
 600:	18 95       	reti

00000602 <__vector_6>:

ISR(INT5_vect)// Interrupt 5, Triggered the optical sensor next to the reflectivity sensor
{
 602:	1f 92       	push	r1
 604:	0f 92       	push	r0
 606:	0f b6       	in	r0, 0x3f	; 63
 608:	0f 92       	push	r0
 60a:	11 24       	eor	r1, r1
 60c:	0b b6       	in	r0, 0x3b	; 59
 60e:	0f 92       	push	r0
 610:	2f 93       	push	r18
 612:	3f 93       	push	r19
 614:	4f 93       	push	r20
 616:	5f 93       	push	r21
 618:	6f 93       	push	r22
 61a:	7f 93       	push	r23
 61c:	8f 93       	push	r24
 61e:	9f 93       	push	r25
 620:	af 93       	push	r26
 622:	bf 93       	push	r27
 624:	ef 93       	push	r30
 626:	ff 93       	push	r31
	mTimer(20);//de-bouncing
 628:	84 e1       	ldi	r24, 0x14	; 20
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	91 d0       	rcall	.+290    	; 0x750 <mTimer>
	if (PINE & (1 << PINE5)) {
 62e:	65 9b       	sbis	0x0c, 5	; 12
 630:	04 c0       	rjmp	.+8      	; 0x63a <__vector_6+0x38>
		//If pin is high, enter reflective stage
		STATE = 1;
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <STATE>
 638:	03 c0       	rjmp	.+6      	; 0x640 <__vector_6+0x3e>
		} else {
		//if pin is low, enter ENQUEUE Stage
		STATE = 4;
 63a:	84 e0       	ldi	r24, 0x04	; 4
 63c:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <STATE>
		// INT5 pin is low
	}
}
 640:	ff 91       	pop	r31
 642:	ef 91       	pop	r30
 644:	bf 91       	pop	r27
 646:	af 91       	pop	r26
 648:	9f 91       	pop	r25
 64a:	8f 91       	pop	r24
 64c:	7f 91       	pop	r23
 64e:	6f 91       	pop	r22
 650:	5f 91       	pop	r21
 652:	4f 91       	pop	r20
 654:	3f 91       	pop	r19
 656:	2f 91       	pop	r18
 658:	0f 90       	pop	r0
 65a:	0b be       	out	0x3b, r0	; 59
 65c:	0f 90       	pop	r0
 65e:	0f be       	out	0x3f, r0	; 63
 660:	0f 90       	pop	r0
 662:	1f 90       	pop	r1
 664:	18 95       	reti

00000666 <__vector_29>:

// the interrupt will be triggered if the ADC is done =======================
ISR(ADC_vect)
{
 666:	1f 92       	push	r1
 668:	0f 92       	push	r0
 66a:	0f b6       	in	r0, 0x3f	; 63
 66c:	0f 92       	push	r0
 66e:	11 24       	eor	r1, r1
 670:	2f 93       	push	r18
 672:	3f 93       	push	r19
 674:	4f 93       	push	r20
 676:	5f 93       	push	r21
 678:	6f 93       	push	r22
 67a:	8f 93       	push	r24
 67c:	9f 93       	push	r25
	uint16_t ADC_result_last = ADC_result;
 67e:	40 91 03 02 	lds	r20, 0x0203	; 0x800203 <ADC_result>
 682:	50 91 04 02 	lds	r21, 0x0204	; 0x800204 <ADC_result+0x1>
	ADC_result = ADCL;
 686:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <ADC_result+0x1>
 690:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <ADC_result>
	ADC_result |= (ADCH && 0x03) << 8;
 694:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 698:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <ADC_result>
 69c:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <ADC_result+0x1>
 6a0:	61 e0       	ldi	r22, 0x01	; 1
 6a2:	21 11       	cpse	r18, r1
 6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <__vector_29+0x42>
 6a6:	60 e0       	ldi	r22, 0x00	; 0
 6a8:	20 e0       	ldi	r18, 0x00	; 0
 6aa:	30 e0       	ldi	r19, 0x00	; 0
 6ac:	36 2f       	mov	r19, r22
 6ae:	82 2b       	or	r24, r18
 6b0:	93 2b       	or	r25, r19
 6b2:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <ADC_result+0x1>
 6b6:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <ADC_result>
	if((ADC_result < ADC_result_last)){//gets us the lowest value read by the reflectivity sensor
 6ba:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <ADC_result>
 6be:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <ADC_result+0x1>
 6c2:	84 17       	cp	r24, r20
 6c4:	95 07       	cpc	r25, r21
 6c6:	20 f0       	brcs	.+8      	; 0x6d0 <__vector_29+0x6a>
		} else {
		ADC_result = ADC_result_last;
 6c8:	50 93 04 02 	sts	0x0204, r21	; 0x800204 <ADC_result+0x1>
 6cc:	40 93 03 02 	sts	0x0203, r20	; 0x800203 <ADC_result>
	}
	ADC_result_flag = 1;
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <ADC_result_flag+0x1>
 6d8:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <ADC_result_flag>
}
 6dc:	9f 91       	pop	r25
 6de:	8f 91       	pop	r24
 6e0:	6f 91       	pop	r22
 6e2:	5f 91       	pop	r21
 6e4:	4f 91       	pop	r20
 6e6:	3f 91       	pop	r19
 6e8:	2f 91       	pop	r18
 6ea:	0f 90       	pop	r0
 6ec:	0f be       	out	0x3f, r0	; 63
 6ee:	0f 90       	pop	r0
 6f0:	1f 90       	pop	r1
 6f2:	18 95       	reti

000006f4 <__vector_default>:

ISR(BADISR_vect)
{
 6f4:	1f 92       	push	r1
 6f6:	0f 92       	push	r0
 6f8:	0f b6       	in	r0, 0x3f	; 63
 6fa:	0f 92       	push	r0
 6fc:	11 24       	eor	r1, r1
 6fe:	8f 93       	push	r24
	PORTL = 0xF0;//light up everything to let us know it's screwed
 700:	80 ef       	ldi	r24, 0xF0	; 240
 702:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 706:	8f 91       	pop	r24
 708:	0f 90       	pop	r0
 70a:	0f be       	out	0x3f, r0	; 63
 70c:	0f 90       	pop	r0
 70e:	1f 90       	pop	r1
 710:	18 95       	reti

00000712 <pwm>:
#include <avr/interrupt.h> /* Needed for interrupt functionality */

void pwm(){
	//Step 1
	// Set Timer0 to Fast PWM mode (WGM02:0 = 011)
	TCCR0A |= (1 << WGM00) | (1 << WGM01);  // Set WGM01 and WGM00
 712:	84 b5       	in	r24, 0x24	; 36
 714:	83 60       	ori	r24, 0x03	; 3
 716:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~(1 << WGM02);                // Clear WGM02 for Fast PWM, TOP=0xFF
 718:	85 b5       	in	r24, 0x25	; 37
 71a:	87 7f       	andi	r24, 0xF7	; 247
 71c:	85 bd       	out	0x25, r24	; 37
	// Enable the Output Compare Match A Interrupt for Timer 0
	//TIMSK0 |= (1 <<  (OCIE0A));// Enable overflow interrupt

	//step 3
	// Set Compare Match Output Mode to clear on compare match and set at TOP (non-inverting mode)
	TCCR0A |= (1 << COM0A1);  // Set COM0A1 to 1
 71e:	84 b5       	in	r24, 0x24	; 36
 720:	80 68       	ori	r24, 0x80	; 128
 722:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1 << COM0A0); // Clear COM0A0 to 0
 724:	84 b5       	in	r24, 0x24	; 36
 726:	8f 7b       	andi	r24, 0xBF	; 191
 728:	84 bd       	out	0x24, r24	; 36
	
	//step 4
	// Set the prescaler
	TCCR0B |= (1 << CS01);// CS02:0 = 010 (clk/64 prescale)
 72a:	85 b5       	in	r24, 0x25	; 37
 72c:	82 60       	ori	r24, 0x02	; 2
 72e:	85 bd       	out	0x25, r24	; 37
	
	//Step 5
	//For a duty cycle of 50%, ORCA should be 127, which is half of 255 rounded to nearest integer
	OCR0A = 127;
 730:	8f e7       	ldi	r24, 0x7F	; 127
 732:	87 bd       	out	0x27, r24	; 39
	
	//Step 6
	DDRB |= (1 << DDB7);  // Configure PORTB7 as output (OC0A is on PB7)
 734:	27 9a       	sbi	0x04, 7	; 4
 736:	08 95       	ret

00000738 <pwmSet>:
}

void pwmSet(unsigned char input){//sets PWM duty cycle
	OCR0A = input;
 738:	87 bd       	out	0x27, r24	; 39
 73a:	08 95       	ret

0000073c <timer8MHz>:

//This file contains the timer subroutines from lab 2. They have been repurposed for use in future labs

void timer8MHz(){ //sets the timer to 8MHz

    CLKPR = 0x80; /* This will be discussed later. */
 73c:	e1 e6       	ldi	r30, 0x61	; 97
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	80 e8       	ldi	r24, 0x80	; 128
 742:	80 83       	st	Z, r24
    CLKPR = 0x01; /* Required to set CPU Clock to 8MHz */
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	80 83       	st	Z, r24
    
    /* Timer instructions */
    /* Sets timer 1 to run at 1MHz, note: CPU clock is set to 8MHz.
       Disable all functions and use as pure timer */
    
    TCCR1B = _BV(CS11); /* _BV sets the bit to logic 1 */
 748:	82 e0       	ldi	r24, 0x02	; 2
 74a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 74e:	08 95       	ret

00000750 <mTimer>:
    /* CS means clock select, has the pre-scaler set to 8 */

} /* close timer8MHz */

/* This is the driver for the timer. */
void mTimer(int count){
 750:	ac 01       	movw	r20, r24
    int i; /* keeps track of loop number */

    i = 0; /* initializes loop counter */

    /* Set the Waveform Generation mode bit description to Clear Timer on Compare Match mode (CTC) only */
    TCCR1B |= _BV(WGM12); /* set WGM bits to 0100, see page 145 */
 752:	e1 e8       	ldi	r30, 0x81	; 129
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	90 81       	ld	r25, Z
 758:	98 60       	ori	r25, 0x08	; 8
 75a:	90 83       	st	Z, r25
    /* Note WGM is spread over two registers. */

    OCR1A = 0x03E8; /* Set Output Compare Register for 1000 cycles = 1ms */
 75c:	88 ee       	ldi	r24, 0xE8	; 232
 75e:	93 e0       	ldi	r25, 0x03	; 3
 760:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 764:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
    TCNT1 = 0x0000; /* Sets initial value of Timer Counter to 0x0000 */
 768:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 76c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
 770:	b1 9a       	sbi	0x16, 1	; 22
    The system clock has been pre-scaled by 2. This means it's running at half speed, 8MHz. See Technical manual for
    ATmega2560 (i.e. full manual) and look up "16-bit Timer/Counter1." */

    int i; /* keeps track of loop number */

    i = 0; /* initializes loop counter */
 772:	20 e0       	ldi	r18, 0x00	; 0
 774:	30 e0       	ldi	r19, 0x00	; 0

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
    /* If the following statement is confusing, please ask for clarification! */

    /* Poll the timer to determine when the timer has reached 0x03E8 */
    while(i<count){
 776:	05 c0       	rjmp	.+10     	; 0x782 <mTimer+0x32>
        if((TIFR1 & 0x02) == 0x02){
 778:	b1 9b       	sbis	0x16, 1	; 22
 77a:	fe cf       	rjmp	.-4      	; 0x778 <mTimer+0x28>
            TIFR1 |= _BV(OCF1A); /* clear interrupt flag by writing a ONE to the bit */
 77c:	b1 9a       	sbi	0x16, 1	; 22
            i++; /* increment loop number */
 77e:	2f 5f       	subi	r18, 0xFF	; 255
 780:	3f 4f       	sbci	r19, 0xFF	; 255

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
    /* If the following statement is confusing, please ask for clarification! */

    /* Poll the timer to determine when the timer has reached 0x03E8 */
    while(i<count){
 782:	24 17       	cp	r18, r20
 784:	35 07       	cpc	r19, r21
 786:	1c f4       	brge	.+6      	; 0x78e <mTimer+0x3e>
        if((TIFR1 & 0x02) == 0x02){
 788:	b1 9b       	sbis	0x16, 1	; 22
 78a:	f6 cf       	rjmp	.-20     	; 0x778 <mTimer+0x28>
 78c:	f7 cf       	rjmp	.-18     	; 0x77c <mTimer+0x2c>
 78e:	08 95       	ret

00000790 <__divmodhi4>:
 790:	97 fb       	bst	r25, 7
 792:	07 2e       	mov	r0, r23
 794:	16 f4       	brtc	.+4      	; 0x79a <__divmodhi4+0xa>
 796:	00 94       	com	r0
 798:	06 d0       	rcall	.+12     	; 0x7a6 <__divmodhi4_neg1>
 79a:	77 fd       	sbrc	r23, 7
 79c:	08 d0       	rcall	.+16     	; 0x7ae <__divmodhi4_neg2>
 79e:	0b d0       	rcall	.+22     	; 0x7b6 <__udivmodhi4>
 7a0:	07 fc       	sbrc	r0, 7
 7a2:	05 d0       	rcall	.+10     	; 0x7ae <__divmodhi4_neg2>
 7a4:	3e f4       	brtc	.+14     	; 0x7b4 <__divmodhi4_exit>

000007a6 <__divmodhi4_neg1>:
 7a6:	90 95       	com	r25
 7a8:	81 95       	neg	r24
 7aa:	9f 4f       	sbci	r25, 0xFF	; 255
 7ac:	08 95       	ret

000007ae <__divmodhi4_neg2>:
 7ae:	70 95       	com	r23
 7b0:	61 95       	neg	r22
 7b2:	7f 4f       	sbci	r23, 0xFF	; 255

000007b4 <__divmodhi4_exit>:
 7b4:	08 95       	ret

000007b6 <__udivmodhi4>:
 7b6:	aa 1b       	sub	r26, r26
 7b8:	bb 1b       	sub	r27, r27
 7ba:	51 e1       	ldi	r21, 0x11	; 17
 7bc:	07 c0       	rjmp	.+14     	; 0x7cc <__udivmodhi4_ep>

000007be <__udivmodhi4_loop>:
 7be:	aa 1f       	adc	r26, r26
 7c0:	bb 1f       	adc	r27, r27
 7c2:	a6 17       	cp	r26, r22
 7c4:	b7 07       	cpc	r27, r23
 7c6:	10 f0       	brcs	.+4      	; 0x7cc <__udivmodhi4_ep>
 7c8:	a6 1b       	sub	r26, r22
 7ca:	b7 0b       	sbc	r27, r23

000007cc <__udivmodhi4_ep>:
 7cc:	88 1f       	adc	r24, r24
 7ce:	99 1f       	adc	r25, r25
 7d0:	5a 95       	dec	r21
 7d2:	a9 f7       	brne	.-22     	; 0x7be <__udivmodhi4_loop>
 7d4:	80 95       	com	r24
 7d6:	90 95       	com	r25
 7d8:	bc 01       	movw	r22, r24
 7da:	cd 01       	movw	r24, r26
 7dc:	08 95       	ret

000007de <_exit>:
 7de:	f8 94       	cli

000007e0 <__stop_program>:
 7e0:	ff cf       	rjmp	.-2      	; 0x7e0 <__stop_program>
