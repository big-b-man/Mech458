
Stepper Motor Acceleration.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  00000364  000003f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000364  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800214  00800214  0000040c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fb0  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d68  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000596  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  0000279c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005eb  00000000  00000000  0000286c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020d  00000000  00000000  00002e57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00003064  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e6       	ldi	r30, 0x64	; 100
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 31       	cpi	r26, 0x14	; 20
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e1       	ldi	r26, 0x14	; 20
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 31       	cpi	r26, 0x16	; 22
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	1f c1       	rjmp	.+574    	; 0x360 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#include "timer.h"

volatile int stepNum;//This stores which step the motor is currently stopped on

int main(){
	timer8MHz();//setup the chip clock to 8 MHz
 124:	f3 d0       	rcall	.+486    	; 0x30c <timer8MHz>
	DDRA = 0xFF;//Sets all of PORTA to output as this controls the stepper
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	81 b9       	out	0x01, r24	; 1
	DDRL = 0xF0;//sets bits 4-7 in the PORTL Register to output. These 4 pins control LED's on the board that can be used for debugging
 12a:	80 ef       	ldi	r24, 0xF0	; 240
 12c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	sei();//enables all interupts for the timer

	while(1){
		stepNum = homeMotor();
 130:	78 94       	sei
 132:	31 d0       	rcall	.+98     	; 0x196 <homeMotor>
 134:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <__data_end+0x1>
 138:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
		
		stepNum = moveStepper(50,stepNum);//move motor 90 degrees forward.
 13c:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <__data_end>
 140:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <__data_end+0x1>
 144:	82 e3       	ldi	r24, 0x32	; 50
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	48 d0       	rcall	.+144    	; 0x1da <moveStepper>
 14a:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <__data_end+0x1>
 14e:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
		stepNum = moveStepper(100,stepNum);//move motor 180 degrees forward.
 152:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <__data_end>
 156:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <__data_end+0x1>
 15a:	84 e6       	ldi	r24, 0x64	; 100
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	3d d0       	rcall	.+122    	; 0x1da <moveStepper>
 160:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <__data_end+0x1>
 164:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
		stepNum = moveStepper(-50,stepNum);//move motor 90 degrees backwards.
 168:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <__data_end>
 16c:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <__data_end+0x1>
 170:	8e ec       	ldi	r24, 0xCE	; 206
 172:	9f ef       	ldi	r25, 0xFF	; 255
 174:	32 d0       	rcall	.+100    	; 0x1da <moveStepper>
 176:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <__data_end+0x1>
 17a:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
		stepNum = moveStepper(-100,stepNum);//move motor 180 degrees backwards.
 17e:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <__data_end>
 182:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <__data_end+0x1>
 186:	8c e9       	ldi	r24, 0x9C	; 156
 188:	9f ef       	ldi	r25, 0xFF	; 255
 18a:	27 d0       	rcall	.+78     	; 0x1da <moveStepper>
 18c:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <__data_end+0x1>
 190:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
 194:	ce cf       	rjmp	.-100    	; 0x132 <main+0xe>

00000196 <homeMotor>:
const char motorSteps[] = { 0b00110000,
	0b00000110,
	0b00101000,
0b00000101 };// steps for stepper motor

int homeMotor(void) {//This is the function you made in the lab Cody. The only difference is that I made it return the current step of the motor once the motor has hit it's home position.
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
	int stepIdx = 0;
 19a:	c0 e0       	ldi	r28, 0x00	; 0
 19c:	d0 e0       	ldi	r29, 0x00	; 0
	while(1) {
		//check the hall effect signal
		if (!(PIND & (1 << HALL_SENSOR_PIN))) {
 19e:	4f 9b       	sbis	0x09, 7	; 9
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <homeMotor+0x3a>
			PORTA = 0x00; // STOPS MOTOR
			return(stepIdx);
			} else {
			PORTL = 0b11000000;	
 1a2:	80 ec       	ldi	r24, 0xC0	; 192
 1a4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
			//MOVE ONE STEP
			PORTA = motorSteps[stepIdx];
 1a8:	fe 01       	movw	r30, r28
 1aa:	e0 5f       	subi	r30, 0xF0	; 240
 1ac:	fd 4f       	sbci	r31, 0xFD	; 253
 1ae:	80 81       	ld	r24, Z
 1b0:	82 b9       	out	0x02, r24	; 2
			stepIdx = (stepIdx + 1) % 4; //cycle through steps
 1b2:	ce 01       	movw	r24, r28
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	83 70       	andi	r24, 0x03	; 3
 1b8:	90 78       	andi	r25, 0x80	; 128
 1ba:	99 23       	and	r25, r25
 1bc:	24 f4       	brge	.+8      	; 0x1c6 <homeMotor+0x30>
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	8c 6f       	ori	r24, 0xFC	; 252
 1c2:	9f 6f       	ori	r25, 0xFF	; 255
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	ec 01       	movw	r28, r24
			mTimer(10); //delay for motor movement
 1c8:	8a e0       	ldi	r24, 0x0A	; 10
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	a9 d0       	rcall	.+338    	; 0x320 <mTimer>
		}
	}
 1ce:	e7 cf       	rjmp	.-50     	; 0x19e <homeMotor+0x8>
int homeMotor(void) {//This is the function you made in the lab Cody. The only difference is that I made it return the current step of the motor once the motor has hit it's home position.
	int stepIdx = 0;
	while(1) {
		//check the hall effect signal
		if (!(PIND & (1 << HALL_SENSOR_PIN))) {
			PORTA = 0x00; // STOPS MOTOR
 1d0:	12 b8       	out	0x02, r1	; 2
			PORTA = motorSteps[stepIdx];
			stepIdx = (stepIdx + 1) % 4; //cycle through steps
			mTimer(10); //delay for motor movement
		}
	}
}
 1d2:	ce 01       	movw	r24, r28
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <moveStepper>:

int moveStepper(int moveNum, int stepNum){//You will write a subroutine for this function to enable variable time delay between the motor steps.
 1da:	af 92       	push	r10
 1dc:	bf 92       	push	r11
 1de:	cf 92       	push	r12
 1e0:	df 92       	push	r13
 1e2:	ef 92       	push	r14
 1e4:	ff 92       	push	r15
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	60 97       	sbiw	r28, 0x10	; 16
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	f8 94       	cli
 1f8:	de bf       	out	0x3e, r29	; 62
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	cd bf       	out	0x3d, r28	; 61
 1fe:	5c 01       	movw	r10, r24
 200:	8b 01       	movw	r16, r22
	int *ptr;
	if(moveNum >= 0){
 202:	99 23       	and	r25, r25
 204:	74 f0       	brlt	.+28     	; 0x222 <moveStepper+0x48>
		int forSteps[] = {0,1,2,3};
 206:	88 e0       	ldi	r24, 0x08	; 8
 208:	e0 e0       	ldi	r30, 0x00	; 0
 20a:	f2 e0       	ldi	r31, 0x02	; 2
 20c:	de 01       	movw	r26, r28
 20e:	19 96       	adiw	r26, 0x09	; 9
 210:	01 90       	ld	r0, Z+
 212:	0d 92       	st	X+, r0
 214:	8a 95       	dec	r24
 216:	e1 f7       	brne	.-8      	; 0x210 <moveStepper+0x36>
		ptr = forSteps;
 218:	6e 01       	movw	r12, r28
 21a:	89 e0       	ldi	r24, 0x09	; 9
 21c:	c8 0e       	add	r12, r24
 21e:	d1 1c       	adc	r13, r1
 220:	0c c0       	rjmp	.+24     	; 0x23a <moveStepper+0x60>
		} else {
		int backSteps[] = {2,3,0,1};
 222:	88 e0       	ldi	r24, 0x08	; 8
 224:	e8 e0       	ldi	r30, 0x08	; 8
 226:	f2 e0       	ldi	r31, 0x02	; 2
 228:	de 01       	movw	r26, r28
 22a:	11 96       	adiw	r26, 0x01	; 1
 22c:	01 90       	ld	r0, Z+
 22e:	0d 92       	st	X+, r0
 230:	8a 95       	dec	r24
 232:	e1 f7       	brne	.-8      	; 0x22c <moveStepper+0x52>
		ptr = backSteps;
 234:	de 01       	movw	r26, r28
 236:	11 96       	adiw	r26, 0x01	; 1
 238:	6d 01       	movw	r12, r26
	}
	for(int i=0; i < moveNum; i++){
 23a:	e1 2c       	mov	r14, r1
 23c:	f1 2c       	mov	r15, r1
 23e:	50 c0       	rjmp	.+160    	; 0x2e0 <moveStepper+0x106>
		switch(stepNum){
 240:	01 30       	cpi	r16, 0x01	; 1
 242:	11 05       	cpc	r17, r1
 244:	41 f1       	breq	.+80     	; 0x296 <moveStepper+0xbc>
 246:	24 f4       	brge	.+8      	; 0x250 <moveStepper+0x76>
 248:	01 15       	cp	r16, r1
 24a:	11 05       	cpc	r17, r1
 24c:	a1 f0       	breq	.+40     	; 0x276 <moveStepper+0x9c>
 24e:	42 c0       	rjmp	.+132    	; 0x2d4 <moveStepper+0xfa>
 250:	02 30       	cpi	r16, 0x02	; 2
 252:	11 05       	cpc	r17, r1
 254:	81 f1       	breq	.+96     	; 0x2b6 <moveStepper+0xdc>
 256:	03 30       	cpi	r16, 0x03	; 3
 258:	11 05       	cpc	r17, r1
 25a:	e1 f5       	brne	.+120    	; 0x2d4 <moveStepper+0xfa>
			case(3):
			PORTA = motorSteps[*ptr];
 25c:	d6 01       	movw	r26, r12
 25e:	ed 91       	ld	r30, X+
 260:	fc 91       	ld	r31, X
 262:	11 97       	sbiw	r26, 0x01	; 1
 264:	e0 5f       	subi	r30, 0xF0	; 240
 266:	fd 4f       	sbci	r31, 0xFD	; 253
 268:	80 81       	ld	r24, Z
 26a:	82 b9       	out	0x02, r24	; 2
			PORTC = 0x01;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	88 b9       	out	0x08, r24	; 8
			stepNum = *ptr;
 270:	0d 91       	ld	r16, X+
 272:	1c 91       	ld	r17, X
			break;
 274:	2f c0       	rjmp	.+94     	; 0x2d4 <moveStepper+0xfa>
			case(0):
			PORTA = motorSteps[*(ptr+1)];
 276:	d6 01       	movw	r26, r12
 278:	12 96       	adiw	r26, 0x02	; 2
 27a:	ed 91       	ld	r30, X+
 27c:	fc 91       	ld	r31, X
 27e:	13 97       	sbiw	r26, 0x03	; 3
 280:	e0 5f       	subi	r30, 0xF0	; 240
 282:	fd 4f       	sbci	r31, 0xFD	; 253
 284:	80 81       	ld	r24, Z
 286:	82 b9       	out	0x02, r24	; 2
			PORTC = 0x02;
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	88 b9       	out	0x08, r24	; 8
			stepNum = *(ptr+1);
 28c:	12 96       	adiw	r26, 0x02	; 2
 28e:	0d 91       	ld	r16, X+
 290:	1c 91       	ld	r17, X
 292:	13 97       	sbiw	r26, 0x03	; 3
			break;
 294:	1f c0       	rjmp	.+62     	; 0x2d4 <moveStepper+0xfa>
			case(1):
			PORTA = motorSteps[*(ptr+2)];
 296:	d6 01       	movw	r26, r12
 298:	14 96       	adiw	r26, 0x04	; 4
 29a:	ed 91       	ld	r30, X+
 29c:	fc 91       	ld	r31, X
 29e:	15 97       	sbiw	r26, 0x05	; 5
 2a0:	e0 5f       	subi	r30, 0xF0	; 240
 2a2:	fd 4f       	sbci	r31, 0xFD	; 253
 2a4:	80 81       	ld	r24, Z
 2a6:	82 b9       	out	0x02, r24	; 2
			PORTC = 0x04;
 2a8:	84 e0       	ldi	r24, 0x04	; 4
 2aa:	88 b9       	out	0x08, r24	; 8
			stepNum = *(ptr+2);
 2ac:	14 96       	adiw	r26, 0x04	; 4
 2ae:	0d 91       	ld	r16, X+
 2b0:	1c 91       	ld	r17, X
 2b2:	15 97       	sbiw	r26, 0x05	; 5
			break;
 2b4:	0f c0       	rjmp	.+30     	; 0x2d4 <moveStepper+0xfa>
			case(2):
			PORTA = motorSteps[*(ptr+3)];
 2b6:	d6 01       	movw	r26, r12
 2b8:	16 96       	adiw	r26, 0x06	; 6
 2ba:	ed 91       	ld	r30, X+
 2bc:	fc 91       	ld	r31, X
 2be:	17 97       	sbiw	r26, 0x07	; 7
 2c0:	e0 5f       	subi	r30, 0xF0	; 240
 2c2:	fd 4f       	sbci	r31, 0xFD	; 253
 2c4:	80 81       	ld	r24, Z
 2c6:	82 b9       	out	0x02, r24	; 2
			PORTC = 0x08;
 2c8:	88 e0       	ldi	r24, 0x08	; 8
 2ca:	88 b9       	out	0x08, r24	; 8
			stepNum = *(ptr+3);
 2cc:	16 96       	adiw	r26, 0x06	; 6
 2ce:	0d 91       	ld	r16, X+
 2d0:	1c 91       	ld	r17, X
 2d2:	17 97       	sbiw	r26, 0x07	; 7
			break;
			default:
			break;
		}
		mTimer(20); //turn this into a function that changes the delay with each step.
 2d4:	84 e1       	ldi	r24, 0x14	; 20
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	23 d0       	rcall	.+70     	; 0x320 <mTimer>
		ptr = forSteps;
		} else {
		int backSteps[] = {2,3,0,1};
		ptr = backSteps;
	}
	for(int i=0; i < moveNum; i++){
 2da:	bf ef       	ldi	r27, 0xFF	; 255
 2dc:	eb 1a       	sub	r14, r27
 2de:	fb 0a       	sbc	r15, r27
 2e0:	ea 14       	cp	r14, r10
 2e2:	fb 04       	cpc	r15, r11
 2e4:	0c f4       	brge	.+2      	; 0x2e8 <moveStepper+0x10e>
 2e6:	ac cf       	rjmp	.-168    	; 0x240 <moveStepper+0x66>
			break;
		}
		mTimer(20); //turn this into a function that changes the delay with each step.
	}
	return(stepNum);
 2e8:	c8 01       	movw	r24, r16
 2ea:	60 96       	adiw	r28, 0x10	; 16
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	de bf       	out	0x3e, r29	; 62
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	cd bf       	out	0x3d, r28	; 61
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	ff 90       	pop	r15
 300:	ef 90       	pop	r14
 302:	df 90       	pop	r13
 304:	cf 90       	pop	r12
 306:	bf 90       	pop	r11
 308:	af 90       	pop	r10
 30a:	08 95       	ret

0000030c <timer8MHz>:

//This file contains the timer subroutines from lab 2. They have been repurposed for use in future labs

void timer8MHz(){ //sets the timer to 8MHz

    CLKPR = 0x80; /* This will be discussed later. */
 30c:	e1 e6       	ldi	r30, 0x61	; 97
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	80 e8       	ldi	r24, 0x80	; 128
 312:	80 83       	st	Z, r24
    CLKPR = 0x01; /* Required to set CPU Clock to 8MHz */
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	80 83       	st	Z, r24
    
    /* Timer instructions */
    /* Sets timer 1 to run at 1MHz, note: CPU clock is set to 8MHz.
       Disable all functions and use as pure timer */
    
    TCCR1B = _BV(CS11); /* _BV sets the bit to logic 1 */
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 31e:	08 95       	ret

00000320 <mTimer>:
    int i; /* keeps track of loop number */

    i = 0; /* initializes loop counter */

    /* Set the Waveform Generation mode bit description to Clear Timer on Compare Match mode (CTC) only */
    TCCR1B |= _BV(WGM12); /* set WGM bits to 0100, see page 145 */
 320:	e1 e8       	ldi	r30, 0x81	; 129
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	20 81       	ld	r18, Z
 326:	28 60       	ori	r18, 0x08	; 8
 328:	20 83       	st	Z, r18
    /* Note WGM is spread over two registers. */

    OCR1A = 0x03E8; /* Set Output Compare Register for 1000 cycles = 1ms */
 32a:	28 ee       	ldi	r18, 0xE8	; 232
 32c:	33 e0       	ldi	r19, 0x03	; 3
 32e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 332:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
    TCNT1 = 0x0000; /* Sets initial value of Timer Counter to 0x0000 */
 336:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 33a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
 33e:	26 b3       	in	r18, 0x16	; 22
 340:	22 60       	ori	r18, 0x02	; 2
 342:	26 bb       	out	0x16, r18	; 22
    The system clock has been pre-scaled by 2. This means it's running at half speed, 8MHz. See Technical manual for
    ATmega2560 (i.e. full manual) and look up "16-bit Timer/Counter1." */

    int i; /* keeps track of loop number */

    i = 0; /* initializes loop counter */
 344:	20 e0       	ldi	r18, 0x00	; 0
 346:	30 e0       	ldi	r19, 0x00	; 0

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
    /* If the following statement is confusing, please ask for clarification! */

    /* Poll the timer to determine when the timer has reached 0x03E8 */
    while(i<count){
 348:	07 c0       	rjmp	.+14     	; 0x358 <mTimer+0x38>
        if((TIFR1 & 0x02) == 0x02){
 34a:	b1 9b       	sbis	0x16, 1	; 22
 34c:	05 c0       	rjmp	.+10     	; 0x358 <mTimer+0x38>
            TIFR1 |= _BV(OCF1A); /* clear interrupt flag by writing a ONE to the bit */
 34e:	46 b3       	in	r20, 0x16	; 22
 350:	42 60       	ori	r20, 0x02	; 2
 352:	46 bb       	out	0x16, r20	; 22
            i++; /* increment loop number */
 354:	2f 5f       	subi	r18, 0xFF	; 255
 356:	3f 4f       	sbci	r19, 0xFF	; 255

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
    /* If the following statement is confusing, please ask for clarification! */

    /* Poll the timer to determine when the timer has reached 0x03E8 */
    while(i<count){
 358:	28 17       	cp	r18, r24
 35a:	39 07       	cpc	r19, r25
 35c:	b4 f3       	brlt	.-20     	; 0x34a <mTimer+0x2a>
        if((TIFR1 & 0x02) == 0x02){
            TIFR1 |= _BV(OCF1A); /* clear interrupt flag by writing a ONE to the bit */
            i++; /* increment loop number */
        } /* end if */
    } /* end while */
 35e:	08 95       	ret

00000360 <_exit>:
 360:	f8 94       	cli

00000362 <__stop_program>:
 362:	ff cf       	rjmp	.-2      	; 0x362 <__stop_program>
