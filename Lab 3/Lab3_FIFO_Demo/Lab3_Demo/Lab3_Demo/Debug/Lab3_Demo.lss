
Lab3_Demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  0000067e  00000712  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000067e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800206  00800206  00000718  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000748  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001388  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d9b  00000000  00000000  00001b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005d0  00000000  00000000  00002913  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00002ee4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ff  00000000  00000000  00002fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000039e  00000000  00000000  000035c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00003965  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e7       	ldi	r30, 0x7E	; 126
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 30       	cpi	r26, 0x0A	; 10
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	91 d0       	rcall	.+290    	; 0x242 <main>
 120:	ac c2       	rjmp	.+1368   	; 0x67a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initLink>:
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
}/*isEmpty*/
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	ec 01       	movw	r28, r24
 12a:	84 e0       	ldi	r24, 0x04	; 4
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	84 d1       	rcall	.+776    	; 0x438 <malloc>
 130:	99 83       	std	Y+1, r25	; 0x01
 132:	88 83       	st	Y, r24
 134:	fc 01       	movw	r30, r24
 136:	13 82       	std	Z+3, r1	; 0x03
 138:	12 82       	std	Z+2, r1	; 0x02
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <enqueue>:
 140:	db 01       	movw	r26, r22
 142:	ed 91       	ld	r30, X+
 144:	fc 91       	ld	r31, X
 146:	30 97       	sbiw	r30, 0x00	; 0
 148:	61 f0       	breq	.+24     	; 0x162 <enqueue+0x22>
 14a:	da 01       	movw	r26, r20
 14c:	8d 91       	ld	r24, X+
 14e:	9c 91       	ld	r25, X
 150:	11 97       	sbiw	r26, 0x01	; 1
 152:	93 83       	std	Z+3, r25	; 0x03
 154:	82 83       	std	Z+2, r24	; 0x02
 156:	8d 91       	ld	r24, X+
 158:	9c 91       	ld	r25, X
 15a:	fb 01       	movw	r30, r22
 15c:	91 83       	std	Z+1, r25	; 0x01
 15e:	80 83       	st	Z, r24
 160:	08 95       	ret
 162:	da 01       	movw	r26, r20
 164:	2d 91       	ld	r18, X+
 166:	3c 91       	ld	r19, X
 168:	11 97       	sbiw	r26, 0x01	; 1
 16a:	fc 01       	movw	r30, r24
 16c:	31 83       	std	Z+1, r19	; 0x01
 16e:	20 83       	st	Z, r18
 170:	8d 91       	ld	r24, X+
 172:	9c 91       	ld	r25, X
 174:	db 01       	movw	r26, r22
 176:	8d 93       	st	X+, r24
 178:	9c 93       	st	X, r25
 17a:	08 95       	ret

0000017c <dequeue>:
 17c:	fc 01       	movw	r30, r24
 17e:	80 81       	ld	r24, Z
 180:	91 81       	ldd	r25, Z+1	; 0x01
 182:	db 01       	movw	r26, r22
 184:	8d 93       	st	X+, r24
 186:	9c 93       	st	X, r25
 188:	a0 81       	ld	r26, Z
 18a:	b1 81       	ldd	r27, Z+1	; 0x01
 18c:	10 97       	sbiw	r26, 0x00	; 0
 18e:	31 f0       	breq	.+12     	; 0x19c <dequeue+0x20>
 190:	12 96       	adiw	r26, 0x02	; 2
 192:	8d 91       	ld	r24, X+
 194:	9c 91       	ld	r25, X
 196:	13 97       	sbiw	r26, 0x03	; 3
 198:	91 83       	std	Z+1, r25	; 0x01
 19a:	80 83       	st	Z, r24
 19c:	08 95       	ret

0000019e <clearQueue>:
 19e:	0f 93       	push	r16
 1a0:	1f 93       	push	r17
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	ec 01       	movw	r28, r24
 1a8:	8b 01       	movw	r16, r22
 1aa:	88 81       	ld	r24, Y
 1ac:	99 81       	ldd	r25, Y+1	; 0x01
 1ae:	00 97       	sbiw	r24, 0x00	; 0
 1b0:	51 f0       	breq	.+20     	; 0x1c6 <clearQueue+0x28>
 1b2:	fc 01       	movw	r30, r24
 1b4:	22 81       	ldd	r18, Z+2	; 0x02
 1b6:	33 81       	ldd	r19, Z+3	; 0x03
 1b8:	39 83       	std	Y+1, r19	; 0x01
 1ba:	28 83       	st	Y, r18
 1bc:	d5 d1       	rcall	.+938    	; 0x568 <free>
 1be:	88 81       	ld	r24, Y
 1c0:	99 81       	ldd	r25, Y+1	; 0x01
 1c2:	00 97       	sbiw	r24, 0x00	; 0
 1c4:	b1 f7       	brne	.-20     	; 0x1b2 <clearQueue+0x14>
 1c6:	f8 01       	movw	r30, r16
 1c8:	11 82       	std	Z+1, r1	; 0x01
 1ca:	10 82       	st	Z, r1
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	0f 91       	pop	r16
 1d4:	08 95       	ret

000001d6 <size>:
	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;

	temp = *h;			/* point to the first item in the list */
 1d6:	dc 01       	movw	r26, r24
 1d8:	ed 91       	ld	r30, X+
 1da:	fc 91       	ld	r31, X

	while(temp != NULL){
 1dc:	30 97       	sbiw	r30, 0x00	; 0
 1de:	49 f0       	breq	.+18     	; 0x1f2 <size+0x1c>
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
		numElements++;
 1e4:	01 96       	adiw	r24, 0x01	; 1
		temp = temp->next;
 1e6:	02 80       	ldd	r0, Z+2	; 0x02
 1e8:	f3 81       	ldd	r31, Z+3	; 0x03
 1ea:	e0 2d       	mov	r30, r0

	numElements = 0;

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
 1ec:	30 97       	sbiw	r30, 0x00	; 0
 1ee:	d1 f7       	brne	.-12     	; 0x1e4 <size+0xe>
 1f0:	08 95       	ret
int size(link **h, link **t){

	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
		numElements++;
		temp = temp->next;
	}/*while*/
	
	return(numElements);
}/*size*/
 1f6:	08 95       	ret

000001f8 <mTimer>:

void mTimer(int count){
 1f8:	ac 01       	movw	r20, r24
    int i; /* keeps track of loop number */

    i = 0; /* initializes loop counter */

    /* Set the Waveform Generation mode bit description to Clear Timer on Compare Match mode (CTC) only */
    TCCR1B |= _BV(WGM12); /* set WGM bits to 0100, see page 145 */
 1fa:	e1 e8       	ldi	r30, 0x81	; 129
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	90 81       	ld	r25, Z
 200:	98 60       	ori	r25, 0x08	; 8
 202:	90 83       	st	Z, r25
    /* Note WGM is spread over two registers. */

    OCR1A = 0x03E8; /* Set Output Compare Register for 1000 cycles = 1ms */
 204:	88 ee       	ldi	r24, 0xE8	; 232
 206:	93 e0       	ldi	r25, 0x03	; 3
 208:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 20c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
    TCNT1 = 0x0000; /* Sets initial value of Timer Counter to 0x0000 */
 210:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 214:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
    TIMSK1 = TIMSK1 | 0b00000010; /* Enable the output compare interrupt enable */
 218:	ef e6       	ldi	r30, 0x6F	; 111
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	90 81       	ld	r25, Z
 21e:	92 60       	ori	r25, 0x02	; 2
 220:	90 83       	st	Z, r25

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
 222:	b1 9a       	sbi	0x16, 1	; 22
    The system clock has been pre-scaled by 2. This means it's running at half speed, 8MHz. See Technical manual for
    ATmega2560 (i.e. full manual) and look up "16-bit Timer/Counter1." */

    int i; /* keeps track of loop number */

    i = 0; /* initializes loop counter */
 224:	20 e0       	ldi	r18, 0x00	; 0
 226:	30 e0       	ldi	r19, 0x00	; 0

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
    /* If the following statement is confusing, please ask for clarification! */

    /* Poll the timer to determine when the timer has reached 0x03E8 */
    while(i<count){
 228:	05 c0       	rjmp	.+10     	; 0x234 <mTimer+0x3c>
        if((TIFR1 & 0x02) == 0x02){
 22a:	b1 9b       	sbis	0x16, 1	; 22
 22c:	fe cf       	rjmp	.-4      	; 0x22a <mTimer+0x32>
            TIFR1 |= _BV(OCF1A); /* clear interrupt flag by writing a ONE to the bit */
 22e:	b1 9a       	sbi	0x16, 1	; 22
            i++; /* increment loop number */
 230:	2f 5f       	subi	r18, 0xFF	; 255
 232:	3f 4f       	sbci	r19, 0xFF	; 255

    TIFR1 |= _BV(OCF1A); /* clear the timer interrupt flag and begin new timing */
    /* If the following statement is confusing, please ask for clarification! */

    /* Poll the timer to determine when the timer has reached 0x03E8 */
    while(i<count){
 234:	24 17       	cp	r18, r20
 236:	35 07       	cpc	r19, r21
 238:	1c f4       	brge	.+6      	; 0x240 <mTimer+0x48>
        if((TIFR1 & 0x02) == 0x02){
 23a:	b1 9b       	sbis	0x16, 1	; 22
 23c:	f6 cf       	rjmp	.-20     	; 0x22a <mTimer+0x32>
 23e:	f7 cf       	rjmp	.-18     	; 0x22e <mTimer+0x36>
 240:	08 95       	ret

00000242 <main>:
/* Avoid using these */

/* main routine 
   You need to add the mtimer function to this project.    */

int main(){	
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
 24a:	28 97       	sbiw	r28, 0x08	; 8
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	f8 94       	cli
 250:	de bf       	out	0x3e, r29	; 62
 252:	0f be       	out	0x3f, r0	; 63
 254:	cd bf       	out	0x3d, r28	; 61
    CLKPR = 0x80; /* This will be discussed later. */
 256:	e1 e6       	ldi	r30, 0x61	; 97
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 e8       	ldi	r24, 0x80	; 128
 25c:	80 83       	st	Z, r24
    CLKPR = 0x01; /* Required to set CPU Clock to 8MHz */
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	80 83       	st	Z, r24
    
    /* Timer instructions */
    /* Sets timer 1 to run at 1MHz, note: CPU clock is set to 8MHz.
       Disable all functions and use as pure timer */
    
    TCCR1B = _BV(CS11); /* _BV sets the bit to logic 1 */
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	link *tail;			/* The ptr to the tail of the queue */
	link *newLink;		/* A ptr to a link aggregate data type (struct) */
	link *rtnLink;		/* same as the above */
	element eTest;		/* A variable to hold the aggregate data type known as element */

	DDRC = 0xFF; 		/* Used for debugging purposes only LEDs on PORTC */
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	87 b9       	out	0x07, r24	; 7
	//DDRD = 0xFF;
				

	rtnLink = NULL;
 26c:	18 86       	std	Y+8, r1	; 0x08
 26e:	1f 82       	std	Y+7, r1	; 0x07
	newLink = NULL;
 270:	1e 82       	std	Y+6, r1	; 0x06
 272:	1d 82       	std	Y+5, r1	; 0x05
* DESC: initializes the linked queue to 'NULL' status
* INPUT: the head and tail pointers by reference
*/

void setup(link **h,link **t){
	*h = NULL;		/* Point the head to NOTHING (NULL) */
 274:	1a 82       	std	Y+2, r1	; 0x02
 276:	19 82       	std	Y+1, r1	; 0x01
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
 278:	1c 82       	std	Y+4, r1	; 0x04
 27a:	1b 82       	std	Y+3, r1	; 0x03
		need the MCU attached to the computer to test this, and can do most of the work using the 
		debugger in the AVR studio while observing the I/O View in the top right corner. Click the tab
		or PORTC to see how the output changes while 'stepping' through the routines.
	*/
	/* Initialize a new link here */
	initLink(&newLink);
 27c:	ce 01       	movw	r24, r28
 27e:	05 96       	adiw	r24, 0x05	; 5
 280:	51 df       	rcall	.-350    	; 0x124 <initLink>
	newLink->e.itemCode = 3;
 282:	ed 81       	ldd	r30, Y+5	; 0x05
 284:	fe 81       	ldd	r31, Y+6	; 0x06
 286:	83 e0       	ldi	r24, 0x03	; 3
 288:	80 83       	st	Z, r24
	newLink->e.stage = 4;
 28a:	ed 81       	ldd	r30, Y+5	; 0x05
 28c:	fe 81       	ldd	r31, Y+6	; 0x06
 28e:	84 e0       	ldi	r24, 0x04	; 4
 290:	81 83       	std	Z+1, r24	; 0x01
	enqueue(&head, &tail, &newLink);
 292:	ae 01       	movw	r20, r28
 294:	4b 5f       	subi	r20, 0xFB	; 251
 296:	5f 4f       	sbci	r21, 0xFF	; 255
 298:	be 01       	movw	r22, r28
 29a:	6d 5f       	subi	r22, 0xFD	; 253
 29c:	7f 4f       	sbci	r23, 0xFF	; 255
 29e:	ce 01       	movw	r24, r28
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	4e df       	rcall	.-356    	; 0x140 <enqueue>
	PORTC = head->e.itemCode;	//  You need to insert mTimer in between each output in order to see the values.
 2a4:	e9 81       	ldd	r30, Y+1	; 0x01
 2a6:	fa 81       	ldd	r31, Y+2	; 0x02
 2a8:	80 81       	ld	r24, Z
 2aa:	88 b9       	out	0x08, r24	; 8
	mTimer(1000);
 2ac:	88 ee       	ldi	r24, 0xE8	; 232
 2ae:	93 e0       	ldi	r25, 0x03	; 3
 2b0:	a3 df       	rcall	.-186    	; 0x1f8 <mTimer>
	PORTC = tail->e.stage;		//  Or the LEDs will just flash by very quickly.  You will need about 2 seconds delay.
 2b2:	eb 81       	ldd	r30, Y+3	; 0x03
 2b4:	fc 81       	ldd	r31, Y+4	; 0x04
 2b6:	81 81       	ldd	r24, Z+1	; 0x01
	mTimer(1000);
 2b8:	88 b9       	out	0x08, r24	; 8
 2ba:	88 ee       	ldi	r24, 0xE8	; 232
 2bc:	93 e0       	ldi	r25, 0x03	; 3

	initLink(&newLink);
 2be:	9c df       	rcall	.-200    	; 0x1f8 <mTimer>
 2c0:	ce 01       	movw	r24, r28
 2c2:	05 96       	adiw	r24, 0x05	; 5
 2c4:	2f df       	rcall	.-418    	; 0x124 <initLink>
	newLink->e.itemCode = 5;
 2c6:	ed 81       	ldd	r30, Y+5	; 0x05
 2c8:	fe 81       	ldd	r31, Y+6	; 0x06
 2ca:	85 e0       	ldi	r24, 0x05	; 5
 2cc:	80 83       	st	Z, r24
	newLink->e.stage = 6;
 2ce:	ed 81       	ldd	r30, Y+5	; 0x05
 2d0:	fe 81       	ldd	r31, Y+6	; 0x06
 2d2:	86 e0       	ldi	r24, 0x06	; 6
 2d4:	81 83       	std	Z+1, r24	; 0x01
	enqueue(&head, &tail, &newLink);
 2d6:	ae 01       	movw	r20, r28
 2d8:	4b 5f       	subi	r20, 0xFB	; 251
 2da:	5f 4f       	sbci	r21, 0xFF	; 255
 2dc:	be 01       	movw	r22, r28
 2de:	6d 5f       	subi	r22, 0xFD	; 253
 2e0:	7f 4f       	sbci	r23, 0xFF	; 255
 2e2:	ce 01       	movw	r24, r28
 2e4:	01 96       	adiw	r24, 0x01	; 1
 2e6:	2c df       	rcall	.-424    	; 0x140 <enqueue>
	PORTC = head->e.itemCode;
 2e8:	e9 81       	ldd	r30, Y+1	; 0x01
 2ea:	fa 81       	ldd	r31, Y+2	; 0x02
 2ec:	80 81       	ld	r24, Z
	mTimer(1000);
 2ee:	88 b9       	out	0x08, r24	; 8
 2f0:	88 ee       	ldi	r24, 0xE8	; 232
 2f2:	93 e0       	ldi	r25, 0x03	; 3
	PORTC = tail->e.stage;
 2f4:	81 df       	rcall	.-254    	; 0x1f8 <mTimer>
 2f6:	eb 81       	ldd	r30, Y+3	; 0x03
 2f8:	fc 81       	ldd	r31, Y+4	; 0x04
	mTimer(1000);
 2fa:	81 81       	ldd	r24, Z+1	; 0x01
 2fc:	88 b9       	out	0x08, r24	; 8
 2fe:	88 ee       	ldi	r24, 0xE8	; 232
 300:	93 e0       	ldi	r25, 0x03	; 3

	initLink(&newLink);
 302:	7a df       	rcall	.-268    	; 0x1f8 <mTimer>
 304:	ce 01       	movw	r24, r28
 306:	05 96       	adiw	r24, 0x05	; 5
 308:	0d df       	rcall	.-486    	; 0x124 <initLink>
	newLink->e.itemCode = 7;
 30a:	ed 81       	ldd	r30, Y+5	; 0x05
 30c:	fe 81       	ldd	r31, Y+6	; 0x06
 30e:	87 e0       	ldi	r24, 0x07	; 7
 310:	80 83       	st	Z, r24
	newLink->e.stage = 8;
 312:	ed 81       	ldd	r30, Y+5	; 0x05
 314:	fe 81       	ldd	r31, Y+6	; 0x06
 316:	88 e0       	ldi	r24, 0x08	; 8
	enqueue(&head, &tail, &newLink);
 318:	81 83       	std	Z+1, r24	; 0x01
 31a:	ae 01       	movw	r20, r28
 31c:	4b 5f       	subi	r20, 0xFB	; 251
 31e:	5f 4f       	sbci	r21, 0xFF	; 255
 320:	be 01       	movw	r22, r28
 322:	6d 5f       	subi	r22, 0xFD	; 253
 324:	7f 4f       	sbci	r23, 0xFF	; 255
 326:	ce 01       	movw	r24, r28
 328:	01 96       	adiw	r24, 0x01	; 1
	PORTC = head->e.itemCode;
 32a:	0a df       	rcall	.-492    	; 0x140 <enqueue>
 32c:	e9 81       	ldd	r30, Y+1	; 0x01
 32e:	fa 81       	ldd	r31, Y+2	; 0x02
	mTimer(1000);
 330:	80 81       	ld	r24, Z
 332:	88 b9       	out	0x08, r24	; 8
 334:	88 ee       	ldi	r24, 0xE8	; 232
	PORTC = tail->e.stage;
 336:	93 e0       	ldi	r25, 0x03	; 3
 338:	5f df       	rcall	.-322    	; 0x1f8 <mTimer>
 33a:	eb 81       	ldd	r30, Y+3	; 0x03
 33c:	fc 81       	ldd	r31, Y+4	; 0x04
	mTimer(1000);
 33e:	81 81       	ldd	r24, Z+1	; 0x01
 340:	88 b9       	out	0x08, r24	; 8
 342:	88 ee       	ldi	r24, 0xE8	; 232

	PORTC = 0x00;
 344:	93 e0       	ldi	r25, 0x03	; 3
	mTimer(1000);
 346:	58 df       	rcall	.-336    	; 0x1f8 <mTimer>
 348:	18 b8       	out	0x08, r1	; 8
 34a:	88 ee       	ldi	r24, 0xE8	; 232
* INPUT: The head pointer
* RETURNS: The element contained within the queue
*/
/* This simply allows you to peek at the head element of the queue and returns a NULL pointer if empty */
element firstValue(link **h){
	return((*h)->e);
 34c:	93 e0       	ldi	r25, 0x03	; 3
 34e:	54 df       	rcall	.-344    	; 0x1f8 <mTimer>
 350:	e9 81       	ldd	r30, Y+1	; 0x01
	mTimer(1000);

	/* Tests to see if firstValue works */
	eTest = firstValue(&head);
	PORTC = eTest.itemCode;
	mTimer(1000);
 352:	fa 81       	ldd	r31, Y+2	; 0x02
 354:	80 81       	ld	r24, Z
 356:	88 b9       	out	0x08, r24	; 8
	PORTC = 0x00;
 358:	88 ee       	ldi	r24, 0xE8	; 232
	mTimer(1000);
 35a:	93 e0       	ldi	r25, 0x03	; 3
 35c:	4d df       	rcall	.-358    	; 0x1f8 <mTimer>
 35e:	18 b8       	out	0x08, r1	; 8
 360:	88 ee       	ldi	r24, 0xE8	; 232

	/* Tests if Size works */
	PORTC = size(&head, &tail);
 362:	93 e0       	ldi	r25, 0x03	; 3
 364:	49 df       	rcall	.-366    	; 0x1f8 <mTimer>
 366:	be 01       	movw	r22, r28
 368:	6d 5f       	subi	r22, 0xFD	; 253
 36a:	7f 4f       	sbci	r23, 0xFF	; 255
 36c:	ce 01       	movw	r24, r28
 36e:	01 96       	adiw	r24, 0x01	; 1
	mTimer(1000);
 370:	32 df       	rcall	.-412    	; 0x1d6 <size>
 372:	88 b9       	out	0x08, r24	; 8
 374:	88 ee       	ldi	r24, 0xE8	; 232

	/* Tests if dequeue works - Uncomment to use
	Also, insert mTimer between each output in order to see the values.   */
	
	dequeue(&head, &rtnLink); /* remove the item at the head of the list */
 376:	93 e0       	ldi	r25, 0x03	; 3
 378:	3f df       	rcall	.-386    	; 0x1f8 <mTimer>
 37a:	be 01       	movw	r22, r28
 37c:	69 5f       	subi	r22, 0xF9	; 249
 37e:	7f 4f       	sbci	r23, 0xFF	; 255
 380:	ce 01       	movw	r24, r28
	PORTC = rtnLink->e.itemCode;
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	fb de       	rcall	.-522    	; 0x17c <dequeue>
 386:	ef 81       	ldd	r30, Y+7	; 0x07
 388:	f8 85       	ldd	r31, Y+8	; 0x08
	mTimer(1000);
 38a:	80 81       	ld	r24, Z
 38c:	88 b9       	out	0x08, r24	; 8
 38e:	88 ee       	ldi	r24, 0xE8	; 232
	free(rtnLink);
 390:	93 e0       	ldi	r25, 0x03	; 3
 392:	32 df       	rcall	.-412    	; 0x1f8 <mTimer>
 394:	8f 81       	ldd	r24, Y+7	; 0x07
 396:	98 85       	ldd	r25, Y+8	; 0x08
	dequeue(&head, &rtnLink); /* remove the item at the head of the list */
 398:	e7 d0       	rcall	.+462    	; 0x568 <free>
 39a:	be 01       	movw	r22, r28
 39c:	69 5f       	subi	r22, 0xF9	; 249
 39e:	7f 4f       	sbci	r23, 0xFF	; 255
 3a0:	ce 01       	movw	r24, r28
 3a2:	01 96       	adiw	r24, 0x01	; 1
	PORTC = rtnLink->e.itemCode;
 3a4:	eb de       	rcall	.-554    	; 0x17c <dequeue>
 3a6:	ef 81       	ldd	r30, Y+7	; 0x07
 3a8:	f8 85       	ldd	r31, Y+8	; 0x08
	mTimer(1000);
 3aa:	80 81       	ld	r24, Z
 3ac:	88 b9       	out	0x08, r24	; 8
 3ae:	88 ee       	ldi	r24, 0xE8	; 232
	free(rtnLink);
 3b0:	93 e0       	ldi	r25, 0x03	; 3
 3b2:	22 df       	rcall	.-444    	; 0x1f8 <mTimer>
 3b4:	8f 81       	ldd	r24, Y+7	; 0x07
 3b6:	98 85       	ldd	r25, Y+8	; 0x08
	dequeue(&head, &rtnLink); /* remove the item at the head of the list */
 3b8:	d7 d0       	rcall	.+430    	; 0x568 <free>
 3ba:	be 01       	movw	r22, r28
 3bc:	69 5f       	subi	r22, 0xF9	; 249
 3be:	7f 4f       	sbci	r23, 0xFF	; 255
 3c0:	ce 01       	movw	r24, r28
 3c2:	01 96       	adiw	r24, 0x01	; 1
	PORTC = rtnLink->e.itemCode;
 3c4:	db de       	rcall	.-586    	; 0x17c <dequeue>
 3c6:	ef 81       	ldd	r30, Y+7	; 0x07
 3c8:	f8 85       	ldd	r31, Y+8	; 0x08
	mTimer(1000);
 3ca:	80 81       	ld	r24, Z
 3cc:	88 b9       	out	0x08, r24	; 8
 3ce:	88 ee       	ldi	r24, 0xE8	; 232
	free(rtnLink);
 3d0:	93 e0       	ldi	r25, 0x03	; 3
 3d2:	12 df       	rcall	.-476    	; 0x1f8 <mTimer>
 3d4:	8f 81       	ldd	r24, Y+7	; 0x07
* RETURNS: 1:if the queue is empty, and 0:if the queue is NOT empty
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
 3d6:	98 85       	ldd	r25, Y+8	; 0x08
 3d8:	c7 d0       	rcall	.+398    	; 0x568 <free>
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	29 81       	ldd	r18, Y+1	; 0x01
 3de:	3a 81       	ldd	r19, Y+2	; 0x02
 3e0:	23 2b       	or	r18, r19
	PORTC = rtnLink->e.itemCode;
	mTimer(1000);
	free(rtnLink);
	
	/* Tests is empty */
	PORTC = isEmpty(&head);
 3e2:	09 f0       	breq	.+2      	; 0x3e6 <main+0x1a4>
	mTimer(1000);
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	88 b9       	out	0x08, r24	; 8
 3e8:	88 ee       	ldi	r24, 0xE8	; 232

	/* Tests to see if clearQueue works*/
	clearQueue(&head, &tail);
 3ea:	93 e0       	ldi	r25, 0x03	; 3
 3ec:	05 df       	rcall	.-502    	; 0x1f8 <mTimer>
 3ee:	be 01       	movw	r22, r28
 3f0:	6d 5f       	subi	r22, 0xFD	; 253
 3f2:	7f 4f       	sbci	r23, 0xFF	; 255
 3f4:	ce 01       	movw	r24, r28
 3f6:	01 96       	adiw	r24, 0x01	; 1
	PORTC = size(&head, &tail);
 3f8:	d2 de       	rcall	.-604    	; 0x19e <clearQueue>
 3fa:	be 01       	movw	r22, r28
 3fc:	6d 5f       	subi	r22, 0xFD	; 253
 3fe:	7f 4f       	sbci	r23, 0xFF	; 255
 400:	ce 01       	movw	r24, r28
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	e8 de       	rcall	.-560    	; 0x1d6 <size>
 406:	88 b9       	out	0x08, r24	; 8
	mTimer(1000);
 408:	88 ee       	ldi	r24, 0xE8	; 232
 40a:	93 e0       	ldi	r25, 0x03	; 3
 40c:	f5 de       	rcall	.-534    	; 0x1f8 <mTimer>
 40e:	81 e0       	ldi	r24, 0x01	; 1
* RETURNS: 1:if the queue is empty, and 0:if the queue is NOT empty
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
 410:	29 81       	ldd	r18, Y+1	; 0x01
 412:	3a 81       	ldd	r19, Y+2	; 0x02
 414:	23 2b       	or	r18, r19
 416:	09 f0       	breq	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	88 b9       	out	0x08, r24	; 8
	/* Tests to see if clearQueue works*/
	clearQueue(&head, &tail);
	PORTC = size(&head, &tail);
	mTimer(1000);

	PORTC = isEmpty(&head);
 41c:	88 ee       	ldi	r24, 0xE8	; 232
	mTimer(1000);
 41e:	93 e0       	ldi	r25, 0x03	; 3
 420:	eb de       	rcall	.-554    	; 0x1f8 <mTimer>
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	90 e0       	ldi	r25, 0x00	; 0


	return(0);
}/* main */
 426:	28 96       	adiw	r28, 0x08	; 8
 428:	0f b6       	in	r0, 0x3f	; 63
 42a:	f8 94       	cli
 42c:	de bf       	out	0x3e, r29	; 62
 42e:	0f be       	out	0x3f, r0	; 63
 430:	cd bf       	out	0x3d, r28	; 61
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	08 95       	ret

00000438 <malloc>:
 438:	0f 93       	push	r16
 43a:	1f 93       	push	r17
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	82 30       	cpi	r24, 0x02	; 2
 442:	91 05       	cpc	r25, r1
 444:	10 f4       	brcc	.+4      	; 0x44a <malloc+0x12>
 446:	82 e0       	ldi	r24, 0x02	; 2
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <__flp>
 44e:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <__flp+0x1>
 452:	20 e0       	ldi	r18, 0x00	; 0
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	a0 e0       	ldi	r26, 0x00	; 0
 458:	b0 e0       	ldi	r27, 0x00	; 0
 45a:	30 97       	sbiw	r30, 0x00	; 0
 45c:	19 f1       	breq	.+70     	; 0x4a4 <malloc+0x6c>
 45e:	40 81       	ld	r20, Z
 460:	51 81       	ldd	r21, Z+1	; 0x01
 462:	02 81       	ldd	r16, Z+2	; 0x02
 464:	13 81       	ldd	r17, Z+3	; 0x03
 466:	48 17       	cp	r20, r24
 468:	59 07       	cpc	r21, r25
 46a:	c8 f0       	brcs	.+50     	; 0x49e <malloc+0x66>
 46c:	84 17       	cp	r24, r20
 46e:	95 07       	cpc	r25, r21
 470:	69 f4       	brne	.+26     	; 0x48c <malloc+0x54>
 472:	10 97       	sbiw	r26, 0x00	; 0
 474:	31 f0       	breq	.+12     	; 0x482 <malloc+0x4a>
 476:	12 96       	adiw	r26, 0x02	; 2
 478:	0c 93       	st	X, r16
 47a:	12 97       	sbiw	r26, 0x02	; 2
 47c:	13 96       	adiw	r26, 0x03	; 3
 47e:	1c 93       	st	X, r17
 480:	27 c0       	rjmp	.+78     	; 0x4d0 <malloc+0x98>
 482:	00 93 08 02 	sts	0x0208, r16	; 0x800208 <__flp>
 486:	10 93 09 02 	sts	0x0209, r17	; 0x800209 <__flp+0x1>
 48a:	22 c0       	rjmp	.+68     	; 0x4d0 <malloc+0x98>
 48c:	21 15       	cp	r18, r1
 48e:	31 05       	cpc	r19, r1
 490:	19 f0       	breq	.+6      	; 0x498 <malloc+0x60>
 492:	42 17       	cp	r20, r18
 494:	53 07       	cpc	r21, r19
 496:	18 f4       	brcc	.+6      	; 0x49e <malloc+0x66>
 498:	9a 01       	movw	r18, r20
 49a:	bd 01       	movw	r22, r26
 49c:	ef 01       	movw	r28, r30
 49e:	df 01       	movw	r26, r30
 4a0:	f8 01       	movw	r30, r16
 4a2:	db cf       	rjmp	.-74     	; 0x45a <malloc+0x22>
 4a4:	21 15       	cp	r18, r1
 4a6:	31 05       	cpc	r19, r1
 4a8:	f9 f0       	breq	.+62     	; 0x4e8 <malloc+0xb0>
 4aa:	28 1b       	sub	r18, r24
 4ac:	39 0b       	sbc	r19, r25
 4ae:	24 30       	cpi	r18, 0x04	; 4
 4b0:	31 05       	cpc	r19, r1
 4b2:	80 f4       	brcc	.+32     	; 0x4d4 <malloc+0x9c>
 4b4:	8a 81       	ldd	r24, Y+2	; 0x02
 4b6:	9b 81       	ldd	r25, Y+3	; 0x03
 4b8:	61 15       	cp	r22, r1
 4ba:	71 05       	cpc	r23, r1
 4bc:	21 f0       	breq	.+8      	; 0x4c6 <malloc+0x8e>
 4be:	fb 01       	movw	r30, r22
 4c0:	93 83       	std	Z+3, r25	; 0x03
 4c2:	82 83       	std	Z+2, r24	; 0x02
 4c4:	04 c0       	rjmp	.+8      	; 0x4ce <malloc+0x96>
 4c6:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__flp+0x1>
 4ca:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__flp>
 4ce:	fe 01       	movw	r30, r28
 4d0:	32 96       	adiw	r30, 0x02	; 2
 4d2:	44 c0       	rjmp	.+136    	; 0x55c <malloc+0x124>
 4d4:	fe 01       	movw	r30, r28
 4d6:	e2 0f       	add	r30, r18
 4d8:	f3 1f       	adc	r31, r19
 4da:	81 93       	st	Z+, r24
 4dc:	91 93       	st	Z+, r25
 4de:	22 50       	subi	r18, 0x02	; 2
 4e0:	31 09       	sbc	r19, r1
 4e2:	39 83       	std	Y+1, r19	; 0x01
 4e4:	28 83       	st	Y, r18
 4e6:	3a c0       	rjmp	.+116    	; 0x55c <malloc+0x124>
 4e8:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 4ec:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 4f0:	23 2b       	or	r18, r19
 4f2:	41 f4       	brne	.+16     	; 0x504 <malloc+0xcc>
 4f4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 4f8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 4fc:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <__data_end+0x1>
 500:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <__data_end>
 504:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 508:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 50c:	21 15       	cp	r18, r1
 50e:	31 05       	cpc	r19, r1
 510:	41 f4       	brne	.+16     	; 0x522 <malloc+0xea>
 512:	2d b7       	in	r18, 0x3d	; 61
 514:	3e b7       	in	r19, 0x3e	; 62
 516:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 51a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 51e:	24 1b       	sub	r18, r20
 520:	35 0b       	sbc	r19, r21
 522:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
 526:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
 52a:	e2 17       	cp	r30, r18
 52c:	f3 07       	cpc	r31, r19
 52e:	a0 f4       	brcc	.+40     	; 0x558 <malloc+0x120>
 530:	2e 1b       	sub	r18, r30
 532:	3f 0b       	sbc	r19, r31
 534:	28 17       	cp	r18, r24
 536:	39 07       	cpc	r19, r25
 538:	78 f0       	brcs	.+30     	; 0x558 <malloc+0x120>
 53a:	ac 01       	movw	r20, r24
 53c:	4e 5f       	subi	r20, 0xFE	; 254
 53e:	5f 4f       	sbci	r21, 0xFF	; 255
 540:	24 17       	cp	r18, r20
 542:	35 07       	cpc	r19, r21
 544:	48 f0       	brcs	.+18     	; 0x558 <malloc+0x120>
 546:	4e 0f       	add	r20, r30
 548:	5f 1f       	adc	r21, r31
 54a:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <__data_end+0x1>
 54e:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <__data_end>
 552:	81 93       	st	Z+, r24
 554:	91 93       	st	Z+, r25
 556:	02 c0       	rjmp	.+4      	; 0x55c <malloc+0x124>
 558:	e0 e0       	ldi	r30, 0x00	; 0
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	cf 01       	movw	r24, r30
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	1f 91       	pop	r17
 564:	0f 91       	pop	r16
 566:	08 95       	ret

00000568 <free>:
 568:	cf 93       	push	r28
 56a:	df 93       	push	r29
 56c:	00 97       	sbiw	r24, 0x00	; 0
 56e:	09 f4       	brne	.+2      	; 0x572 <free+0xa>
 570:	81 c0       	rjmp	.+258    	; 0x674 <free+0x10c>
 572:	fc 01       	movw	r30, r24
 574:	32 97       	sbiw	r30, 0x02	; 2
 576:	13 82       	std	Z+3, r1	; 0x03
 578:	12 82       	std	Z+2, r1	; 0x02
 57a:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <__flp>
 57e:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <__flp+0x1>
 582:	10 97       	sbiw	r26, 0x00	; 0
 584:	81 f4       	brne	.+32     	; 0x5a6 <free+0x3e>
 586:	20 81       	ld	r18, Z
 588:	31 81       	ldd	r19, Z+1	; 0x01
 58a:	82 0f       	add	r24, r18
 58c:	93 1f       	adc	r25, r19
 58e:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 592:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 596:	28 17       	cp	r18, r24
 598:	39 07       	cpc	r19, r25
 59a:	51 f5       	brne	.+84     	; 0x5f0 <free+0x88>
 59c:	f0 93 07 02 	sts	0x0207, r31	; 0x800207 <__data_end+0x1>
 5a0:	e0 93 06 02 	sts	0x0206, r30	; 0x800206 <__data_end>
 5a4:	67 c0       	rjmp	.+206    	; 0x674 <free+0x10c>
 5a6:	ed 01       	movw	r28, r26
 5a8:	20 e0       	ldi	r18, 0x00	; 0
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	ce 17       	cp	r28, r30
 5ae:	df 07       	cpc	r29, r31
 5b0:	40 f4       	brcc	.+16     	; 0x5c2 <free+0x5a>
 5b2:	4a 81       	ldd	r20, Y+2	; 0x02
 5b4:	5b 81       	ldd	r21, Y+3	; 0x03
 5b6:	9e 01       	movw	r18, r28
 5b8:	41 15       	cp	r20, r1
 5ba:	51 05       	cpc	r21, r1
 5bc:	f1 f0       	breq	.+60     	; 0x5fa <free+0x92>
 5be:	ea 01       	movw	r28, r20
 5c0:	f5 cf       	rjmp	.-22     	; 0x5ac <free+0x44>
 5c2:	d3 83       	std	Z+3, r29	; 0x03
 5c4:	c2 83       	std	Z+2, r28	; 0x02
 5c6:	40 81       	ld	r20, Z
 5c8:	51 81       	ldd	r21, Z+1	; 0x01
 5ca:	84 0f       	add	r24, r20
 5cc:	95 1f       	adc	r25, r21
 5ce:	c8 17       	cp	r28, r24
 5d0:	d9 07       	cpc	r29, r25
 5d2:	59 f4       	brne	.+22     	; 0x5ea <free+0x82>
 5d4:	88 81       	ld	r24, Y
 5d6:	99 81       	ldd	r25, Y+1	; 0x01
 5d8:	84 0f       	add	r24, r20
 5da:	95 1f       	adc	r25, r21
 5dc:	02 96       	adiw	r24, 0x02	; 2
 5de:	91 83       	std	Z+1, r25	; 0x01
 5e0:	80 83       	st	Z, r24
 5e2:	8a 81       	ldd	r24, Y+2	; 0x02
 5e4:	9b 81       	ldd	r25, Y+3	; 0x03
 5e6:	93 83       	std	Z+3, r25	; 0x03
 5e8:	82 83       	std	Z+2, r24	; 0x02
 5ea:	21 15       	cp	r18, r1
 5ec:	31 05       	cpc	r19, r1
 5ee:	29 f4       	brne	.+10     	; 0x5fa <free+0x92>
 5f0:	f0 93 09 02 	sts	0x0209, r31	; 0x800209 <__flp+0x1>
 5f4:	e0 93 08 02 	sts	0x0208, r30	; 0x800208 <__flp>
 5f8:	3d c0       	rjmp	.+122    	; 0x674 <free+0x10c>
 5fa:	e9 01       	movw	r28, r18
 5fc:	fb 83       	std	Y+3, r31	; 0x03
 5fe:	ea 83       	std	Y+2, r30	; 0x02
 600:	49 91       	ld	r20, Y+
 602:	59 91       	ld	r21, Y+
 604:	c4 0f       	add	r28, r20
 606:	d5 1f       	adc	r29, r21
 608:	ec 17       	cp	r30, r28
 60a:	fd 07       	cpc	r31, r29
 60c:	61 f4       	brne	.+24     	; 0x626 <free+0xbe>
 60e:	80 81       	ld	r24, Z
 610:	91 81       	ldd	r25, Z+1	; 0x01
 612:	84 0f       	add	r24, r20
 614:	95 1f       	adc	r25, r21
 616:	02 96       	adiw	r24, 0x02	; 2
 618:	e9 01       	movw	r28, r18
 61a:	99 83       	std	Y+1, r25	; 0x01
 61c:	88 83       	st	Y, r24
 61e:	82 81       	ldd	r24, Z+2	; 0x02
 620:	93 81       	ldd	r25, Z+3	; 0x03
 622:	9b 83       	std	Y+3, r25	; 0x03
 624:	8a 83       	std	Y+2, r24	; 0x02
 626:	e0 e0       	ldi	r30, 0x00	; 0
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	12 96       	adiw	r26, 0x02	; 2
 62c:	8d 91       	ld	r24, X+
 62e:	9c 91       	ld	r25, X
 630:	13 97       	sbiw	r26, 0x03	; 3
 632:	00 97       	sbiw	r24, 0x00	; 0
 634:	19 f0       	breq	.+6      	; 0x63c <free+0xd4>
 636:	fd 01       	movw	r30, r26
 638:	dc 01       	movw	r26, r24
 63a:	f7 cf       	rjmp	.-18     	; 0x62a <free+0xc2>
 63c:	8d 91       	ld	r24, X+
 63e:	9c 91       	ld	r25, X
 640:	11 97       	sbiw	r26, 0x01	; 1
 642:	9d 01       	movw	r18, r26
 644:	2e 5f       	subi	r18, 0xFE	; 254
 646:	3f 4f       	sbci	r19, 0xFF	; 255
 648:	82 0f       	add	r24, r18
 64a:	93 1f       	adc	r25, r19
 64c:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 650:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 654:	28 17       	cp	r18, r24
 656:	39 07       	cpc	r19, r25
 658:	69 f4       	brne	.+26     	; 0x674 <free+0x10c>
 65a:	30 97       	sbiw	r30, 0x00	; 0
 65c:	29 f4       	brne	.+10     	; 0x668 <free+0x100>
 65e:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <__flp+0x1>
 662:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <__flp>
 666:	02 c0       	rjmp	.+4      	; 0x66c <free+0x104>
 668:	13 82       	std	Z+3, r1	; 0x03
 66a:	12 82       	std	Z+2, r1	; 0x02
 66c:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <__data_end+0x1>
 670:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <__data_end>
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	08 95       	ret

0000067a <_exit>:
 67a:	f8 94       	cli

0000067c <__stop_program>:
 67c:	ff cf       	rjmp	.-2      	; 0x67c <__stop_program>
